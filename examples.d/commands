#!/usr/bin/env bash
# Title:         valet.d/commands
# Description:   This script is auto-generated by the 'build' script
#                It contains metadata on each commands
# Author:        github.com/jcaillon
# shellcheck disable=SC2034

_CMD_INCLUDED=1

# /!\ This file is auto-generated by the 'self-build' script. Do not edit it manually



# list all the functions callable with a command
CMD_ALL_FUNCTIONS="helloWorld
selfBuild
selfDownloadBinaries
selfMenu
selfRelease
selfTest
selfTestCore
selfUpdate
selfWelcomeUser
showCaseSudo
showCommandHelp
showcaseCommand1
showcaseMenu
this
"


# Get the function name from a command
CMD_FUNCTION_NAME_showcase_hello_world="helloWorld"
CMD_FUNCTION_NAME_self_build="selfBuild"
CMD_FUNCTION_NAME_self_download_binaries="selfDownloadBinaries"
CMD_FUNCTION_NAME_self="selfMenu"
CMD_FUNCTION_NAME_self_release="selfRelease"
CMD_FUNCTION_NAME_self_test="selfTest"
CMD_FUNCTION_NAME_self_test_core="selfTestCore"
CMD_FUNCTION_NAME_self_update="selfUpdate"
CMD_FUNCTION_NAME_self_welcome_user="selfWelcomeUser"
CMD_FUNCTION_NAME_showcase_sudo_command="showCaseSudo"
CMD_FUNCTION_NAME_help="showCommandHelp"
CMD_FUNCTION_NAME_showcase_command1="showcaseCommand1"
CMD_FUNCTION_NAME_showcase="showcaseMenu"
CMD_FUNCTION_NAME_="this"


# get the maximum number of sub command levels; e.g. 'command subcommand subsubcommand' has 2 levels
CMD_MAX_SUB_COMMAND_LEVEL="1"


# list all the commands
CMD_ALL_COMMANDS="

help
self
self build
self download-binaries
self release
self test
self test-core
self update
self welcome-user
showcase
showcase command1
showcase hello-world
showcase sudo-command
"


# get the maximum width (nb characters) among all commands
CMD_MAX_COMMAND_WIDTH="22"


# Get the input for fzf to display the header commands menu
CMD_COMMANDS_MENU_HEADER="Please select the command to run (filter by typing anything)"
CMD_COMMANDS_MENU_BODY="help                    	Show the help this program or of a specific command
self build              	Re-build the menu of valet from your commands.
self download-binaries  	Download the required binaries for valet.
self release            	Release a new version of valet.
self                    	Show the valet self-maintenance sub menu.
self test-core          	Test valet core features.
self test               	Test your valet custom commands.
self update             	Update valet using the latest release on GitHub.
self welcome-user       	The command run after the installation of Valet to guide the user.
showcase command1       	A showcase command that uses arguments and options.
showcase hello-world    	An hello world command
showcase                	Show the showcase sub menu.
showcase sudo-command   	A command that requires sudo"


# ====================
# Variables to describe each function
# ====================
# Get the properties of a given function xxx.
# CMD_COMMAND_xxx = the command of the function
# CMD_FILETOSOURCE_xxx = the file to source for the function
# CMD_SUDO_xxx = true if the function requires sudo
# CMD_SHORTDESCRIPTION_xxx = the short description of the function
# CMD_DESCRIPTION_xxx = the description of the function
# CMD_EXAMPLES_NAME_xxx = array with each example name
# CMD_EXAMPLES_DESCRIPTION_xxx = array with each example description
# CMD_OPTIONS_NAME_xxx = array with each option name
# CMD_OPTIONS_DESCRIPTION_xxx = array with each option description
# CMD_ARGUMENTS_NAME_xxx = array with each argument name
# CMD_ARGUMENTS_DESCRIPTION_xxx = array with each argument description
# CMD_COMMANDS_NAME_xxx = array with each sub command name
# CMD_COMMANDS_SHORTDESCRIPTION_xxx = array with each sub commmand short description
CMD_COMMAND_helloWorld="showcase hello-world"
CMD_COMMAND_selfBuild="self build"
CMD_COMMAND_selfDownloadBinaries="self download-binaries"
CMD_COMMAND_selfMenu="self"
CMD_COMMAND_selfRelease="self release"
CMD_COMMAND_selfTest="self test"
CMD_COMMAND_selfTestCore="self test-core"
CMD_COMMAND_selfUpdate="self update"
CMD_COMMAND_selfWelcomeUser="self welcome-user"
CMD_COMMAND_showCaseSudo="showcase sudo-command"
CMD_COMMAND_showCommandHelp="help"
CMD_COMMAND_showcaseCommand1="showcase command1"
CMD_COMMAND_showcaseMenu="showcase"
CMD_FILETOSOURCE_helloWorld="examples.d/showcase/showcase.sh"
CMD_FILETOSOURCE_selfBuild="valet.d/commands.d/self-build"
CMD_FILETOSOURCE_selfDownloadBinaries="valet.d/commands.d/self-download-binaries.sh"
CMD_FILETOSOURCE_selfMenu="valet.d/commands.d/self.sh"
CMD_FILETOSOURCE_selfRelease="valet.d/commands.d/self-release.sh"
CMD_FILETOSOURCE_selfTest="valet.d/commands.d/self-test.sh"
CMD_FILETOSOURCE_selfTestCore="valet.d/commands.d/self-test.sh"
CMD_FILETOSOURCE_selfUpdate="valet.d/commands.d/self-install.sh"
CMD_FILETOSOURCE_selfWelcomeUser="valet.d/commands.d/self-install.sh"
CMD_FILETOSOURCE_showCaseSudo="examples.d/showcase/showcase.sh"
CMD_FILETOSOURCE_showcaseCommand1="examples.d/showcase/showcase.sh"
CMD_FILETOSOURCE_showcaseMenu="examples.d/showcase/showcase.sh"
CMD_SUDO_showCaseSudo="true"
CMD_SUDO_showcaseCommand1="true"
CMD_SHORTDESCRIPTION_helloWorld="An hello world command"
CMD_SHORTDESCRIPTION_selfBuild="Re-build the menu of valet from your commands."
CMD_SHORTDESCRIPTION_selfDownloadBinaries="Download the required binaries for valet."
CMD_SHORTDESCRIPTION_selfMenu="Show the valet self-maintenance sub menu."
CMD_SHORTDESCRIPTION_selfRelease="Release a new version of valet."
CMD_SHORTDESCRIPTION_selfTest="Test your valet custom commands."
CMD_SHORTDESCRIPTION_selfTestCore="Test valet core features."
CMD_SHORTDESCRIPTION_selfUpdate="Update valet using the latest release on GitHub."
CMD_SHORTDESCRIPTION_selfWelcomeUser="The command run after the installation of Valet to guide the user."
CMD_SHORTDESCRIPTION_showCaseSudo="A command that requires sudo"
CMD_SHORTDESCRIPTION_showCommandHelp="Show the help this program or of a specific command"
CMD_SHORTDESCRIPTION_showcaseCommand1="A showcase command that uses arguments and options."
CMD_SHORTDESCRIPTION_showcaseMenu="Show the showcase sub menu."
CMD_SHORTDESCRIPTION_this="Your personal assistant in the terminal!"
CMD_DESCRIPTION_helloWorld="An hello world command."
CMD_DESCRIPTION_selfBuild="This command can be used to re-build the menu in case you have modified, added or removed an about_xxx function in your command scripts.

Please check https://github.com/jcaillon/valet/blob/main/docs/create-new-command.md or check the examples in ⌜examples.d⌝ directory to learn how to create and modified your commands."
CMD_DESCRIPTION_selfDownloadBinaries="Download the required binaries for valet: fzf, curl, yq.

These binaries will be stored in the bin directory of valet and used in priority over the binaries in your PATH."
CMD_DESCRIPTION_selfMenu="Show the valet self-maintenance sub menu.

This is a sub command that regroups commands useful to maintain valet."
CMD_DESCRIPTION_selfRelease="Release a new version of valet.

It will:
- creates a git tag and pushes it to the remote repository,
- bump the version of valet,
- commit the new version."
CMD_DESCRIPTION_selfTest="Test your valet custom commands using approval tests approach."
CMD_DESCRIPTION_selfTestCore="Test valet core features using approval tests approach."
CMD_DESCRIPTION_selfUpdate="Update valet using the latest release on GitHub."
CMD_DESCRIPTION_selfWelcomeUser="The command run after the installation of Valet to guide the user.

Adjust the Valet configuration according to the user environment.
Let the user know what to do next."
CMD_DESCRIPTION_showCaseSudo="Before starting this command, valet will check if sudo is available.

If so, it will require the user to enter the sudo password and use sudo inside the command"
CMD_DESCRIPTION_showCommandHelp="Show the help this program or of the help of a specific command.

You can show the help with or without colors and set the maximum columns for the help text."
CMD_DESCRIPTION_showcaseCommand1="An example of description.

You can put any text here, it will be wrapped to fit the terminal width.

You can ⌜highlight⌝ some text as well."
CMD_DESCRIPTION_showcaseMenu="Can be used to show the showcase sub menu in interactive mode."
CMD_DESCRIPTION_this="Valet helps you browse, understand and execute your custom bash commands.

Online documentation is available at https://github.com/jcaillon/valet.

You can call valet without any commands to start an interactive session.

⌜Exit codes:⌝

- 0: everything went well
- 1+: an error occured

⌜Create your own commands:⌝
You can create your own commands and have them available in valet, please check https://github.com/jcaillon/valet/blob/main/docs/create-new-command.md or the examples under examples.d to do so.
Valet looks for commands in the valet user directory, which default to ~/.valet.d and can be overwritten using an environment variable (see below).
Once you have created your new command script, run the ⌜valet self build⌝ command to update the valet menu.

⌜Configuration through environment variables:⌝

In addition to the environment variables defined for each options, you can define the following environment variables to configure valet:

- VALET_USER_DIRECTORY=\"~/valet.d\": set the path to the valet user directory (in which to find user commands).
- VALET_NO_COLOR=\"true\": will disable the color output for logs and help.
- VALET_COLOR_XXX=\"color\": will set the colors for the logs and the help, XXX can be one of these: DEFAULT, TITLE, OPTION, ARGUMENT, COMMAND, DEBUG, INFO, WARNING, SUCCESS, ERROR, TIMESTAMP, HIGHLIGHT.
- VALET_NO_WRAP=\"true\": will disable the text wrapping for logs.
- VALET_NO_ICON=\"true\": will disable the icons for logs and help.
- VALET_NO_TIMESTAMP=\"true\": will disable the timestamp for logs.
- VALET_LOG_COLUMNS=\"120\": set the number of columns at which to wrap the logs to 120 (if wrap is enabled); defaults to the terminal width.
- VALET_CI_MODE=\"true\": will simplify the log output for CI/CD environments (or slow systems), will display the logs without colors, without wrapping lines and with the full date.
- VALET_REMEMBER_LAST_CHOICES=\"3\": number of last choices to remember when selecting an item from a command menu. Set to 0 to disable this feature and always display items in the alphabetical order.
- VALET_DO_NOT_USE_LOCAL_BIN=\"false\": if true, valet will use the executable from the PATH even if they exist in the valet bin/ directory.

These variables can be exported in your .bashrc file.
Alternatively, you can define them in your valet user config file, located by default at ~/.config/valet/config. This path can be configured using the VALET_USER_CONFIG_FILE environment variable.

⌜Developer notes:⌝

You can enable debug mode with profiling for valet by setting the environment variable VALET_STARTUP_PROFILING to true (it will output to ~/profile_valet.txt)."
CMD_EXAMPLES_NAME_selfMenu=(
  "self build"
)
CMD_EXAMPLES_DESCRIPTION_selfMenu=(
  "Re-build the valet menu by calling the ⌜build⌝ sub command."
)
CMD_EXAMPLES_NAME_showCommandHelp=(
  "help cmd"
  "help cmd subCmd"
  "help --no-colors --columns 50"
)
CMD_EXAMPLES_DESCRIPTION_showCommandHelp=(
  "Shows the help for the command ⌜cmd⌝"
  "Shows the help for the sub command ⌜subCmd⌝ of the command ⌜cmd⌝"
  "Shows the help for the program without any color and with a maximum of 50 columns"
)
CMD_EXAMPLES_NAME_showcaseCommand1=(
  "showcase command1 -o -2 value1 arg1 more1 more2"
)
CMD_EXAMPLES_DESCRIPTION_showcaseCommand1=(
  "Call command1 with option1, option2 and some arguments."
)
CMD_EXAMPLES_NAME_showcaseMenu=(
  "showcase command1"
)
CMD_EXAMPLES_DESCRIPTION_showcaseMenu=(
  "Run the ⌜command1⌝ showcase command."
)
CMD_EXAMPLES_NAME_this=(
  "--help"
  "-v a-command and-sub-command"
)
CMD_EXAMPLES_DESCRIPTION_this=(
  "Displays this help text."
  "Active ⌜verbose⌝ mode and run the command ⌜a-command⌝ with the sub command ⌜and-sub-command⌝."
)
CMD_OPTIONS_NAME_helloWorld=(
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_helloWorld=(
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfBuild=(
  "-d, --user-directory <path>"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfBuild=(
  "Specify the directory in which to look for your command scripts.

This defaults to ⌜~/.valet.d⌝ or the path defined in the environment variable VALET_USER_DIRECTORY=\"my/path\".
This option can be set by exporting the variable VALET_USER_DIRECTORY=\"<path>\"."
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfDownloadBinaries=(
  "-os, --force-os <name>"
  "--destination <path>"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfDownloadBinaries=(
  "By default, this command will download the binaries for your current OS.

You can force the download for a specific OS by providing the name of the OS.

Possible values are: linux, windows, macos.
This option can be set by exporting the variable VALET_FORCE_OS=\"<name>\"."
  "By default, this command will download the binaries in valet bin/ directory.

You can force the download in a specific directory by providing the path.
This option can be set by exporting the variable VALET_DESTINATION=\"<path>\"."
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfMenu=(
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfMenu=(
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfRelease=(
  "-t, --github-release-token <token>"
  "-b, --bump-level <semver>"
  "--dry-run"
  "--upload-artifacts-only"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfRelease=(
  "The token necessary to create the release on GitHub and upload artifacts.
This option can be set by exporting the variable VALET_GITHUB_RELEASE_TOKEN=\"<token>\"."
  "The semver level to bump the version.

Can be either: major or minor.
This option can be set by exporting the variable VALET_BUMP_LEVEL=\"<semver>\"."
  "Do not perform the release, just show what would be done.
This option can be set by exporting the variable VALET_DRY_RUN=\"true\"."
  "Do no create the release, just upload the artifacts to the latest release.
This option can be set by exporting the variable VALET_UPLOAD_ARTIFACTS_ONLY=\"true\"."
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfTest=(
  "-d, --user-directory <path>"
  "-a, --auto-approve"
  "-c, --with-core"
  "-i, --include <pattern>"
  "-e, --exclude <pattern>"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfTest=(
  "The path to your valet directory.

Each sub directory named ⌜.tests.d⌝ will be considered as a test directory containing a test.sh file.
This option can be set by exporting the variable VALET_USER_DIRECTORY=\"<path>\"."
  "The received test result files will automatically be approved.
This option can be set by exporting the variable VALET_AUTO_APPROVE=\"true\"."
  "Also test the valet core functions.

This is only if you modified valet core functions themselves.
This option can be set by exporting the variable VALET_WITH_CORE=\"true\"."
  "A regex pattern to include only the test suites that match the pattern.

The name of the test suite is given by the name of the directory containing the .sh test files.

Example: --include '(1|commands)'
This option can be set by exporting the variable VALET_INCLUDE=\"<pattern>\"."
  "A regex pattern to exclude all the test suites that match the pattern.

The name of the test suite is given by the name of the directory containing the .sh test files.

Example: --exclude '(1|commands)'
This option can be set by exporting the variable VALET_EXCLUDE=\"<pattern>\"."
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfTestCore=(
  "-a, --auto-approve"
  "-i, --include <pattern>"
  "-e, --exclude <pattern>"
  "--error"
  "--fail"
  "--exit"
  "--unknown-command"
  "--create-temp-files"
  "--create-temp-files"
  "--logging-level"
  "--wait-indefinitely"
  "--show-help"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfTestCore=(
  "The received test result files will automatically be approved.
This option can be set by exporting the variable VALET_AUTO_APPROVE=\"true\"."
  "A regex pattern to include only the test suites that match the pattern.

The name of the test suite is given by the name of the directory containing the .sh test files.

Example: --include '(1|commands)'
This option can be set by exporting the variable VALET_INCLUDE=\"<pattern>\"."
  "A regex pattern to exclude all the test suites that match the pattern.

The name of the test suite is given by the name of the directory containing the .sh test files.

Example: --exclude '(1|commands)'
This option can be set by exporting the variable VALET_EXCLUDE=\"<pattern>\"."
  "Test the error handling."
  "Test the fail."
  "Test the exit code."
  "Test with an unknown command."
  "Test to create temp file and directory."
  "Test to create temp file and directory."
  "Test to output all log level messages."
  "Test to wait indefinitely."
  "Test to show the help of the function.
This option can be set by exporting the variable VALET_SHOW_HELP=\"true\"."
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfUpdate=(
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfUpdate=(
  "Display the help for this command"
)
CMD_OPTIONS_NAME_selfWelcomeUser=(
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_selfWelcomeUser=(
  "Display the help for this command"
)
CMD_OPTIONS_NAME_showCaseSudo=(
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_showCaseSudo=(
  "Display the help for this command"
)
CMD_OPTIONS_NAME_showCommandHelp=(
  "-nc, --no-colors"
  "-c, --columns <number>"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_showCommandHelp=(
  "Do not use any colors in the output
This option can be set by exporting the variable VALET_NO_COLORS=\"true\"."
  "Set the maximum columns for the help text
This option can be set by exporting the variable VALET_COLUMNS=\"<number>\"."
  "Display the help for this command"
)
CMD_OPTIONS_NAME_showcaseCommand1=(
  "-o, --option1"
  "-o2, -2, --this-is-option2 <level>"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_showcaseCommand1=(
  "First option.
This option can be set by exporting the variable VALET_OPTION1=\"true\"."
  "An option with a value.
This option can be set by exporting the variable VALET_THIS_IS_OPTION2=\"<level>\"."
  "Display the help for this command"
)
CMD_OPTIONS_NAME_showcaseMenu=(
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_showcaseMenu=(
  "Display the help for this command"
)
CMD_OPTIONS_NAME_this=(
  "-x, --profiling"
  "-ll, -log, --log-level <level>"
  "-v, --verbose"
  "-i, --force-interactive-mode"
  "--version"
  "-h, --help"
)
CMD_OPTIONS_DESCRIPTION_this=(
  "Turn on profiling (with debug mode) before running the required command.
It will output to ~/profile_valet_cmd.txt.
This is useful to debug your command and understand what takes a long time to execute.
This option can be set by exporting the variable VALET_PROFILING=\"true\"."
  "Set the log level of valet (defaults to info).
Possible values are: debug, success, info, success, warning, error.
This option can be set by exporting the variable VALET_LOG_LEVEL=\"<level>\"."
  "Output verbose information.
This is the equivalent of setting the log level to debug.
This option can be set by exporting the variable VALET_VERBOSE=\"true\"."
  "Enter interactive mode for commands even if arguments are not required or provided.
This option can be set by exporting the variable VALET_FORCE_INTERACTIVE_MODE=\"true\"."
  "Display the current version of valet."
  "Display the help for this command"
)
CMD_ARGUMENTS_NAME_selfMenu=(
  "commands?..."
)
CMD_ARGUMENTS_DESCRIPTION_selfMenu=(
  "The command to execute.

See the commands section for more information."
)
CMD_ARGUMENTS_NAME_showCommandHelp=(
  "commands?..."
)
CMD_ARGUMENTS_DESCRIPTION_showCommandHelp=(
  "The name of the command to show the help for.
If not provided, show the help for the program."
)
CMD_ARGUMENTS_NAME_showcaseCommand1=(
  "firstArg"
  "more..."
)
CMD_ARGUMENTS_DESCRIPTION_showcaseCommand1=(
  "First argument."
  "Will be an an array of strings."
)
CMD_ARGUMENTS_NAME_showcaseMenu=(
  "commands?..."
)
CMD_ARGUMENTS_DESCRIPTION_showcaseMenu=(
  "The command to execute.

See the commands section for more information."
)
CMD_ARGUMENTS_NAME_this=(
  "commands?..."
)
CMD_ARGUMENTS_DESCRIPTION_this=(
  "The command or sub commands to execute.
See the commands section for more information."
)
CMD_COMMANDS_NAME_selfMenu=(
  "build"
  "download-binaries"
  "release"
  "test"
  "test-core"
  "update"
  "welcome-user"
)
CMD_COMMANDS_DESCRIPTION_selfMenu=(
  "Re-build the menu of valet from your commands."
  "Download the required binaries for valet."
  "Release a new version of valet."
  "Test your valet custom commands."
  "Test valet core features."
  "Update valet using the latest release on GitHub."
  "The command run after the installation of Valet to guide the user."
)
CMD_COMMANDS_NAME_showcaseMenu=(
  "hello-world"
  "sudo-command"
  "command1"
)
CMD_COMMANDS_DESCRIPTION_showcaseMenu=(
  "An hello world command"
  "A command that requires sudo"
  "A showcase command that uses arguments and options."
)
CMD_COMMANDS_NAME_this=(
  "showcase hello-world"
  "self build"
  "self download-binaries"
  "self"
  "self release"
  "self test"
  "self test-core"
  "self update"
  "self welcome-user"
  "showcase sudo-command"
  "help"
  "showcase command1"
  "showcase"
)
CMD_COMMANDS_DESCRIPTION_this=(
  "An hello world command"
  "Re-build the menu of valet from your commands."
  "Download the required binaries for valet."
  "Show the valet self-maintenance sub menu."
  "Release a new version of valet."
  "Test your valet custom commands."
  "Test valet core features."
  "Update valet using the latest release on GitHub."
  "The command run after the installation of Valet to guide the user."
  "A command that requires sudo"
  "Show the help this program or of a specific command"
  "A showcase command that uses arguments and options."
  "Show the showcase sub menu."
)


# ====================
# Variables used during parsing
# ====================
# Get the options of a given function xxx.
# CMD_OPTS_xxx = array with each option separated by a space
# CMD_OPTS_HAS_VALUE_xxx = array which indicates for each option if it has a value or not
# CMD_OPTS_NAME_xxx = array with each option names in camel case
# CMD_OPTS_NAME_SC_xxx = array with each option names in snake case
CMD_OPTS_helloWorld=("-h --help")
CMD_OPTS_NAME_helloWorld=("help")
CMD_OPTS_selfBuild=(
  "-d --user-directory"
  "-h --help"
)
CMD_OPTS_HAS_VALUE_selfBuild=(
  "true"
)
CMD_OPTS_NAME_selfBuild=(
  "userDirectory"
  "help"
)
CMD_OPTS_NAME_SC_selfBuild=(
  "USER_DIRECTORY"
)
CMD_OPTS_selfDownloadBinaries=(
  "-os --force-os"
  "--destination"
  "-h --help"
)
CMD_OPTS_HAS_VALUE_selfDownloadBinaries=(
  "true"
  "true"
)
CMD_OPTS_NAME_selfDownloadBinaries=(
  "forceOs"
  "destination"
  "help"
)
CMD_OPTS_NAME_SC_selfDownloadBinaries=(
  "FORCE_OS"
  "DESTINATION"
)
CMD_OPTS_selfMenu=("-h --help")
CMD_OPTS_NAME_selfMenu=("help")
CMD_OPTS_selfRelease=(
  "-t --github-release-token"
  "-b --bump-level"
  "--dry-run"
  "--upload-artifacts-only"
  "-h --help"
)
CMD_OPTS_HAS_VALUE_selfRelease=(
  "true"
  "true"
  "false"
  "false"
)
CMD_OPTS_NAME_selfRelease=(
  "githubReleaseToken"
  "bumpLevel"
  "dryRun"
  "uploadArtifactsOnly"
  "help"
)
CMD_OPTS_NAME_SC_selfRelease=(
  "GITHUB_RELEASE_TOKEN"
  "BUMP_LEVEL"
  "DRY_RUN"
  "UPLOAD_ARTIFACTS_ONLY"
)
CMD_OPTS_selfTest=(
  "-d --user-directory"
  "-a --auto-approve"
  "-c --with-core"
  "-i --include"
  "-e --exclude"
  "-h --help"
)
CMD_OPTS_HAS_VALUE_selfTest=(
  "true"
  "false"
  "false"
  "true"
  "true"
)
CMD_OPTS_NAME_selfTest=(
  "userDirectory"
  "autoApprove"
  "withCore"
  "include"
  "exclude"
  "help"
)
CMD_OPTS_NAME_SC_selfTest=(
  "USER_DIRECTORY"
  "AUTO_APPROVE"
  "WITH_CORE"
  "INCLUDE"
  "EXCLUDE"
)
CMD_OPTS_selfTestCore=(
  "-a --auto-approve"
  "-i --include"
  "-e --exclude"
  "--error"
  "--fail"
  "--exit"
  "--unknown-command"
  "--create-temp-files"
  "--create-temp-files"
  "--logging-level"
  "--wait-indefinitely"
  "--show-help"
  "-h --help"
)
CMD_OPTS_HAS_VALUE_selfTestCore=(
  "false"
  "true"
  "true"
  "false"
  "false"
  "false"
  "false"
  "false"
  "false"
  "false"
  "false"
  "false"
)
CMD_OPTS_NAME_selfTestCore=(
  "autoApprove"
  "include"
  "exclude"
  "error"
  "fail"
  "exit"
  "unknownCommand"
  "createTempFiles"
  "createTempFiles"
  "loggingLevel"
  "waitIndefinitely"
  "showHelp"
  "help"
)
CMD_OPTS_NAME_SC_selfTestCore=(
  "AUTO_APPROVE"
  "INCLUDE"
  "EXCLUDE"
  ""
  ""
  ""
  ""
  ""
  ""
  ""
  ""
  "SHOW_HELP"
)
CMD_OPTS_selfUpdate=("-h --help")
CMD_OPTS_NAME_selfUpdate=("help")
CMD_OPTS_selfWelcomeUser=("-h --help")
CMD_OPTS_NAME_selfWelcomeUser=("help")
CMD_OPTS_showCaseSudo=("-h --help")
CMD_OPTS_NAME_showCaseSudo=("help")
CMD_OPTS_showCommandHelp=(
  "-nc --no-colors"
  "-c --columns"
  "-h --help"
)
CMD_OPTS_HAS_VALUE_showCommandHelp=(
  "false"
  "true"
)
CMD_OPTS_NAME_showCommandHelp=(
  "noColors"
  "columns"
  "help"
)
CMD_OPTS_NAME_SC_showCommandHelp=(
  "NO_COLORS"
  "COLUMNS"
)
CMD_OPTS_showcaseCommand1=(
  "-o --option1"
  "-o2 -2 --this-is-option2"
  "-h --help"
)
CMD_OPTS_HAS_VALUE_showcaseCommand1=(
  "false"
  "true"
)
CMD_OPTS_NAME_showcaseCommand1=(
  "option1"
  "thisIsOption2"
  "help"
)
CMD_OPTS_NAME_SC_showcaseCommand1=(
  "OPTION1"
  "THIS_IS_OPTION2"
)
CMD_OPTS_showcaseMenu=("-h --help")
CMD_OPTS_NAME_showcaseMenu=("help")
CMD_OPTS_this=("-h --help")
CMD_OPTS_NAME_this=("help")


# Get the arguments of a given function xxx.
# CMD_ARGS_NAME_xxx = array with each argument names in camel case
# CMD_ARGS_LAST_IS_ARRAY_xxx = true/false to indicate if the last argument of the function is an array (ending with ...)
# CMD_ARGS_NB_OPTIONAL_xxx = integer to indicate the number of optional arguments (containing ?)
CMD_ARGS_NAME_selfMenu=(
  "commands"
)
CMD_ARGS_LAST_IS_ARRAY_selfMenu="true"
CMD_ARGS_NB_OPTIONAL_selfMenu=1
CMD_ARGS_NAME_showCommandHelp=(
  "commands"
)
CMD_ARGS_LAST_IS_ARRAY_showCommandHelp="true"
CMD_ARGS_NB_OPTIONAL_showCommandHelp=1
CMD_ARGS_NAME_showcaseCommand1=(
  "firstArg"
  "more"
)
CMD_ARGS_LAST_IS_ARRAY_showcaseCommand1="true"
CMD_ARGS_NB_OPTIONAL_showcaseCommand1=0
CMD_ARGS_NAME_showcaseMenu=(
  "commands"
)
CMD_ARGS_LAST_IS_ARRAY_showcaseMenu="true"
CMD_ARGS_NB_OPTIONAL_showcaseMenu=1
CMD_ARGS_NAME_this=(
  "commands"
)
CMD_ARGS_LAST_IS_ARRAY_this="true"
CMD_ARGS_NB_OPTIONAL_this=1


