
  function log::print() {
    local colorCode="${1}"
    local icon="${2}"
    local severity="${3}"
    shift 3
    local IFS=$'\n'
    RETURNED_VALUE="$*"
    IFS=" "

    
    local color
    case "${colorCode}" in
    DEBUG) color=$'\E[90m' ;;
    TRACE) color=$'\E[90m' ;;
    INFO) color=$'\E[36m' ;;
    WARNING) color=$'\E[33m' ;;
    SUCCESS) color=$'\E[32m' ;;
    ERROR) color=$'\E[31m' ;;
    *) color=$'\E[0m' ;;
    esac
    RETURNED_VALUE="${RETURNED_VALUE//⌜/$'\E[95m'⌜}"
    RETURNED_VALUE="${RETURNED_VALUE//⌝/⌝$'\E[0m'}"

    
    string::wrapWords RETURNED_VALUE 158 '                    ' 138

    
    local eraseLine
    if [[ ${_PROGRESS_BAR_RUNNING:-} == "true" ]]; then
      eraseLine=$'\e[2K'
    fi
    
    printf "${eraseLine:-}%s%(%H:%M:%S)T %s%-8s%-4s%s %s\n" $'\E[90m' "${EPOCHSECONDS}" "${color:-}" "${severity}" "${icon:-}" $'\E[0m' "${RETURNED_VALUE}" 1>&2
  }
  function log::printFile() {
    local filePath="${1}"
    local maxLines="${2:-0}"
    local wrapTextColumns=158
    local wrapPaddingCharacters="                    "
    local line toPrint
    local lineNumberPadding="   "
    local -i lineNumber=1 currentLineNumberLength=1
    if [[ ! -f "${filePath}" ]]; then
      log::error "Can not print the file ⌜${filePath}⌝ because does not exist."
      return 1
    fi
    local IFS=
    while IFS= read -r line || [[ -n ${line:-} ]]; do
      
        string::wrapCharacters line "${wrapTextColumns}" "${wrapPaddingCharacters}     [90m░[0m " "$((wrapTextColumns - 7 - ${#wrapPaddingCharacters}))"
        toPrint+="${wrapPaddingCharacters}${lineNumberPadding}[90m${lineNumber} ░[0m ${RETURNED_VALUE}"$'\n'
        lineNumber+=1
        if (( ${#lineNumber} > currentLineNumberLength )); then
          lineNumberPadding="${lineNumberPadding%?}"
          currentLineNumberLength+=1
        fi
        if (( maxLines != 0 && lineNumber > maxLines )); then
          toPrint+="${wrapPaddingCharacters}   [90m… ░ (truncated)[0m"$'\n'
          break;
        fi
  
    done <"${filePath}"
    
    local eraseLine
    if [[ ${_PROGRESS_BAR_RUNNING:-} == "true" ]]; then
      eraseLine=$'\e[2K'
    fi
    
    printf "${eraseLine:-}%s" "${toPrint:-}" 1>&2
  }
  function log::printFileString() {
    local content="${1}"
    local maxLines="${2:-0}"
    local wrapTextColumns=158
    local wrapPaddingCharacters="                    "
    local line toPrint
    local lineNumberPadding="   "
    local -i lineNumber=1 currentLineNumberLength=1
    local IFS=
    while IFS= read -r line; do
      
        string::wrapCharacters line "${wrapTextColumns}" "${wrapPaddingCharacters}     [90m░[0m " "$((wrapTextColumns - 7 - ${#wrapPaddingCharacters}))"
        toPrint+="${wrapPaddingCharacters}${lineNumberPadding}[90m${lineNumber} ░[0m ${RETURNED_VALUE}"$'\n'
        lineNumber+=1
        if (( ${#lineNumber} > currentLineNumberLength )); then
          lineNumberPadding="${lineNumberPadding%?}"
          currentLineNumberLength+=1
        fi
        if (( maxLines != 0 && lineNumber > maxLines )); then
          toPrint+="${wrapPaddingCharacters}   [90m… ░ (truncated)[0m"$'\n'
          break;
        fi
  
    done <<<"${content}"
    
    local eraseLine
    if [[ ${_PROGRESS_BAR_RUNNING:-} == "true" ]]; then
      eraseLine=$'\e[2K'
    fi
    
    printf "${eraseLine:-}%s" "${toPrint:-}" 1>&2
  }
  function log::printString() {
    local content="${1}"
    local wrappedLineLeftPaddingString="${2:-}"
    local wrapTextColumns=158
    local wrapPaddingCharacters="                    "
    local line toPrint
    local IFS=
    while IFS= read -r line; do
        string::wrapCharacters line "${wrapTextColumns}" "${wrapPaddingCharacters}${wrappedLineLeftPaddingString}" "$((wrapTextColumns - ${#wrapPaddingCharacters}))"
        toPrint+="${wrapPaddingCharacters}${RETURNED_VALUE}"$'\n'
    done <<<"${content}"
    
    local eraseLine
    if [[ ${_PROGRESS_BAR_RUNNING:-} == "true" ]]; then
      eraseLine=$'\e[2K'
    fi
    
    printf "${eraseLine:-}%s" "${toPrint:-}" 1>&2
  }
  function log::printRaw() {
    local toPrint="${1}"
    
    local eraseLine
    if [[ ${_PROGRESS_BAR_RUNNING:-} == "true" ]]; then
      eraseLine=$'\e[2K'
    fi
    
    printf "${eraseLine:-}%s" "${toPrint:-}" 1>&2
  }
