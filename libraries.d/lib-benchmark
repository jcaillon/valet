#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-array
source array
# shellcheck source=lib-string
source string
# shellcheck source=lib-progress
source progress
# shellcheck source=lib-time
source time


# ## benchmark::run
#
# This function runs a benchmark on given functions.
#
# First, it will run the 1st function (the baseline) for a given amount of time and
# mark the number of times it was able to run it.
#
# Then, it will run all the functions for the same number of time and
# print the difference between the baseline and the other functions.
#
# - $1: **baseline** _as string_:
#       the name of the function to use as baseline
# - $@: functions _as string_:
#       The names of the functions to benchmark, comma separated.
# - ${_OPTION_TIME} _as int_:
#       (optional) The time in seconds for which to run the baseline.
#       (defaults to 3s)
# - ${_OPTION_MAX_RUNS} _as int_:
#       (optional) The maximum number of runs to do for each function.
#       (defaults to -1 which means no limit)
#
# ```bash
# benchmark::run baseline function1 function2
# _OPTION_TIME=10 benchmark::run baseline function1 function2
# ```
function benchmark::run() {
  local baseline="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  shift
  local time="${_OPTION_TIME:-3}"
  local maxRuns="${_OPTION_MAX_RUNS:--1}"

  # check functions
  if ! declare -F "${baseline}" >/dev/null; then
    core::fail "The baseline function ⌜${baseline}⌝ does not exist."
  fi
  local function
  local longestFunctionNameLength=13

  if (( $# > 0 )); then
    for function in "$@"; do
      if ! declare -F "${function}" >/dev/null; then
        core::fail "The function ⌜${function}⌝ does not exist."
      fi
      if (( ${#function} > longestFunctionNameLength )); then
        longestFunctionNameLength=${#function}
      fi
    done
  fi

  local -i baselineRuns
  local -A functionsElapsed

  # Run the baseline
  progress::start "<spinner> Running the baseline ⌜${baseline}⌝ for ⌜${time}s⌝."

  time::getProgramElapsedMicroseconds
  local startTimeInUs="${REPLY}"

  local -i baselineRuns
  # shellcheck disable=SC2323
  # ^(this is to avoid a bug in the syntax coloration)
  for ((baselineRuns = 1; (baselineRuns <= maxRuns || maxRuns == -1); baselineRuns++)); do
    "${baseline}"
    time::getProgramElapsedMicroseconds
    if (( REPLY - startTimeInUs > time * 1000000 )); then
      break
    fi
  done

  progress::stop

  time::getProgramElapsedMicroseconds
  local elapsedTimeInUs=$((REPLY - startTimeInUs))
  time::convertMicrosecondsToHuman "${elapsedTimeInUs}" '%S.%LL'
  log::info "The baseline ⌜${baseline}⌝ was initially run ⌜${baselineRuns}⌝ times in ⌜${REPLY}s⌝."

  # Run the other functions
  if (( $# > 0 )); then
    for function in "${@}"; do
      progress::start "<spinner> Running the function ⌜${function}⌝ ⌜${baselineRuns}⌝ times."

      time::getProgramElapsedMicroseconds
      startTimeInUs="${REPLY}"
      local -i runs
      for ((runs = 0; runs < baselineRuns; runs++)); do
        "${function}"
      done

      time::getProgramElapsedMicroseconds
      local elapsedTimeInUs=$((REPLY - startTimeInUs))
      functionsElapsed["${function}"]="${elapsedTimeInUs}"
      time::convertMicrosecondsToHuman "${elapsedTimeInUs}" %S.%LL
      log::info "The function ⌜${function}⌝ was run ⌜${runs}⌝ times in ⌜${REPLY}s⌝."

      progress::stop
    done
  fi

  # Re run the baseline to get the average time
  progress::start "<spinner> Running the baseline ⌜${baseline}⌝ ⌜${baselineRuns}⌝ times."

  time::getProgramElapsedMicroseconds
  startTimeInUs="${REPLY}"
  local -i runs
  for ((runs = 0; runs < baselineRuns; runs++)); do
    "${baseline}"
  done
  time::getProgramElapsedMicroseconds
  local elapsedTimeInUs=$((REPLY - startTimeInUs))
  functionsElapsed["${baseline}"]="${elapsedTimeInUs}"
  time::convertMicrosecondsToHuman "${elapsedTimeInUs}" %S.%LL
  log::info "The function ⌜${baseline}⌝ was run ⌜${runs}⌝ times in ⌜${REPLY}s⌝."

  progress::stop


  # sort the functions by elapsed time
  _BENCHMARK_FUNCTIONS=("${!functionsElapsed[@]}")
  _BENCHMARK_ELAPSED_TIMES=("${functionsElapsed[@]}")
  array::sortWithCriteria _BENCHMARK_FUNCTIONS _BENCHMARK_ELAPSED_TIMES

  # print the results
  local line
  printf -v line "%-${longestFunctionNameLength}s ░ %-13s ░ %s\n" "Function name" "Average time" "Compared to fastest"
  local result="Benchmark results from fastest to slowest for ${baselineRuns} runs:"$'\n'$'\n'"${line}"
  printf -v line "%-$((longestFunctionNameLength + 39))s" " "
  result+="${line// /░}"$'\n'
  local fastestElapsed="${functionsElapsed["${_BENCHMARK_FUNCTIONS[0]}"]}"
  local -i index=0
  for function in "${_BENCHMARK_FUNCTIONS[@]}"; do
    local averageTime="$((functionsElapsed[${function}] / baselineRuns))"
    local percentSlowerThanFastest="+$(( (functionsElapsed[${function}] - fastestElapsed) * 100 / fastestElapsed ))%"
    time::convertMicrosecondsToHuman "${averageTime}" "%S.%LLs %UUµs"
    if (( index == 0 )); then
      percentSlowerThanFastest="N/A"
    fi
    printf -v line "%-${longestFunctionNameLength}s ░ %s ░ %s\n" "${function}" "${REPLY}" "${percentSlowerThanFastest}"
    result+="${line}"
    index+=1
  done

  unset -v _BENCHMARK_FUNCTIONS _BENCHMARK_ELAPSED_TIMES

  log::success "${result}"
}