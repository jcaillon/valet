#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-exe
source exe
# shellcheck source=lib-bash
source bash
# shellcheck source=lib-fs
source fs

# ## windows::runPs1
#
# Runs a PowerShell command.
# This is mostly useful on Windows.
#
# - $1: **command** _as string_:
#       the command to run.
# - ${runAsAdmin} _as bool_:
#       (optional) Wether to run the command as administrator.
#       (defaults to false).
# - ${noFail} _as bool_:
#       (optional) A boolean to indicate if the function should call core::fail (exit) in case the execution fails.
#       If true and the execution fails, the script will exit.
#       (defaults to false)
#
# Returns:
#
# - ${REPLY_CODE}:
#   - 0 if the command was successful
#   - 1 otherwise.
# - ${REPLY}: The content of stdout.
# - ${REPLY2}: The content of stderr.
#
# ```bash
# windows::runPs1 "Write-Host \"Press any key:\"; Write-Host -Object ('The key that was pressed was: {0}' -f [System.Console]::ReadKey().Key.ToString());"
# windows::runPs1 "Write-Host \"Hello\"" runAsAdmin=true noFail=true
# ```
function windows::runPs1() {
  local \
    command="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" \
    runAsAdmin=false \
    noFail=false \
    IFS=$' '
  shift 1
  eval "local a= ${*@Q}"

  local exitCode=0

  # try to find powershell in the path; otherwise take it in the system32 directory; or try to use pwsh
  local powershellPath="powershell.exe"
  local powershellCommand="powershell"
  if ! command -v "${powershellCommand}" &>/dev/null; then
    powershellPath="${SYSTEMROOT:-C:\\Windows}\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    windows::getUnixPathFromWindowsPath "${powershellPath}"
    powershellCommand="${REPLY}"
    if [[ ! -f "${powershellCommand}" ]]; then
      fs::getCommandPath "pwsh"
      if [[ -n ${REPLY} ]]; then
        powershellCommand="${REPLY}"
        if [[ ! -f "${powershellCommand}.exe" ]]; then
          core::fail "The PowerShell command is not available."
        fi
        windows::getWindowsPathFromUnixPath "${powershellCommand}.exe"
        powershellPath="${REPLY}"
      else
        core::fail "The PowerShell command is not available."
      fi
    fi
  fi

  command="${command//\$/\`\$}"

  # there seem to be no simple way to capture the output of several commands...
  # we run the commands in a subprocess for which we capture the outputs
  windows::createTempFile
  local stdoutFileWindows="${REPLY}"
  local stdoutFile="${REPLY2}"
  windows::createTempFile
  local stderrFileWindows="${REPLY}"
  local stderrFile="${REPLY2}"

  # shellcheck disable=SC2016
  local script='
  $ErrorActionPreference = '"'Stop'"';
  $processInfo = New-Object System.Diagnostics.ProcessStartInfo;
  $processInfo.FileName = "'"${powershellPath}"'";
  $processInfo.Verb = "runas";
  $processInfo.RedirectStandardError = $true;
  $processInfo.RedirectStandardOutput = $true;
  $processInfo.UseShellExecute = $false;
  $processInfo.CreateNoWindow = $true;
  $processInfo.Arguments = @("-NoProfile","-NonInteractive","-Command","`$ErrorActionPreference = '"'Stop'"'; '"${command//\"/\`\"}"'; exit `$LASTEXITCODE;")
  $p = New-Object System.Diagnostics.Process;
  $p.StartInfo = $processInfo;
  $p.Start() | Out-Null;
  $stdout = $p.StandardOutput.ReadToEnd();
  $stderr = $p.StandardError.ReadToEnd();
  $p.WaitForExit();
  $stdout | Out-File -FilePath '"'${stdoutFileWindows}'"' -Encoding utf8;
  $stderr | Out-File -FilePath '"'${stderrFileWindows}'"' -Encoding utf8;
  exit $p.ExitCode;
  '

  if [[ "${runAsAdmin}" == true ]]; then
    # if we need to run as admin, we need to create a script that will run the commands
    # and we run this script as an admin
    windows::createTempDirectory
    local scriptFileWindows="${REPLY}\\valet-run-ps1-as-admin.ps1"
    local scriptFileLinux="${REPLY2}/valet-run-ps1-as-admin.ps1"
    fs::writeToFile "${scriptFileLinux}" script
    # shellcheck disable=SC2016
    script='
    $ErrorActionPreference = '"'Stop'"';
    $process = Start-Process -FilePath "'"${powershellPath}"'" -ArgumentList @("-NoProfile","-NonInteractive","-File","'"${scriptFileWindows}"'") -Wait -Verb RunAs -WindowStyle Hidden;
    exit $process.ExitCode
    '
  fi
  if log::isDebugEnabled; then
    log::debug "PowerShell command ⌜${powershellCommand}⌝, path ⌜${powershellPath}⌝."
    log::debug "PowerShell script run:"
    core::createSavedFilePath suffix="script.ps1"
    printf "%s" "${script}" >"${REPLY}"
    log::printString "⌜${REPLY}⌝"
  fi
  "${powershellCommand}" -NoProfile -NonInteractive -Command "${script}" || exitCode=1

  if log::isDebugEnabled; then
    if [[ -s "${stdoutFile}" ]]; then
      log::debug "PowerShell stdout:"
      log::saveFile "${stdoutFile}" suffix="ps1.stdout"
    else
      log::debug "PowerShell stdout: (empty)"
    fi
    if [[ -s "${stderrFile}" ]]; then
      log::debug "PowerShell stderr:"
      log::saveFile "${stderrFile}" suffix="ps1.stderr"
    else
      log::debug "PowerShell stderr: (empty)"
    fi
  fi

  fs::readFile "${stdoutFile}"
  local stdout="${REPLY//$'\r'/}"
  stdout="${stdout%[[:space:]]}"
  fs::readFile "${stderrFile}"
  local stderr="${REPLY//$'\r'/}"
  stderr="${stderr//$'\r'/}"

  if [[ ${exitCode} -ne 0 && ${#stderr} -gt 0 ]]; then
    log::error "PowerShell command failed with the following error:"
    log::errorTrace "${stderr}"
  fi
  if [[ ${exitCode} -ne 0 && ${noFail} != "true" ]]; then
    core::fail "PowerShell command failed with exit code ${exitCode}."
  fi

  REPLY2="${stderr}"
  REPLY="${stdout}"
  REPLY_CODE="${exitCode}"
  return 0
}

# ## windows::startPs1Batch
#
# After running this function, all commands that should be executed by
# `windows::runPs1` will be added to a batch that will only be played
# when `windows::endPs1Batch` is called.
#
# This is a convenient way to run multiple commands in a single PowerShell session.
# It makes up for the fact that running a new PowerShell session for each command is slow.
#
# ```bash
# windows::startPs1Batch
# windows::runPs1 "Write-Host \"Hello\""
# windows::runPs1 "Write-Host \"World\""
# windows::endPs1Batch
# ```
function windows::startPs1Batch() {
  _WINDOWS_POWERSHELL_BATCHED_COMMANDS=""
  _WINDOWS_POWERSHELL_BATCHED_AS_ADMIN=false
  _WINDOWS_POWERSHELL_BATCHED_NO_FAIL=false

  # save the original function before overriding it
  bash::getBuiltinOutput declare -f windows::runPs1
  _WINDOWS_POWERSHELL_FUNCTION="${REPLY//declare -? /}"

  # shellcheck disable=SC2317
  function windows::runPs1() {
    _WINDOWS_POWERSHELL_BATCHED_COMMANDS+="${1};"
    local \
      runAsAdmin=false \
      noFail=false \
      IFS=$' '
    shift 1
    eval "local a= ${*@Q}"

    if [[ "${runAsAdmin}" == true ]]; then
      _WINDOWS_POWERSHELL_BATCHED_AS_ADMIN=true
    fi
    if [[ "${noFail}" == true ]]; then
      _WINDOWS_POWERSHELL_BATCHED_NO_FAIL=true
    fi
  }
}

# ## windows::endPs1Batch
#
# This function will run all the commands that were batched with `windows::startPs1Batch`.
#
# Returns:
#
# - ${REPLY_CODE}:
#   - 0 if the command was successful
#   - 1 otherwise.
# - ${REPLY}: The content of stdout.
# - ${REPLY2}: The content of stderr.
#
# ```bash
# windows::startPs1Batch
# windows::runPs1 "Write-Host \"Hello\""
# windows::runPs1 "Write-Host \"World\""
# windows::endPs1Batch
# ```
function windows::endPs1Batch() {
  if [[ -z ${_WINDOWS_POWERSHELL_BATCHED_COMMANDS} ]]; then
    # shellcheck disable=SC2034
    REPLY_CODE=0
    REPLY=""
    REPLY2=""
    return 0
  fi
  # restore the original function
  eval "${_WINDOWS_POWERSHELL_FUNCTION}"

  windows::runPs1 "${_WINDOWS_POWERSHELL_BATCHED_COMMANDS}" \
    runAsAdmin="${_WINDOWS_POWERSHELL_BATCHED_AS_ADMIN}" \
    noFail="${_WINDOWS_POWERSHELL_BATCHED_NO_FAIL}"

  unset -v _WINDOWS_POWERSHELL_BATCHED_COMMANDS \
    _WINDOWS_POWERSHELL_BATCHED_AS_ADMIN \
    _WINDOWS_POWERSHELL_FUNCTION \
    _WINDOWS_POWERSHELL_BATCHED_NO_FAIL

  return 0
}

# ## windows::createLink
#
# Create a soft or hard link (original ← link).
#
# Reminder:
#
# - A soft (symbolic) link is a new file that contains a reference to another file or directory in the
#   form of an absolute or relative path.
# - A hard link is a directory entry that associates a new pathname with an existing
#   file (inode + data block) on a file system.
#
# - $1: **linked path** _as string_:
#       the path to link to (the original file)
# - $2: **link path** _as string_:
#       the path where to create the link
# - ${hardlink} _as boolean_:
#       (optional) True to create a hard link, false to create a symbolic link
#       (defaults to false)
# - ${force} _as boolean_:
#       (optional) True to overwrite the link or file if it already exists.
#       Otherwise, the function will fail on an existing link.
#       (defaults to false)
#
# ```bash
# windows::createLink "/path/to/link" "/path/to/linked"
# windows::createLink "/path/to/link" "/path/to/linked" hardlink=true force=true
# ```
#
# > On Windows, the function uses `powershell` (and optionally ls to check the existing link).
# > If you have the windows "developer mode" enabled + MSYS=winsymlinks:nativestrict,
# > then it uses the ln command.
function windows::createLink() {
  if [[ ${MSYS:-} == "winsymlinks:nativestrict" ]]; then
    fs::createLink "$@"
    return 0
  fi
  local \
    linkedPath="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" \
    linkPath="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" \
    hardlink="false" \
    force="false" \
    IFS=$' '
  shift 2
  eval "local a= ${*@Q}"

  # shellcheck disable=SC2034
  local REPLY_CODE REPLY REPLY2

  fs::getAbsolutePath "${linkedPath}"
  linkedPath="${REPLY}"
  fs::getAbsolutePath "${linkPath}"
  linkPath="${REPLY}"

  # check if the linked path exists
  if [[ ! -e "${linkedPath}" ]]; then
    core::fail "Failed to create a link ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝, the linked path does not exist."
  fi

  # check the link path
  if [[ -f ${linkPath} || -L ${linkPath} ]]; then
    # on windows, creating a link is costly so don't do it if it's already good
    if command -v ls &>/dev/null; then
      exe::invoke ls -l "${linkPath}"
      if [[ ${REPLY%%$'\n'*} == *"${linkedPath}" ]]; then
        log::debug "The link ⌜${linkPath}⌝ already exists and points to ⌜${linkedPath}⌝."
        return 0
      fi
    fi

    # if force, delete the link (or file) if it exists
    if [[ ${force} == true ]]; then
      if ! rm -f "${linkPath}"; then
        core::fail "Failed to delete the existing link ⌜${linkPath}⌝ to replace it."
      fi
    else
      core::fail "Failed to create a link to ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝, the link pathname already exists."
    fi
  fi

  # create link parent directory if needed
  local linkParentPath="${linkPath%/*}"
  local linkFileName="${linkPath##*/}"
  fs::createDirectoryIfNeeded "${linkParentPath}"

  # create link
  windows::getWindowsPathFromUnixPath "${linkPath}"
  linkPath="${REPLY}"
  windows::getWindowsPathFromUnixPath "${linkParentPath}"
  linkParentPath="${REPLY}"
  windows::getWindowsPathFromUnixPath "${linkedPath}"
  linkedPath="${REPLY}"

  log::debug "Creating a new link ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝ using powershell."
  if [[ ${hardlink} == "true" ]]; then
    if ! windows::runPs1 "New-Item -ItemType HardLink -Path \"${linkParentPath}\" -Name \"${linkFileName}\" -Value \"${linkedPath}\" | Out-Null" runAsAdmin=true; then
      core::fail "Failed to create the hard link ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝."
    fi
  else
    if ! windows::runPs1 "New-Item -ItemType SymbolicLink -Path \"${linkParentPath}\" -Name \"${linkFileName}\" -Value \"${linkedPath}\" | Out-Null" runAsAdmin=true; then
      core::fail "Failed to create the symbolic link ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝."
    fi
  fi

  local linkType="symbolic"
  if [[ ${hardlink} == "true" ]]; then
    linkType="hard"
  fi
  log::debug "Created ${linkType} link: ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝."
}

# ## windows::getWindowsPathFromUnixPath
#
# Convert a unix path to a Windows path.
#
# - $1: **path** _as string_:
#       the path to convert
#
# Returns:
#
# - ${REPLY}: The Windows path.
#
# ```bash
# windows::getWindowsPathFromUnixPath "/path/to/file"
# ```
#
# > Handles paths starting with `/mnt/x/` or `/x/` in pure bash,
# > handles other msys2 paths using `cygpath`.
function windows::getWindowsPathFromUnixPath() {
  local path="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  if [[ ${path} =~ ^([a-zA-Z])":" ]]; then
    REPLY="${path}"
    return 0
  fi
  if [[ ${path} != "/"* ]]; then
    fs::getAbsolutePath "${path}"
    path="${REPLY}"
  fi
  if [[ ${path} =~ ^"/mnt/"([a-z])"/" || ${path} =~ ^"/"([a-z])"/" ]]; then
    path="${BASH_REMATCH[1]}:/${path/"${BASH_REMATCH[0]}"/}"
    path="${path^?}"
  elif command -v cygpath &>/dev/null; then
    # shellcheck disable=SC2034
    local REPLY_CODE REPLY2
    exe::invoke cygpath -w "${path}"
    REPLY="${REPLY%%$'\n'*}"
    return 0
  fi
  REPLY="${path//\//\\}"
}

# ## windows::getUnixPathFromWindowsPath
#
# Convert a Windows path to a unix path.
#
# - $1: **path** _as string_:
#       the path to convert
#
# Returns:
#
# - ${REPLY}: The unix path.
#
# ```bash
# windows::getUnixPathFromWindowsPath "C:\path\to\file"
# ```
#
# > Handles paths starting with `X:\`.
function windows::getUnixPathFromWindowsPath() {
  local path="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  if [[ ${path} == "/"* ]]; then
    REPLY="${path}"
    return 0
  fi
  if [[ ${path} =~ ^([a-zA-Z])":" ]]; then
    if [[ -d "/mnt/${BASH_REMATCH[1],}" ]]; then
      path="/mnt/${BASH_REMATCH[1],}${path:2}"
    else
      path="/${BASH_REMATCH[1],}${path:2}"
    fi
  fi
  REPLY="${path//\\//}"
}

# ## windows::createTempFile
#
# Create a temporary file on Windows and return the path both for Windows and Unix.
#
# This is useful for creating temporary files that can be used in both Windows and Unix.
#
# Returns:
#
# - ${REPLY}: The Windows path.
# - ${REPLY2}: The Unix path.
#
# ```bash
# windows::createTempFile
# ```
#
# > Files created this way are automatically cleaned up by the fs::cleanTempFiles
# > function when valet ends.
function windows::createTempFile() {
  local windowsTemporaryDirectory="${LOCALAPPDATA:-"C:\\Users\\${USERNAME}\\AppData\\Local"}\\Temp\\${GLOBAL_TEMPORARY_DIRECTORY##*/}-windows"

  if [[ -z ${GLOBAL_WINDOWS_TEMPORARY_DIRECTORY:-} ]]; then
    windows::getUnixPathFromWindowsPath "${windowsTemporaryDirectory}"
    GLOBAL_WINDOWS_TEMPORARY_DIRECTORY="${REPLY}"
  fi

  local windowsPath linuxPath
  TEMPORARY_FILE_NUMBER=${TEMPORARY_FILE_NUMBER:-0}
  while true; do
    TEMPORARY_FILE_NUMBER=$((TEMPORARY_FILE_NUMBER + 1))
    windowsPath="${windowsTemporaryDirectory}\\f${TEMPORARY_FILE_NUMBER}-${BASH_SUBSHELL}"
    windows::getUnixPathFromWindowsPath "${windowsPath}"
    linuxPath="${REPLY}"
    if [[ ! -f "${linuxPath}" ]]; then
      fs::createFileIfNeeded "${linuxPath}"

      REPLY="${windowsPath}"
      REPLY2="${linuxPath}"
      return 0
    fi
  done
}

# ## windows::createTempDirectory
#
# Create a temporary directory on Windows and return the path both for Windows and Unix.
#
# This is useful for creating temporary directories that can be used in both Windows and Unix.
#
# Returns:
#
# - ${REPLY}: The Windows path.
# - ${REPLY2}: The Unix path.
#
# ```bash
# windows::createTempDirectory
# ```
#
# > Directories created this way are automatically cleaned up by the fs::cleanTempFiles
# > function when valet ends.
function windows::createTempDirectory() {
  local windowsTemporaryDirectory="${LOCALAPPDATA:-"C:\\Users\\${USERNAME}\\AppData\\Local"}\\Temp\\${GLOBAL_TEMPORARY_DIRECTORY##*/}-windows"

  if [[ -z ${GLOBAL_WINDOWS_TEMPORARY_DIRECTORY:-} ]]; then
    windows::getUnixPathFromWindowsPath "${windowsTemporaryDirectory}"
    GLOBAL_WINDOWS_TEMPORARY_DIRECTORY="${REPLY}"
  fi

  local windowsPath linuxPath
  TEMPORARY_DIRECTORY_NUMBER=${TEMPORARY_DIRECTORY_NUMBER:-0}
  while true; do
    TEMPORARY_DIRECTORY_NUMBER=$((TEMPORARY_DIRECTORY_NUMBER + 1))
    windowsPath="${windowsTemporaryDirectory}\\d${TEMPORARY_DIRECTORY_NUMBER}-${BASH_SUBSHELL}"
    windows::getUnixPathFromWindowsPath "${windowsPath}"
    linuxPath="${REPLY}"
    if [[ ! -d "${linuxPath}" ]]; then
      fs::createDirectoryIfNeeded "${linuxPath}"

      REPLY="${windowsPath}"
      REPLY2="${linuxPath}"
      return 0
    fi
  done
}



# ## windows::setEnvVar
#
# Set an environment variable for the current user on Windows.
#
# - $1: **variable name** _as string_:
#       The name of the environment variable to set.
# - $2: **variable value** _as string_:
#       The value of the environment variable to set.
#       An empty string will unset the variable.
#
# ```bash
# windows::setEnvVar "MY_VAR" "my_value"
# ```
#
# > This function is only available on Windows, it uses `powershell` to directly modify the registry.
function windows::setEnvVar() {
  local varName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local varValue="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  if [[ -z ${varName} ]]; then
    core::fail "The variable name is missing."
  fi

  if [[ -n ${varValue} ]]; then
    if ! windows::runPs1 "\$key = [Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', \$true); \$key.SetValue('${varName//\'/\'\'}', '${varValue//\'/\'\'}', 'ExpandString');"; then
      core::fail "Failed to set the environment variable ⌜${varName}⌝."
    fi
  else
    if ! windows::runPs1 "\$key = [Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', \$true); \$key.DeleteValue('${varName//\'/\'\'}');"; then
      core::fail "Failed to unset the environment variable ⌜${varName}⌝ using null string."
    fi
  fi
}

# ## windows::getEnvVar
#
# Get the value of an environment variable for the current user on Windows.
#
# - $1: **variable name** _as string_:
#       the name of the environment variable to get.
#
# Returns:
#
# - ${REPLY}: the value of the environment variable.
#
# ```bash
# windows::getEnvVar "MY_VAR"
# echo "${REPLY}"
# ```
function windows::getEnvVar() {
  local varName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  if [[ -z ${varName} ]]; then
    core::fail "The variable name is missing."
  fi

  local script="
  \$key = [Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', \$true);
  \$value = \$key.GetValue('${varName//\'/\'\'}', '', 'DoNotExpandEnvironmentNames');
  \$key.Dispose();
  Write-Output \$value;
  "

  if ! windows::runPs1 "${script}"; then
    core::fail "Failed to get the environment variable ⌜${varName}⌝."
  fi
}

# ## windows::addToPath
#
# Add the given path to the PATH environment variable on Windows (current user only).
#
# Will also export the PATH variable in the current bash.
#
# - $1: **path** _as string_:
#       the path to add to the PATH environment variable.
#       The path can be in unix format, it will be converted to windows format.
# - ${prepend} _as bool_:
#       (optional) True to prepend the path to the PATH, false to append it.
#       (defaults to false)
#
# ```bash
# windows::addToPath "/path/to/bin"
# windows::addToPath "/path/to/bin" prepend=true
# ```
#
# > This function is only available on Windows, it uses `powershell` to directly modify the registry.
function windows::addToPath() {
  local \
    pathToAdd="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" \
    prepend="false" \
    IFS=$' '
  shift 1
  eval "local a= ${*@Q}"

  log::debug "Adding directory ⌜${pathToAdd}⌝ to the PATH."

  if [[ -z ${pathToAdd} ]]; then
    core::fail "The path to add to the PATH is missing."
  fi

  windows::getWindowsPathFromUnixPath "${pathToAdd}"
  pathToAdd="${REPLY}"

  if [[ ${prepend} == "true" ]]; then
    local setNewPathStatement="\$newPath = '{0}{1}{2}' -f \$pathToAdd, [IO.Path]::PathSeparator, \$oldPath;"
  else
    local setNewPathStatement="\$newPath = '{0}{1}{2}' -f \$oldPath, [IO.Path]::PathSeparator, \$pathToAdd;"
  fi

  local script="
  \$pathToAdd = '${pathToAdd//\'/\'\'}';
  \$key = [Microsoft.Win32.Registry]::CurrentUser.OpenSubKey('Environment', \$true);
  \$oldPath = \$key.GetValue('Path', '', 'DoNotExpandEnvironmentNames').TrimEnd([IO.Path]::PathSeparator);
  if (! \$oldPath.Contains(\$pathToAdd)) {
      ${setNewPathStatement}
      \$key.SetValue('Path', \$newPath, 'ExpandString');
  };
  \$key.Dispose();
  "

  if ! windows::runPs1 "${script}"; then
    core::fail "Failed to add the directory ⌜${pathToAdd}⌝ to the PATH."
  fi
}