#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=../libraries.d/lib-exe
source exe

# ## bash::countJobs
#
# This function counts the number of jobs currently running in the background.
#
# Returns:
#
# - ${RETURNED_VALUE}: the number of jobs currently running in the background.
#
# ```bash
# bash::countJobs
# echo "There are currently ${RETURNED_VALUE} jobs running in the background."
# ```
function bash::countJobs() {
  local -i jobsCount=0
  exe::captureOutput jobs -r
  local IFS=$'\n' line
  for line in ${RETURNED_VALUE}; do
    if [[ ${line} == "["* ]]; then
      jobsCount+=1
    fi
  done
  RETURNED_VALUE="${jobsCount}"
}

# ## bash::runInParallel
#
# This function runs a list of commands in parallel with a maximum number of parallel jobs.
#
# - $1: **job names array name** _as string_:
#       The name of the array containing the names of the jobs to run.
# - $2: **job commands array name** _as string_:
#       The name of the array containing the commands to run.
# - $3: max parallel jobs _as integer_:
#       (optional) Can be set using the variable `_OPTION_MAX_PARALLEL_JOBS`.
#       The maximum number of parallel jobs to run.
#       (defaults to 4)
# - $4: job completed callback _as string_:
#       (optional) Can be set using the variable `_OPTION_JOB_COMPLETED_CALLBACK`.
#       The name of the function to call when a job is completed.
#       The function will receive the following arguments:
#       - the job index
#       - the job name
#       - the job exit code
#       - the percentage of jobs completed
#       If the function returns 1, the script will exit early.
#       (defaults to "")
# - ${_OPTION_TIMEOUT_BETWEEN_CHECKS} _as float_:
#       (optional) Can be set using the variable `_OPTION_TIMEOUT_BETWEEN_CHECKS`.
#       The time to wait between checks for completed jobs (when no jobs finished
#       when we last checked).
#       (defaults to 0.2)
#
# Returns:
#
# - $?:
#   - 0: if all the jobs completed successfully.
#   - 1: if the job completed callback returned 1.
# - ${RETURNED_ARRAY[@]}: an array containing the exit codes of the jobs.
#
# ```bash
# declare -a jobNames=("job1" "job2" "job3")
# declare -a jobCommands=("sleep 1" "sleep 2" "sleep 3")
# _OPTION_MAX_PARALLEL_JOBS=2 bash::runInParallel jobNames jobCommands
# ```
function bash::runInParallel() {
  local -n jobNames="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -n jobCommands="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -i maxParallelJobs="${3:-${_OPTION_MAX_PARALLEL_JOBS:-4}}"
  local jobCompletedCallback="${4:-${_OPTION_JOB_COMPLETED_CALLBACK:-}}"
  local timeoutBetweenChecks="${_OPTION_TIMEOUT_BETWEEN_CHECKS:-0.2}"

  # inject the code to kill the running jobs when the program exits
  bash::injectCodeInFunction cleanUp 'bash::killRunningJobs' true
  eval "${RETURNED_VALUE}"
  local originalFunction="${RETURNED_VALUE2}"

  local IFS=' '$'\t'$'\n' runningsJobs jobName
  local -A -i jobIndexFromPid=()
  declare -g -a -i _BASH_RUNNING_JOB_PIDS=()
  local -a -i exitCodes=()
  local -i index=0 jobIndex exitCode nbJobsCompleted=0 pid

  for ((index = 0; index < ${#jobNames[@]}; index++)); do
    eval "{
      : ID=${index};

      # set the sell for this job
      core::setShellOptions
      trap::unregister;
      TMPDIR=\"${GLOBAL_TEMPORARY_DIRECTORY}/job-\${BASHPID}\"
      unset -v VALET_CONFIG_RUNTIME_DIRECTORY VALET_CONFIG_TEMP_DIRECTORY XDG_RUNTIME_DIR
      fs::setupTempFileGlobalVariable

      ${jobCommands[index]};
    } &"
    _BASH_RUNNING_JOB_PIDS+=("${!}")
    jobIndexFromPid["${!}"]="${index}"
    # we could get the job number using 'jobs %%' but since it displays the command, we will
    # check for ID=x in the jobs output

    log::debug "Running job (${index}) ⌜${jobNames[index]}⌝ with PID ${!}."

    while ((${#_BASH_RUNNING_JOB_PIDS[@]} >= maxParallelJobs || (index + 1 == ${#jobNames[@]}))); do
      # wait for one of the test suites to finish (or all of them for the last batch)
      nbJobsCompleted=0
      exe::captureOutput jobs -r
      runningsJobs="${RETURNED_VALUE}"
      if log::isTraceEnabled; then
        log::trace "Running jobs: ${runningsJobs}"
      fi

      for pid in "${_BASH_RUNNING_JOB_PIDS[@]}"; do
        jobIndex="${jobIndexFromPid[${pid}]}"
        jobName="${jobNames[jobIndex]}"

        if [[ ${runningsJobs} != *": ID=${jobIndex};"* ]]; then
          exitCode=0
          wait -f "${pid}" || exitCode=$?
          exitCodes+=("${exitCode}")
          log::trace "Job (${jobIndex}) ⌜${jobName}⌝ with pid ⌜${pid}⌝ completed with exit code ⌜${exitCode}⌝."":${jobCommands[${jobIndex}]}"

          # remove the pid from the running pids
          # shellcheck disable=SC2206
          IFS=','
          local pidList=",${_BASH_RUNNING_JOB_PIDS[*]},"
          pidList=${pidList//",${pid},"/,}
          pidList=${pidList/#,/}
          pidList=${pidList/%,/}
          # shellcheck disable=SC2206
          _BASH_RUNNING_JOB_PIDS=(${pidList})
          IFS=' '$'\t'$'\n'

          if [[ -n ${jobCompletedCallback} ]]; then
            if ! ${jobCompletedCallback} "${jobIndex}" "${jobName}" "${exitCode}" "$((${#exitCodes[@]} * 100 / ${#jobNames[@]}))"; then
              log::trace "Exiting early."
              bash::killRunningJobs
              break 3
            fi
          fi
          nbJobsCompleted+=1
        else
          log::trace "Job ⌜${jobName}⌝ with pid ⌜${pid}⌝ is still running."
        fi
      done

      if ((nbJobsCompleted == 0)); then
        bash::sleep "${timeoutBetweenChecks}"
      fi

      if ((${#exitCodes[@]} == ${#jobNames[@]})); then
        break
      fi
    done
  done

  # restore the original function
  if [[ -n ${originalFunction} ]]; then
    eval "${originalFunction}"
  fi

  RETURNED_ARRAY=("${exitCodes[@]}")
  ((${#exitCodes[@]} != ${#jobNames[@]})) && return 1
  return 0
}

# ## bash::killRunningJobs (private)
#
# This function kills all the jobs currently running in the background from bash::runInParallel.
# Called automatically when Valet exits.
#
# ```bash
# bash::killRunningJobs
# ```
function bash::killRunningJobs() {
  # kill all the test suites
  if [[ -n ${_BASH_RUNNING_JOB_PIDS[0]:-} ]]; then
    log::debug "Killing all running jobs."
    for pid in "${_BASH_RUNNING_JOB_PIDS[@]}"; do
      kill "${pid}" &>/dev/null || :
    done
  fi
}

# ## bash::injectCodeInFunction
#
# This function injects code at the beginning or the end of a function and
# returns the modified function to be evaluated.
#
# - $1: **function name** _as string_:
#       The name of the function to inject the code into.
# - $2: **code** _as string_:
#       The code to inject.
# - $3: inject at beginning _as bool_:
#       (optional) Can be set using the variable `_OPTION_INJECT_AT_BEGINNING`.
#       Whether to inject the code at the beginning of the function (or at the end).
#       (defaults to false)
#
# Returns:
#
# - ${RETURNED_VALUE}: the modified function.
# - ${RETURNED_VALUE2}: the original function.
#
# ```bash
# bash::injectCodeInFunction myFunction "echo 'Hello world!'" true
# eval "${RETURNED_VALUE}"
# myFunction
# ```
function bash::injectCodeInFunction() {
  local functionName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local code="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local injectAtBeginning="${3:-${_OPTION_INJECT_AT_BEGINNING:-false}}"

  local functionDefinition modifiedFunctionDefinition
  if declare -f "${functionName}" 1>"${GLOBAL_TEMPORARY_STDOUT_FILE}"; then
    IFS='' read -rd '' functionDefinition <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || [[ -n ${functionDefinition} ]]
    modifiedFunctionDefinition="${functionDefinition}"
  else
    modifiedFunctionDefinition="function ${functionName}() {"$'\n'"}"
  fi

  if [[ ${injectAtBeginning} == true ]]; then
    modifiedFunctionDefinition="${modifiedFunctionDefinition%%"{"*}{"$'\n'"${code}""${modifiedFunctionDefinition#*"{"}"
  else
    modifiedFunctionDefinition="${modifiedFunctionDefinition%"}"*}${code}"$'\n'"}"
  fi

  RETURNED_VALUE="${modifiedFunctionDefinition}"
  RETURNED_VALUE2="${functionDefinition:-}"
}

# ## bash::sleep
#
# Sleep for the given amount of time.
# This is a pure bash replacement of sleep.
#
# - $1: **time** _as float_:
#       the time to sleep in seconds (can be a float)
#
# ```bash
# bash::sleep 1.5
# ```
#
# > The sleep command is not a built-in command in bash, but a separate executable. When you use sleep, you are creating a new process.
function bash::sleep() {
  local timeout="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  # when connected to a terminal, we can just read the stdout
  # which will never be written to, and use a timeout on read
  if [[ -t 2 ]]; then
    read -rt "${timeout}" -u 2 || :
    return 0
  elif command -v mkfifo 1>/dev/null; then
    if [[ -z ${IO_SLEEP_FIFO:-} ]]; then
      # shellcheck source=lib-fs
      source fs
      _OPTION_PATH_ONLY=true fs::createTempFile
      IO_SLEEP_FIFO="${RETURNED_VALUE}"
      mkfifo -m 700 "${IO_SLEEP_FIFO}"
      exec 6<>"${IO_SLEEP_FIFO}"
      rm "${IO_SLEEP_FIFO}"
    fi
    read -rt "${timeout}" -u 6 || :
  else
    # when everything else failed...
    sleep "${timeout}"
  fi
}

# ## bash::readStdIn
#
# Read the content of the standard input.
# Will immediately return if the standard input is empty.
#
# Returns:
#
# - ${RETURNED_VALUE}: The content of the standard input.
#
# ```bash
# bash::readStdIn && local stdIn="${RETURNED_VALUE}"
# ```
function bash::readStdIn() {
  RETURNED_VALUE=""
  local IFS=''
  if read -t 0 -u 0 -rd ''; then
    read -u 0 -rd '' RETURNED_VALUE || [[ -n ${RETURNED_VALUE} ]] || RETURNED_VALUE=""
  else
    RETURNED_VALUE=""
  fi
}

# ## bash::countArgs
#
# Returns the number of arguments passed.
#
# A convenient function that can be used to:
#
# - count the files/directories in a directory:
#   `bash::countArgs "${PWD}"/* && local numberOfFiles="${RETURNED_VALUE}"`
# - count the number of variables starting with VALET_
#   `bash::countArgs "${!VALET_@}" && local numberOfVariables="${RETURNED_VALUE}"`
#
# Inputs:
#
# - $@: **arguments** _as any_:
#       the arguments to count
#
# Returns:
#
# - ${RETURNED_VALUE}: The number of arguments passed.
#
# ```bash
# bash::countArgs 1 2 3
# ```
function bash::countArgs() {
  RETURNED_VALUE="$#"
}

# ## bash::getMissingVariables
#
# This function returns the list of undeclared variables for the given names.
#
# - $@: **variable names** _as string_:
#       the list of variable names to check.
#
# Returns:
#
# - $?
#   - 0 if there are variable undeclared
#   - 1 otherwise.
# - ${RETURNED_ARRAY[@]}: the list of undeclared variables.
#
# ```bash
# if bash::getMissingVariables "var1" "var2"; then
#   printf 'The following variables are not declared: %s' "${RETURNED_ARRAY[*]}"
# fi
# ```
function bash::getMissingVariables() {
  RETURNED_ARRAY=()
  local var
  for var in "$@"; do
    if [[ ! -v "${var}" ]]; then
      RETURNED_ARRAY+=("${var}")
    fi
  done
  if [[ ${#RETURNED_ARRAY[@]} -gt 0 ]]; then
    return 0
  fi
  return 1
}

# ## bash::getMissingCommands
#
# This function returns the list of not existing commands for the given names.
#
# - $@: **command names** _as string_:
#       the list of command names to check.
#
# Returns:
#
# - $?
#   - 0 if there are not existing commands
#   - 1 otherwise.
# - ${RETURNED_ARRAY[@]}: the list of not existing commands.
#
# ```bash
# if bash::getMissingCommands "command1" "command2"; then
#   printf 'The following commands do not exist: %s' "${RETURNED_ARRAY[*]}"
# fi
# ```
function bash::getMissingCommands() {
  RETURNED_ARRAY=()
  local cmd
  for cmd in "$@"; do
    if ! command -v "${cmd}" &>/dev/null; then
      RETURNED_ARRAY+=("${cmd}")
    fi
  done
  if [[ ${#RETURNED_ARRAY[@]} -gt 0 ]]; then
    return 0
  fi
  return 1
}

# ## bash::isCommand
#
# Check if the given command exists.
#
# - $1: **command name** _as string_:
#       the command name to check.
#
# Returns:
#
# - $?
#   - 0 if the command exists
#   - 1 otherwise.
#
# ```bash
# if bash::isCommand "command1"; then
#   printf 'The command exists.'
# fi
# ```
function bash::isCommand() {
  if command -v "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" &>/dev/null; then
    return 0
  fi
  return 1
}

# ## bash::isFunction
#
# Check if the given function exists.
#
# - $1: **function name** _as string_:
#       the function name to check.
#
# Returns:
#
# - $?
#   - 0 if the function exists
#   - 1 otherwise.
#
# ```bash
# if bash::isFunction "function1"; then
#   printf 'The function exists.'
# fi
# ```
function bash::isFunction() {
  if declare -F "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" &>/dev/null; then
    return 0
  fi
  return 1
}

# ## bash::getFunctionDefinitionWithGlobalVars
#
# This function can be used to get the definition of an existing function,
# rename it, and replace the use of positional parameters by global variables.
#
# This can be useful for performance reasons when a function is called many times,
# to avoid copying the positional parameters each time.
#
# - $1: **function name** _as string_:
#       the name of the function to re-export
# - $2: **new function name** _as string_:
#       the name of the new function to create
# - $@: global variable name _as string_:
#       the name of the global variable to use instead of the positional parameters
#       (can be repeated multiple times, for each parameter)
#
# Returns:
#
# - $?:
#   - 0 if the function was successfully re-exported
#   - 1 if the function does not exist
# - ${RETURNED_VALUE}: the modified function definition
# - ${RETURNED_VALUE2}: the original function
#
# ```bash
# bash::getFunctionDefinitionWithGlobalVars "myFunction" "myFunctionWithGlobalVars" "MY_VAR1" "MY_VAR2"
# eval "${RETURNED_VALUE}"
# myFunctionWithGlobalVars
# ```
function bash::getFunctionDefinitionWithGlobalVars() {
  local functionName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local newFunctionName="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  shift 2

  local IFS=''
  declare -f "${functionName}" 1>"${GLOBAL_TEMPORARY_STDOUT_FILE}" || return 1
  read -rd '' RETURNED_VALUE2 <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || [[ -n ${RETURNED_VALUE2} ]]
  local functionDefinition
  functionDefinition="${RETURNED_VALUE2/"${functionName}"/"${newFunctionName}"}"

  if (($# == 0)); then
    RETURNED_VALUE="${functionDefinition}"
    return 0
  fi

  # find the mapping between the positional parameters and the new global variable names
  local -A globalVars=()
  local -a positionalParameters=("$@")
  local IFS=$'\n'
  local line varName varPosition
  local modifiedFunctionDefinition=""
  for line in ${functionDefinition}; do
    if ((${#positionalParameters[@]} != ${#globalVars[@]})); then
      if [[ "${line}" =~ ^\ *local\ +(-[[:alpha:]]+\ )?([[:alpha:]]+)=[^$]*\$\{?([[:digit:]]+) ]]; then
        varName="${BASH_REMATCH[2]}"
        varPosition="${BASH_REMATCH[3]}"
        if [[ -n ${positionalParameters[$((varPosition - 1))]} ]]; then
          globalVars["${varName}"]="${positionalParameters[$((varPosition - 1))]}"
          log::trace "found local ${varName}=\${${varPosition}} -> remapped to ${globalVars[${varName}]}"
          continue
        fi
      fi
    fi
    modifiedFunctionDefinition+="${line}"$'\n'
  done

  # modify the function to use the global variables instead of the positional parameters
  for varName in "${!globalVars[@]}"; do
    modifiedFunctionDefinition="${modifiedFunctionDefinition//${varName}/"${globalVars[${varName}]}"}"
  done

  RETURNED_VALUE="${modifiedFunctionDefinition}"
}