#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.


# ## bash::runInSubshell
#
# This functions runs a command in a subshell.
  #
# - $@: **command with args** _as string_:
#       The command to run in the subshell.
# - ${_OPTION_EXIT_ON_FAIL} _as bool_:
#       (optional) If set to true, the main program will exit with code 1 if the subshell fails.
#
# Returns:
# - $?:
#   - 0 if the subshell completed successfully.
#   - 1 if the subshell failed.
#
# ```bash
# if ! bash::runInSubshell myFunction; then
#   core::fail "The subshell failed with code ${PIPESTATUS[0]:-}"
# fi
# ```
#
# > This function exists because the behavior of bash subshells are not what you would expect.
# > This function ensures that errors are properly handled and make the command list fail,
# > it ensures that we run the exit trap and the custom function "onSubshellExit",
# > and it gives you the correct exit code of the subshell.
function bash::runInSubshell() {
  local exitOnFail="${_OPTION_EXIT_ON_FAIL:-false}"
  # save the ERR trap to restore it later
  bash::getBuiltinOutput trap -p ERR
  local originalErrTrap="${REPLY}"
  # disable the ERR trap or we would catch the subshell failure with it and not restore
  # the errexit and the original trap (and we would display an error message that we do
  # not want to display because we already displayed an error from the subshell).
  trap ERR
  # disable errexit in the main shell
  set +o errexit
  (
    # re-enable errexit in the subshell
    set -o errexit
    _OPTION_EXPECTED_EXIT=true trap::registerSubshell
    "${@}"
  )
  local subshellExitCode=${PIPESTATUS[0]:-}
  set +o errexit
  # restore the original ERR trap
  eval "${originalErrTrap}"
  if [[ ${exitOnFail} == "true" && ${subshellExitCode} -gt 0 ]]; then
    # shellcheck disable=SC2034
    GLOBAL_EXPECTED_EXIT=1
    exit "${subshellExitCode}"
  fi
  return "${subshellExitCode}"
}

# ## bash::countJobs
#
# This function counts the number of jobs currently running in the background.
#
# Returns:
#
# - ${REPLY}: the number of jobs currently running in the background.
#
# ```bash
# bash::countJobs
# echo "There are currently ${REPLY} jobs running in the background."
# ```
function bash::countJobs() {
  local -i jobsCount=0
  bash::getBuiltinOutput jobs -r
  local IFS=$'\n' line
  for line in ${REPLY}; do
    if [[ ${line} == "["* ]]; then
      jobsCount+=1
    fi
  done
  REPLY="${jobsCount}"
}

# ## bash::runInParallel
#
# This function runs a list of commands in parallel with a maximum number of parallel jobs.
#
# - $1: **job names array name** _as string_:
#       The name of the array containing the names of the jobs to run.
# - $2: **job commands array name** _as string_:
#       The name of the array containing the commands to run.
#       Each command string will be evaluated in a subshell.
# - $3: max parallel jobs _as int_:
#       (optional) Can be set using the variable `_OPTION_MAX_PARALLEL_JOBS`.
#       The maximum number of parallel jobs to run.
#       (defaults to 4)
# - $4: job completed callback _as string_:
#       (optional) Can be set using the variable `_OPTION_JOB_COMPLETED_CALLBACK`.
#       The name of the function to call when a job is completed.
#       The function will receive the following arguments:
#       - the job index
#       - the job name
#       - the job exit code
#       - the percentage of jobs completed
#       If the function returns 1, the script will exit early.
#       (defaults to "")
# - ${_OPTION_TIMEOUT_BETWEEN_CHECKS} _as float_:
#       (optional) Can be set using the variable `_OPTION_TIMEOUT_BETWEEN_CHECKS`.
#       The time to wait between checks for completed jobs (when no jobs finished
#       when we last checked).
#       (defaults to 0.2)
#
# Returns:
#
# - $?:
#   - 0: if all the jobs completed successfully.
#   - 1: if the job completed callback returned 1.
# - ${REPLY_ARRAY[@]}: an array containing the exit codes of the jobs.
#
# ```bash
# declare -a jobNames=("job1" "job2" "job3")
# declare -a jobCommands=("sleep 1" "sleep 2" "sleep 3")
# _OPTION_MAX_PARALLEL_JOBS=2 bash::runInParallel jobNames jobCommands
# ```
function bash::runInParallel() {
  local -n jobNames="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -n jobCommands="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -i maxParallelJobs="${3:-${_OPTION_MAX_PARALLEL_JOBS:-4}}"
  local jobCompletedCallback="${4:-${_OPTION_JOB_COMPLETED_CALLBACK:-}}"
  local timeoutBetweenChecks="${_OPTION_TIMEOUT_BETWEEN_CHECKS:-0.2}"

  # inject the code to kill the running jobs when the program exits
  bash::injectCodeInFunction trap::onCleanUp 'bash::killRunningJobs' true
  eval "${REPLY}"
  local originalFunction="${REPLY2}"

  local IFS=' '$'\t'$'\n' runningsJobs jobName
  local -A -i jobIndexFromPid=()
  declare -g -a -i _BASH_RUNNING_JOB_PIDS=()
  local -a -i exitCodes=()
  local -i index=0 jobIndex exitCode nbJobsCompleted=0 pid

  for ((index = 0; index < ${#jobNames[@]}; index++)); do
    eval "{
      : ID=${index};

      trap::registerSubshell
      fs::setupSubshellTempFileGlobalVariable

      ${jobCommands[index]};
    } &"
    _BASH_RUNNING_JOB_PIDS+=("${!}")
    jobIndexFromPid["${!}"]="${index}"
    # we could get the job number using 'jobs %%' but since it displays the command, we will
    # check for ID=x in the jobs output

    log::debug "Running job (${index}) ⌜${jobNames[index]}⌝ with PID ${!}."$'\n'"Command: ${jobCommands[index]}"

    while ((${#_BASH_RUNNING_JOB_PIDS[@]} >= maxParallelJobs || (index + 1 == ${#jobNames[@]}))); do
      # wait for one of the test suites to finish (or all of them for the last batch)
      nbJobsCompleted=0
      bash::getBuiltinOutput jobs -r
      runningsJobs="${REPLY}"
      if log::isTraceEnabled; then
        log::trace "Running jobs: ${runningsJobs}"
      fi

      for pid in "${_BASH_RUNNING_JOB_PIDS[@]}"; do
        jobIndex="${jobIndexFromPid[${pid}]}"
        jobName="${jobNames[jobIndex]}"

        if [[ ${runningsJobs} != *": ID=${jobIndex};"* ]]; then
          exitCode=0
          wait -f "${pid}" || exitCode=$?
          exitCodes+=("${exitCode}")
          log::trace "Job (${jobIndex}) ⌜${jobName}⌝ with pid ⌜${pid}⌝ completed with exit code ⌜${exitCode}⌝."":${jobCommands[${jobIndex}]}"

          # remove the pid from the running pids
          # shellcheck disable=SC2206
          IFS=','
          local pidList=",${_BASH_RUNNING_JOB_PIDS[*]},"
          pidList=${pidList//",${pid},"/,}
          pidList=${pidList/#,/}
          pidList=${pidList/%,/}
          # shellcheck disable=SC2206
          _BASH_RUNNING_JOB_PIDS=(${pidList})
          IFS=' '$'\t'$'\n'

          if [[ -n ${jobCompletedCallback} ]]; then
            if ! ${jobCompletedCallback} "${jobIndex}" "${jobName}" "${exitCode}" "$((${#exitCodes[@]} * 100 / ${#jobNames[@]}))"; then
              log::trace "Exiting early."
              bash::killRunningJobs
              break 3
            fi
          fi
          nbJobsCompleted+=1
        else
          log::trace "Job ⌜${jobName}⌝ with pid ⌜${pid}⌝ is still running."
        fi
      done

      if ((nbJobsCompleted == 0)); then
        bash::sleep "${timeoutBetweenChecks}"
      fi

      if ((${#exitCodes[@]} == ${#jobNames[@]})); then
        break
      fi
    done
  done

  # restore the original function
  if [[ -n ${originalFunction} ]]; then
    eval "${originalFunction}"
  fi

  REPLY_ARRAY=("${exitCodes[@]}")
  ((${#exitCodes[@]} != ${#jobNames[@]})) && return 1
  return 0
}

# ## bash::killRunningJobs (private)
#
# This function kills all the jobs currently running in the background from bash::runInParallel.
# Called automatically when Valet exits.
#
# ```bash
# bash::killRunningJobs
# ```
function bash::killRunningJobs() {
  # kill all the test suites
  if [[ -n ${_BASH_RUNNING_JOB_PIDS[0]:-} ]]; then
    log::debug "Killing all running jobs."
    for pid in "${_BASH_RUNNING_JOB_PIDS[@]}"; do
      kill "${pid}" &>/dev/null || :
    done
  fi
}

# ## bash::injectCodeInFunction
#
# This function injects code at the beginning or the end of a function and
# returns the modified function to be evaluated.
#
# Creates an empty function if the function does not exist initially.
#
# - $1: **function name** _as string_:
#       The name of the function to inject the code into.
# - $2: **code** _as string_:
#       The code to inject.
# - $3: inject at beginning _as bool_:
#       (optional) Can be set using the variable `_OPTION_INJECT_AT_BEGINNING`.
#       Whether to inject the code at the beginning of the function (or at the end).
#       (defaults to false)
#
# Returns:
#
# - ${REPLY}: the modified function.
# - ${REPLY2}: the original function.
#
# ```bash
# bash::injectCodeInFunction myFunction "echo 'Hello world!'" true
# eval "${REPLY}"
# myFunction
# ```
function bash::injectCodeInFunction() {
  local functionName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local code="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local injectAtBeginning="${3:-${_OPTION_INJECT_AT_BEGINNING:-false}}"

  local functionDefinition modifiedFunctionDefinition
  if declare -f "${functionName}" 1>"${GLOBAL_TEMPORARY_STDOUT_FILE}"; then
    IFS='' read -rd '' functionDefinition <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || [[ -n ${functionDefinition} ]]
    modifiedFunctionDefinition="${functionDefinition}"
  else
    modifiedFunctionDefinition="function ${functionName}() {"$'\n'"}"
  fi

  if [[ ${injectAtBeginning} == true ]]; then
    modifiedFunctionDefinition="${modifiedFunctionDefinition%%"{"*}{"$'\n'"${code}""${modifiedFunctionDefinition#*"{"}"
  else
    modifiedFunctionDefinition="${modifiedFunctionDefinition%"}"*}${code}"$'\n'"}"
  fi

  REPLY="${modifiedFunctionDefinition}"
  REPLY2="${functionDefinition:-}"
}

# ## bash::sleep
#
# Sleep for the given amount of time.
# This is a pure bash replacement of sleep.
#
# - $1: **time** _as float_:
#       the time to sleep in seconds (can be a float)
#       If 0, waits indefinitely.
#
# ```bash
# bash::sleep 1.5
# ```
#
# > The sleep command is not a built-in command in bash, but a separate executable. When you use sleep, you are creating a new process.
function bash::sleep() {
  local timeout="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  if [[ ! -v GLOBAL_FD_BASH_SLEEP ]]; then
    exec {GLOBAL_FD_BASH_SLEEP}<>/dev/udp/127.0.0.1/0
  fi
  if [[ ${timeout} == "0" ]]; then
    # wait indefinitely
    read -r -u "${GLOBAL_FD_BASH_SLEEP}" || :
    return 0
  fi
  read -rt "${timeout}" -u "${GLOBAL_FD_BASH_SLEEP}" || :
}

# ## bash::readStdIn
#
# Read the content of the standard input.
# Will immediately return if the standard input is empty.
#
# Returns:
#
# - ${REPLY}: The content of the standard input.
#
# ```bash
# bash::readStdIn && local stdIn="${REPLY}"
# ```
function bash::readStdIn() {
  local IFS=''
  if read -t 0 -u 0 -rd ''; then
    read -u 0 -rd '' REPLY || [[ -n ${REPLY} ]] || REPLY=""
  else
    REPLY=""
  fi
}

# ## bash::countArgs
#
# Returns the number of arguments passed.
#
# A convenient function that can be used to:
#
# - count the files/directories in a directory:
#   `bash::countArgs "${PWD}"/* && local numberOfFiles="${REPLY}"`
# - count the number of variables starting with VALET_
#   `bash::countArgs "${!VALET_@}" && local numberOfVariables="${REPLY}"`
#
# Inputs:
#
# - $@: **arguments** _as any_:
#       the arguments to count
#
# Returns:
#
# - ${REPLY}: The number of arguments passed.
#
# ```bash
# bash::countArgs 1 2 3
# ```
function bash::countArgs() {
  REPLY="$#"
}

# ## bash::getMissingVariables
#
# This function returns the list of undeclared variables for the given names.
#
# - $@: **variable names** _as string_:
#       the list of variable names to check.
#
# Returns:
#
# - $?
#   - 0 if there are variable undeclared
#   - 1 otherwise.
# - ${REPLY_ARRAY[@]}: the list of undeclared variables.
#
# ```bash
# if bash::getMissingVariables "var1" "var2"; then
#   printf 'The following variables are not declared: %s' "${REPLY_ARRAY[*]}"
# fi
# ```
function bash::getMissingVariables() {
  REPLY_ARRAY=()
  local var
  for var in "$@"; do
    if [[ ! -v "${var}" ]]; then
      REPLY_ARRAY+=("${var}")
    fi
  done
  if [[ ${#REPLY_ARRAY[@]} -gt 0 ]]; then
    return 0
  fi
  return 1
}

# ## bash::getMissingCommands
#
# This function returns the list of not existing commands for the given names.
#
# - $@: **command names** _as string_:
#       the list of command names to check.
#
# Returns:
#
# - $?
#   - 0 if there are not existing commands
#   - 1 otherwise.
# - ${REPLY_ARRAY[@]}: the list of not existing commands.
#
# ```bash
# if bash::getMissingCommands "command1" "command2"; then
#   printf 'The following commands do not exist: %s' "${REPLY_ARRAY[*]}"
# fi
# ```
function bash::getMissingCommands() {
  REPLY_ARRAY=()
  local cmd
  for cmd in "$@"; do
    if ! command -v "${cmd}" &>/dev/null; then
      REPLY_ARRAY+=("${cmd}")
    fi
  done
  if [[ ${#REPLY_ARRAY[@]} -gt 0 ]]; then
    return 0
  fi
  return 1
}

# ## bash::isCommand
#
# Check if the given command exists.
#
# - $1: **command name** _as string_:
#       the command name to check.
#
# Returns:
#
# - $?
#   - 0 if the command exists
#   - 1 otherwise.
#
# ```bash
# if bash::isCommand "command1"; then
#   printf 'The command exists.'
# fi
# ```
function bash::isCommand() {
  if command -v "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" &>/dev/null; then
    return 0
  fi
  return 1
}

# ## bash::isFunction
#
# Check if the given function exists.
#
# - $1: **function name** _as string_:
#       the function name to check.
#
# Returns:
#
# - $?
#   - 0 if the function exists
#   - 1 otherwise.
#
# ```bash
# if bash::isFunction "function1"; then
#   printf 'The function exists.'
# fi
# ```
function bash::isFunction() {
  if declare -F "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" &>/dev/null; then
    return 0
  fi
  return 1
}

# ## bash::getFunctionDefinitionWithGlobalVars (private)
#
# This function can be used to get the definition of an existing function,
# rename it, and replace the use of positional parameters by global variables.
#
# This can be useful for performance reasons when a function is called many times,
# to avoid copying the positional parameters each time.
#
# - $1: **function name** _as string_:
#       the name of the function to re-export
# - $2: **new function name** _as string_:
#       the name of the new function to create
# - $@: global variable name _as string_:
#       the name of the global variable to use instead of the positional parameters
#       (can be repeated multiple times, for each parameter)
#
# Returns:
#
# - $?:
#   - 0 if the function was successfully re-exported
#   - 1 if the function does not exist
# - ${REPLY}: the modified function definition
# - ${REPLY2}: the original function
#
# ```bash
# bash::getFunctionDefinitionWithGlobalVars "myFunction" "myFunctionWithGlobalVars" "MY_VAR1" "MY_VAR2"
# eval "${REPLY}"
# myFunctionWithGlobalVars
# ```
function bash::getFunctionDefinitionWithGlobalVars() {
  local functionName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local newFunctionName="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  shift 2

  local IFS=''
  declare -f "${functionName}" 1>"${GLOBAL_TEMPORARY_STDOUT_FILE}" || return 1
  read -rd '' REPLY2 <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || [[ -n ${REPLY2} ]]
  local functionDefinition
  functionDefinition="${REPLY2/"${functionName}"/"${newFunctionName}"}"

  if (($# == 0)); then
    REPLY="${functionDefinition}"
    return 0
  fi

  # find the mapping between the positional parameters and the new global variable names
  local -A globalVars=()
  local -a positionalParameters=("$@")
  local IFS=$'\n'
  local line varName varPosition
  local modifiedFunctionDefinition=""
  for line in ${functionDefinition}; do
    if ((${#positionalParameters[@]} != ${#globalVars[@]})); then
      if [[ "${line}" =~ ^\ *local\ +(-[[:alpha:]]+\ )?([[:alpha:]]+)=[^$]*\$\{?([[:digit:]]+) ]]; then
        varName="${BASH_REMATCH[2]}"
        varPosition="${BASH_REMATCH[3]}"
        if [[ -n ${positionalParameters[$((varPosition - 1))]} ]]; then
          globalVars["${varName}"]="${positionalParameters[$((varPosition - 1))]}"
          log::trace "found local ${varName}=\${${varPosition}} -> remapped to ${globalVars[${varName}]}"
          continue
        fi
      fi
    fi
    modifiedFunctionDefinition+="${line}"$'\n'
  done

  # modify the function to use the global variables instead of the positional parameters
  for varName in "${!globalVars[@]}"; do
    modifiedFunctionDefinition="${modifiedFunctionDefinition//${varName}/"${globalVars[${varName}]}"}"
  done

  REPLY="${modifiedFunctionDefinition}"
}

# ## bash::getBuiltinOutput
#
# Capture the output of a builtin command. Can be used on bash builtins that produce output.
# It captures the stdout and stderr of said command.
#
# This function is a lot more basic than `exe::invoke` and does not support all its features.
#
# - $@: **command** _as string_:
#       The command to run.
#
# Returns:
#
# - $?
#   - 0 if the command was successful
#   - 1 otherwise.
# - ${REPLY}: The captured output.
#
# ```bash
# bash::getBuiltinOutput declare -f bash::getBuiltinOutput
# echo "${REPLY}"
# ```
function bash::getBuiltinOutput() {
  local IFS=' '
  # shellcheck disable=SC2068
  "${@}" &>"${GLOBAL_TEMPORARY_STDOUT_FILE}" || return 1
  REPLY=""
  IFS='' read -rd '' REPLY <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || :
}

# ## bash::isFdValid
#
# Check if the given file descriptor is valid.
#
# - $1: **file descriptor** _as string_:
#       The file descriptor to check.
#
# Returns:
#
# - $?
#   - 0 if the file descriptor is valid
#   - 1 otherwise.
#
# ```bash
# if bash::isFdValid 1; then
#   echo "File descriptor 1 is valid."
# fi
# ```
function bash::isFdValid() {
  local fd="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local test keepStderr
  exec {keepStderr}>&2
  if [[ ${fd} =~ ^[0-9]+$ ]]; then
    if { exec {test}>&"${fd}"; } 2>/dev/null; then
      exec 2>&${keepStderr} {test}>&- {keepStderr}>&-
      return 0
    fi
  else
    if { exec {test}>>"${fd}"; } 2>/dev/null; then
      exec 2>&${keepStderr} {test}>&- {keepStderr}>&-
      return 0
    fi
  fi
  exec 2>&${keepStderr} {keepStderr}>&-
  return 1
}


# ## bash::allVariablesCachedWithValue
#
# Check if one or more variables are cached with the given value.
# If all the variables given already have the same value cached,
# the function will return true.
# Otherwise, it will return false and cache the given value in the variables.
#
# - $1: **variable name** _as string_:
#       the name of the variable to check
# - $2: **value** _as any_:
#       the value to check against the variable
# - $@: **variable/value pair** _as any_:
#       additional variable/value pairs to check
#
# Returns:
#
# - $?:
#   - 0 if all the variables have the same value as the given value
#   - 1 otherwise
#
# ```bash
# if bash::allVariablesCachedWithValue "MY_VAR" "my_value"; then
#   echo "MY_VAR is cached with the value 'my_value'"
# else
#   echo "MY_VAR is not cached with the value 'my_value'"
# fi
# ```
function bash::allVariablesCachedWithValue() {
  local -i nbNotCached=0
  local varName varValue
  while (( $# > 0 )); do
    varName="_BASH_VAR_CACHED_${1}"
    varValue="${2}"
    shift 2
    if [[ ! -v "${varName}" || ${!varName} != "${varValue}" ]]; then
      nbNotCached=$((nbNotCached + 1))
      eval "${varName}=\"${varValue}\""
    fi
  done
  return $((nbNotCached == 0 ? 0 : 1))
}

# ## bash::clearCachedVariables
#
# Clear the cached variables used by bash::allVariablesCachedWithValue.
# This will unset all variables starting with _TUI_CACHED_.
#
# - $@ : **variable names** _as any_:
#       (optional) the names of the variables to clear
#       (defaults to all cached variables)
#
# ```bash
# bash::clearCachedVariables
# bash::clearCachedVariables "MY_VAR" "ANOTHER_VAR"
# ```
function bash::clearCachedVariables() {
  if (( $# == 0 )); then
    # shellcheck disable=SC2086
    unset -v ${!_TUI_CACHED_*}
  else
    while (( $# > 0 )); do
      unset -v "_BASH_VAR_CACHED_${1}"
      shift
    done
  fi
}
