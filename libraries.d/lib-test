#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-bash
source bash

# ## test::log
#
# Call this function to log a message during a test.
# This log will only show in case of a script error or when the debug
# log level is enabled when running the tests.
#
# - $@: **messages** _as string_:
#       The messages to log.
#
# ```bash
# test::log "This is a log message."
# ```
function test::log() {
  printf '%s\n' "${@}" >&4
}

# ## test::title
#
# Call this function to add an H3 title in the report file.
#
# - $1: title _as string_:
#       (optional) Can be set using the variable `_OPTION_TITLE`.
#       The title of the test.
#      (defaults to "Test")
#
# ```bash
# test::title "Testing something"
# ```
function test::title() {
  printf "%s\n\n" "### ${1:-${_OPTION_TITLE:-"Test"}}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test::markdown
#
# Call this function to add some markdown in the report file.
#
# - $@: **markdown** _as string_:
#       The markdown to add in the report file.
#
# ```bash
# test::markdown "> This is a **quote**."
# ```
function test::markdown() {
  printf "%s\n\n" "${@}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test::prompt
#
# Call this function to print a 'prompt' (markdown that looks like a prompt) in the report file.
#
# - $@: **command** _as string_:
#       The command to print as a prompt.
#
# ```bash
# test::prompt "echo 'Hello, world!'"
# ```
function test::prompt() {
  # shellcheck disable=SC2016
  printf '❯ `%s`\n\n' "${*}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test::func
#
# Call this function to test a function that returns a value using the valet
# conventions (RETURNED_VALUE, RETURNED_VALUE2, RETURNED_ARRAY, etc...).
#
# It will write the command and its output to the report file.
# It will also print the returned values.
#
# - $@: **command** _as string_:
#       The command to execute (function and its arguments).
#
# ```bash
# test::func myFunction
# ```
function test::func() {
  test_exec false true "$@"
}

# ## test::exec
#
# Call this function to execute a command and write the command and its output to the report file.
# The command can fail, in which case the returned exit code is written to the report file.
# However, the command must not call `exit` (in which case, use test::exit).
#
# - $@: **command** _as string_:
#       The command to execute.
#
# ```bash
# test::exec echo "Hello, world!"
# ```
function test::exec() {
  test_exec false false "$@"
}

# ## test::exit
#
# Call this function to execute a command that can call `exit` and write the command and its output to the report file.
# The command is executed in a subshell to catch the exit.
#
# - $@: **command** _as string_:
#       The command to execute.
#
# ```bash
# test::exit exit 3
# ```
function test::exit() {
  test_exec true false "$@"
}

# ## test_exec (private)
#
# This function is called by test::exec and test::exit to execute a command and
# write the command and its output to the report file.
#
# - $1: **can exit** _as boolean_:
#       Whether the command can call `exit`.
# - $2: **print returned values** _as boolean_:
#       Whether the returned values should be printed in the report.
#       (e.g. RETURNED_VALUE, RETURNED_VALUE2, RETURNED_ARRAY...)
# - $@: **command** _as string_:
#       The command to execute.
#
# ```bash
# test_exec false echo "Hello, world!"
# ```
# shellcheck disable=SC2034
function test_exec() {
  local canExit="${1}"
  local printReturnedValues="${2}"
  shift 2

  if (($# == 0)); then
    test::fail "No command provided to ⌜${FUNCNAME[1]:-}⌝ in ⌜${BASH_SOURCE[2]:-}:${BASH_LINENO[1]:-}⌝."
  fi

  local IFS=' ' compoundCommand param

  # compute the command to run, escaping special characters
  local -a params=("${@}")
  local -i index=0
  for ((index = 0; index < ${#params[@]}; index++)); do
    param="${params[index]}"
    if [[ -z ${param} ]]; then
      # the argument is empty, make sure it is quoted
      params[index]="''"
    fi
    if [[ ${param:0:1} == [\"\'] && ${param:${#param} - 1} == [\"\'] ]]; then
      # the argument was quoted by the user, leave it as is
      continue
    fi
    if [[ ${param} == *[\ \\$'\t'$'\n']* ]]; then
      # the argument contains any problematic character, quote it
      printf -v param '%q' "${param}"
      params[index]="${param}"
    fi
  done
  compoundCommand="${params[*]}"


  _TEST_OUTPUT="${compoundCommand}"
  if declare -F test::transformTextBeforeFlushing &>/dev/null; then
    test::transformTextBeforeFlushing
  fi

  # shellcheck disable=SC2016
  printf '❯ `%s`\n\n' "${_TEST_OUTPUT}" >>"${GLOBAL_TEST_REPORT_FILE}"

  if [[ -s "${GLOBAL_TEST_STANDARD_OUTPUT_FILE}" || -s "${GLOBAL_TEST_STANDARD_ERROR_FILE}" ]]; then
    test::fail "⌜${FUNCNAME[1]:-}⌝ was called in ⌜${BASH_SOURCE[2]:-}:${BASH_LINENO[1]:-}⌝ but the standard/error output were not empty, call ⌜test::flush⌝ first or do not write to these streams."
  fi

  if [[ ${printReturnedValues} == "true" ]]; then
    local RETURNED_VALUE
    local RETURNED_VALUE2
    local RETURNED_VALUE3
    local RETURNED_VALUE4
    local -a RETURNED_ARRAY
    local -a RETURNED_ARRAY2
    local -A RETURNED_ASSOCIATIVE_ARRAY
  fi

  # reset IFS to ensure consistent behavior
  IFS=' '$'\t'$'\n'

  # execute the command
  local -i exitCode=0
  if [[ ${canExit} == "true" ]]; then
    if ! (eval "${compoundCommand}") 1>>"${GLOBAL_TEST_STANDARD_OUTPUT_FILE}" 2>>"${GLOBAL_TEST_STANDARD_ERROR_FILE}"; then
      exitCode=${PIPESTATUS[0]:-}
    fi
  else
    if eval "${compoundCommand}" 1>>"${GLOBAL_TEST_STANDARD_OUTPUT_FILE}" 2>>"${GLOBAL_TEST_STANDARD_ERROR_FILE}"; then
      :
    else
      exitCode=$?
    fi
  fi

  if ((exitCode != 0)); then
    if [[ ${canExit} == "true" ]]; then
      # shellcheck disable=SC2016
      printf 'Exited with code: `%s`\n\n' "${exitCode}" >>"${GLOBAL_TEST_REPORT_FILE}"
    else
      # shellcheck disable=SC2016
      printf 'Returned code: `%s`\n\n' "${exitCode}" >>"${GLOBAL_TEST_REPORT_FILE}"
    fi
  fi

  test_flushFdToCodeBlock 1 "**Standard output**:"
  test_flushFdToCodeBlock 2 "**Error output**:"

  if [[ ${printReturnedValues} == "true" ]]; then
    test::printReturnedVars
  fi
}

# ## test::printReturnedVars
#
# This function can be called to print the returned values,
# e.g. RETURNED_VALUE, RETURNED_VALUE2, RETURNED_ARRAY...
# They will each be printed in a code block in the report file.
#
# ```bash
# test::printReturnedVars
# ```
function test::printReturnedVars() {
  if declare -F test::transformReturnedVarsBeforePrinting &>/dev/null; then
    test::transformReturnedVarsBeforePrinting
  fi
  local IFS=$'\n' key varName _TEST_OUTPUT=""
  for varName in RETURNED_VALUE RETURNED_VALUE2 RETURNED_VALUE3 RETURNED_VALUE4; do
    if [[ -v ${varName} ]]; then
      _TEST_OUTPUT+="${varName}='${!varName//\'/\'\"\'\"\'}'"$'\n'
    fi
  done
  for varName in RETURNED_ARRAY RETURNED_ARRAY2; do
    if [[ -v ${varName} ]]; then
      _TEST_OUTPUT+="${varName}=("$'\n'
      local -n array="${varName}"
      for key in "${!array[@]}"; do
        _TEST_OUTPUT+="[${key}]='${array[${key}]//\'/\'\"\'\"\'}'"$'\n'
      done
      _TEST_OUTPUT+=")"$'\n'
    fi
  done
  if [[ -v RETURNED_ASSOCIATIVE_ARRAY && -v RETURNED_ASSOCIATIVE_ARRAY[@] ]]; then
      _TEST_OUTPUT+="RETURNED_ASSOCIATIVE_ARRAY=("$'\n'
    for key in "${!RETURNED_ASSOCIATIVE_ARRAY[@]}"; do
      _TEST_OUTPUT+="[${key}]='${RETURNED_ASSOCIATIVE_ARRAY[${key}]//\'/\'\"\'\"\'}'"$'\n'
    done
    _TEST_OUTPUT+=")"$'\n'
  fi
  if [[ -n ${_TEST_OUTPUT} ]]; then
    if declare -F test::transformTextBeforeFlushing &>/dev/null; then
      test::transformTextBeforeFlushing
    fi
    # shellcheck disable=SC2016
    printf 'Returned variables:\n\n```text\n%s\n```\n\n' "${_TEST_OUTPUT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
  fi
}

# ## test::resetReturnedVars
#
# Resets the value of each RETURNED_ variable.
#
# ```bash
# test::resetReturnedVars
# ```
function test::resetReturnedVars() {
  local IFS=' '
  # shellcheck disable=SC2086
  unset ${!RETURNED_*}
}

# ## test::printVars
#
# This function can be called to print the global variables in the report file.
# They will printed in a code block in the report file.
#
# - $@: **variables** _as string_:
#       The variables to print.
#
# ```bash
# test::printVars myVar
# ```
function test::printVars() {
  local IFS=$'\n'
  local chunk varName
  if ! bash::getBuiltinOutput declare -p "${@}"; then
    local varName
    for varName in "${@}"; do
      if ! bash::getBuiltinOutput declare -p "${varName}"; then
        IFS=' '
        test::fail "Variable ⌜${varName}⌝ does not exist, could not execute ⌜test::printVars $*⌝."
      fi
    done
  fi
  _TEST_OUTPUT=""
  while [[ -n ${RETURNED_VALUE} ]]; do
    chunk="${RETURNED_VALUE%%$'\n'*}"
    RETURNED_VALUE="${RETURNED_VALUE:${#chunk} + 1}"

    if [[ ${chunk} =~ "declare -"[aA][ilnrtux]*" "([^=]+)"=" ]]; then
      # we print an array
      varName="${BASH_REMATCH[1]}"
      local -n array="${varName}"
      _TEST_OUTPUT+="${varName}=("$'\n'
      for key in "${!array[@]}"; do
        _TEST_OUTPUT+="[${key}]='${array[${key}]//\'/\'\"\'\"\'}'"$'\n'
      done
      _TEST_OUTPUT+=")"$'\n'
    elif [[ ${chunk} =~ "declare -"[^[:space:]]+" "([^=]+)"=" ]]; then
      # we print a simple variable
      varName="${BASH_REMATCH[1]}"
      _TEST_OUTPUT+="${varName}='${!varName//\'/\'\"\'\"\'}'"$'\n'
    elif [[ ${chunk} == "declare -"* ]]; then
      test::fail "Could not parse variable declaration: ⌜${chunk}⌝."
    fi
  done
  if declare -F test::transformTextBeforeFlushing &>/dev/null; then
    test::transformTextBeforeFlushing
  fi
  # shellcheck disable=SC2016
  printf '```text\n%s\n```\n\n' "${_TEST_OUTPUT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test_flushFdToCodeBlock (private)
#
# This function write the captured standard and error outputs to the report file
# and reset these file descriptors.
#
# - $1: **fdNumber** _as int_:
#       The file descriptor number to flush (1 or 2).
# - $2: blockTitle _as string_:
#       (optional) Can be set using the variable `_OPTION_BLOCK_TITLE`.
#       Add a 'title' to the code block (`**title**:` before the code block).
#       (defaults to '' which will not add a title)
#
# ```bash
# test_flushFdToCodeBlock 1 true
# ```
function test_flushFdToCodeBlock() {
  local -i fdNumber="${1}"
  local blockTitle="${2:-${_OPTION_BLOCK_TITLE:-}}"
  local file
  if ((fdNumber == 1)); then
    file="${GLOBAL_TEST_STANDARD_OUTPUT_FILE}"
  else
    file="${GLOBAL_TEST_STANDARD_ERROR_FILE}"
  fi
  if [[ ! -s "${file}" ]]; then
    return 0
  fi
  _TEST_OUTPUT=''
  local IFS=''
  read -rd '' _TEST_OUTPUT <"${file}" || :

  if declare -F test::transformTextBeforeFlushing &>/dev/null; then
    test::transformTextBeforeFlushing
  fi

  if [[ -n ${blockTitle} ]]; then
    # shellcheck disable=SC2016
    printf '%s\n\n```text\n%s\n```\n\n' "${blockTitle}" "${_TEST_OUTPUT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
  else
    # shellcheck disable=SC2016
    printf '```text\n%s\n```\n\n' "${_TEST_OUTPUT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
  fi

  # reset the file content (must close/open the file descriptor in between)
  # shellcheck disable=SC2093
  eval "exec ${fdNumber}>&-; : >'${file}'; exec ${fdNumber}>'${file}';"
}

# ## test::transformTextBeforeFlushing
#
# This function can be defined to modify the flushed text before adding it to the report.
#
# The text to transform is in the global variable `_TEST_OUTPUT`.
#
# Returns:
#
# - `_TEST_OUTPUT`: The modified text.
#
# > You can define this function directly in the test script, or in a test hook if
# > you need it to be available for multiple tests.
# > Note however that this function can be called very often, so it should be optimized.

# ## test::transformReturnedVarsBeforePrinting
#
# This function can be defined to modify the returned variables before printing them in the report.
#
# > You can define this function directly in the test script, or in a test hook if
# > you need it to be available for multiple tests.
# > Note however that this function can be called very often, so it should be optimized.

# ## test::flush
#
# Call this function to flush the standard and error outputs to the report file.
# They will be added as code blocks in the report file (one for the standard
# output, one for the standard error).
#
# ```bash
# test::flush
# ```
function test::flush() {
  test_flushFdToCodeBlock 1 "**Standard output**:"
  test_flushFdToCodeBlock 2 "**Error output**:"
}

# ## test::flushStdout
#
# Call this function to flush the standard output to the report file.
# It will be added as a code block in the report file.
#
# - $1: blockTitle _as string_:
#       (optional) Can be set using the variable `_OPTION_BLOCK_TITLE`.
#       Add a 'title' to the code block (`**title**:` before the code block).
#       (defaults to '' which will not add a title)
#
# ```bash
# test::flushStdout
# ```
function test::flushStdout() {
  test_flushFdToCodeBlock 1 "${1:-${_OPTION_BLOCK_TITLE:-}}"
}

# ## test::flushStderr
#
# Call this function to flush the standard error to the report file.
# It will be added as a code block in the report file.
#
# - $1: blockTitle _as string_:
#       (optional) Can be set using the variable `_OPTION_BLOCK_TITLE`.
#       Add a 'title' to the code block (`**title**:` before the code block).
#       (defaults to '' which will not add a title)
#
# ```bash
# test::flushStderr
# ```
function test::flushStderr() {
  test_flushFdToCodeBlock 2 "${1:-${_OPTION_BLOCK_TITLE:-}}"
}

# ## test::fail
#
# Call this function to log a message and exit with the status 142, which
# indicates to the self test command that the test failed and that we know the
# reason (it is a bad implementation of the test itself).
#
# - $@: **message** _as string_:
#       The message to log.
#
# ```bash
# test::fail "This is a failure message with a clear reason."
# ```
function test::fail() {
  GLOBAL_STACK_FUNCTION_NAMES=("${FUNCNAME[@]}")
  GLOBAL_STACK_SOURCE_FILES=("${BASH_SOURCE[@]}")
  GLOBAL_STACK_LINE_NUMBERS=("${BASH_LINENO[@]}")
  declare -p GLOBAL_STACK_FUNCTION_NAMES GLOBAL_STACK_SOURCE_FILES GLOBAL_STACK_LINE_NUMBERS 1>&3

  test::log "$@"
  exit "${GLOBAL_TEST_IMPLEMENTATION_FAILURE_STATUS}"
}
