#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-bash
source bash

# ## test::log
#
# Call this function to log a message during a test.
# This log will only show in case of a script error or when the debug
# log level is enabled when running the tests.
#
# - $@: **messages** _as string_:
#       The messages to log.
#
# ```bash
# test::log "This is a log message."
# ```
function test::log() {
  printf '%s\n' "${@}" >&"${GLOBAL_FD_TEST_LOG}"
}

# ## test::title
#
# Call this function to add an H3 title in the report file.
#
# - $1: title _as string_:
#       The title of the test.
#
# ```bash
# test::title "Testing something"
# ```
function test::title() {
  printf "%s\n\n" "### ${1}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test::markdown
#
# Call this function to add some markdown in the report file.
#
# - $@: **markdown** _as string_:
#       The markdown to add in the report file.
#
# ```bash
# test::markdown "> This is a **quote**."
# ```
function test::markdown() {
  printf "%s\n\n" "${@}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test::prompt
#
# Call this function to print a 'prompt' (markdown that looks like a prompt) in the report file.
#
# - $@: **command** _as string_:
#       The command to print as a prompt.
#
# ```bash
# test::prompt "echo 'Hello, world!'"
# ```
function test::prompt() {
  local IFS=' '
  # shellcheck disable=SC2016
  printf '❯ `%s`\n\n' "${*}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test::func
#
# Call this function to test a function that returns a value using the valet
# conventions (REPLY, REPLY2, REPLY_ARRAY, etc...).
#
# It will write the command and its output to the report file.
# It will also print the REPLY values.
#
# - $@: **command** _as string_:
#       The command to execute (function and its arguments).
#
# ```bash
# test::func myFunction
# ```
function test::func() {
  test_exec false true "$@"
}

# ## test::exec
#
# Call this function to execute a command and write the command and its output to the report file.
# The command can fail, in which case the returned exit code is written to the report file.
# However, the command must not call `exit` (in which case, use test::exit).
#
# - $@: **command** _as string_:
#       The command to execute.
#
# ```bash
# test::exec echo "Hello, world!"
# ```
function test::exec() {
  test_exec false false "$@"
}

# ## test::exit
#
# Call this function to execute a command that can call `exit` and write the command and its output to the report file.
# The command is executed in a subshell to catch the exit.
#
# - $@: **command** _as string_:
#       The command to execute.
#
# ```bash
# test::exit exit 3
# ```
function test::exit() {
  test_exec true false "$@"
}

# ## test_exec (private)
#
# This function is called by test::exec and test::exit to execute a command and
# write the command and its output to the report file.
#
# - $1: **can exit** _as boolean_:
#       Whether the command can call `exit`.
# - $2: **print REPLY values** _as boolean_:
#       Whether the REPLY variable values should be printed in the report.
#       (e.g. REPLY, REPLY2, REPLY_ARRAY...)
# - $@: **command** _as string_:
#       The command to execute.
#
# ```bash
# test_exec false echo "Hello, world!"
# ```
# shellcheck disable=SC2034
function test_exec() {
  local \
    canExit="${1}" \
    printReturnedValues="${2}"
  shift 2

  if (($# == 0)); then
    test::fail "No command provided to ⌜${FUNCNAME[1]:-}⌝ in ⌜${BASH_SOURCE[2]:-}:${BASH_LINENO[1]:-}⌝."
  fi

  local IFS=' ' compoundCommand param

  # compute the command to run, escaping special characters
  local -a params=("${@}")
  local -i index=0
  for ((index = 0; index < ${#params[@]}; index++)); do
    param="${params[index]}"
    if [[ -z ${param} ]]; then
      # the argument is empty, make sure it is quoted
      params[index]="''"
    fi
    if [[ ${param:0:1} == [\"\'] && ${param:${#param}-1} == [\"\'] ]]; then
      # the argument was quoted by the user, leave it as is
      continue
    fi
    if [[ ${param} == *[\ \\$'\t'$'\n']* ]]; then
      # the argument contains any problematic character, quote it
      printf -v param '%q' "${param}"
      params[index]="${param}"
    fi
  done
  compoundCommand="${params[*]}"

  local GLOBAL_TEST_OUTPUT_CONTENT="${compoundCommand}"
  if declare -F test::scrubOutput &>/dev/null; then
    test::scrubOutput
  fi

  # shellcheck disable=SC2016
  printf '❯ `%s`\n\n' "${GLOBAL_TEST_OUTPUT_CONTENT}" >>"${GLOBAL_TEST_REPORT_FILE}"

  if [[ -s "${GLOBAL_TEST_STANDARD_OUTPUT_FILE}" || -s "${GLOBAL_TEST_STANDARD_ERROR_FILE}" ]]; then
    test::fail "⌜${FUNCNAME[1]:-}⌝ was called in ⌜${BASH_SOURCE[2]:-}:${BASH_LINENO[1]:-}⌝ but the standard/error output were not empty, call ⌜test::flush⌝ first or do not write to these streams."
  fi

  if [[ ${printReturnedValues} == "true" ]]; then
    local REPLY_CODE REPLY REPLY2 REPLY3 REPLY4
    local -a REPLY_ARRAY REPLY_ARRAY2
    local -A REPLY_ASSOCIATIVE_ARRAY
  fi

  # reset IFS to ensure consistent behavior
  IFS=' '$'\t'$'\n'

  # execute the command
  local -i exitCode=0
  if [[ ${canExit} == "true" ]]; then
    bash::runInSubshell eval "${compoundCommand}"
    exitCode=${REPLY_CODE}
  else
    bash::catchErrors eval "${compoundCommand}"
    exitCode="${GLOBAL_ERROR_TRAP_LAST_ERROR_CODE}"
  fi

  if ((exitCode != 0)); then
    if [[ ${canExit} == "true" ]]; then
      # shellcheck disable=SC2016
      printf 'Exited with code: `%s`\n\n' "${exitCode}" >>"${GLOBAL_TEST_REPORT_FILE}"
    else
      # shellcheck disable=SC2016
      printf 'Returned code: `%s`\n\n' "${exitCode}" >>"${GLOBAL_TEST_REPORT_FILE}"
    fi
  fi

  test_flushFdToCodeBlock 1 "**Standard output**:"
  test_flushFdToCodeBlock 2 "**Error output**:"

  if [[ ${printReturnedValues} == "true" ]]; then
    test::printReplyVars
  fi
}

# ## test::printReplyVars
#
# This function can be called to print the REPLY values,
# e.g. REPLY, REPLY2, REPLY_ARRAY...
# They will each be printed in a code block in the report file.
#
# ```bash
# test::printReplyVars
# ```
function test::printReplyVars() {
  if declare -F test::scrubReplyVars &>/dev/null; then
    test::scrubReplyVars
  fi
  local IFS=$'\n' key varName GLOBAL_TEST_OUTPUT_CONTENT=""
  for varName in REPLY_CODE REPLY REPLY2 REPLY3 REPLY4; do
    if [[ -v ${varName} ]]; then
      GLOBAL_TEST_OUTPUT_CONTENT+="${varName}='${!varName//\'/\'\"\'\"\'}'"$'\n'
    fi
  done
  for varName in REPLY_ARRAY REPLY_ARRAY2; do
    if [[ -v ${varName} ]]; then
      GLOBAL_TEST_OUTPUT_CONTENT+="${varName}=("$'\n'
      local -n array_nameRef="${varName}"
      for key in "${!array_nameRef[@]}"; do
        GLOBAL_TEST_OUTPUT_CONTENT+="[${key}]='${array_nameRef[${key}]//\'/\'\"\'\"\'}'"$'\n'
      done
      GLOBAL_TEST_OUTPUT_CONTENT+=")"$'\n'
    fi
  done
  if [[ -v REPLY_ASSOCIATIVE_ARRAY && -v REPLY_ASSOCIATIVE_ARRAY[@] ]]; then
    GLOBAL_TEST_OUTPUT_CONTENT+="REPLY_ASSOCIATIVE_ARRAY=("$'\n'
    for key in "${!REPLY_ASSOCIATIVE_ARRAY[@]}"; do
      GLOBAL_TEST_OUTPUT_CONTENT+="[${key}]='${REPLY_ASSOCIATIVE_ARRAY[${key}]//\'/\'\"\'\"\'}'"$'\n'
    done
    GLOBAL_TEST_OUTPUT_CONTENT+=")"$'\n'
  fi
  if [[ -n ${GLOBAL_TEST_OUTPUT_CONTENT} ]]; then
    if declare -F test::scrubOutput &>/dev/null; then
      test::scrubOutput
    fi
    # shellcheck disable=SC2016
    printf 'Returned variables:\n\n```text\n%s\n```\n\n' "${GLOBAL_TEST_OUTPUT_CONTENT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
  fi
}

# ## test::resetReplyVars
#
# Resets the value of each REPLY variable.
#
# ```bash
# test::resetReplyVars
# ```
function test::resetReplyVars() {
  local IFS=' '
  # shellcheck disable=SC2086
  unset ${!REPLY*}
}

# ## test::printVars
#
# This function can be called to print the global variables in the report file.
# They will printed in a code block in the report file.
#
# - $@: **variables** _as string_:
#       The variables to print.
#
# ```bash
# test::printVars myVar
# ```
function test::printVars() {
  local IFS=$'\n'
  local chunk varName
  bash::getBuiltinOutput declare -p "${@}"
  if ((REPLY_CODE != 0)) ; then
    local varName
    for varName in "${@}"; do
      bash::getBuiltinOutput declare -p "${varName}"
      if ((REPLY_CODE != 0)); then
        IFS=' '
        test::fail "Variable ⌜${varName}⌝ does not exist, could not execute ⌜test::printVars $*⌝."
      fi
    done
  fi
  GLOBAL_TEST_OUTPUT_CONTENT=""
  while [[ -n ${REPLY} ]]; do
    chunk="${REPLY%%$'\n'*}"
    REPLY="${REPLY:${#chunk}+1}"

    if [[ ${chunk} =~ "declare -"[aA][ilnrtux]*" "([^=]+)"=" ]]; then
      # we print an array
      varName="${BASH_REMATCH[1]}"
      local -n array_nameRef="${varName}"
      GLOBAL_TEST_OUTPUT_CONTENT+="${varName}=("$'\n'
      for key in "${!array_nameRef[@]}"; do
        GLOBAL_TEST_OUTPUT_CONTENT+="[${key}]='${array_nameRef[${key}]//\'/\'\"\'\"\'}'"$'\n'
      done
      GLOBAL_TEST_OUTPUT_CONTENT+=")"$'\n'
    elif [[ ${chunk} =~ "declare -"[^[:space:]]+" "([^=]+)"=" ]]; then
      # we print a simple variable
      varName="${BASH_REMATCH[1]}"
      GLOBAL_TEST_OUTPUT_CONTENT+="${varName}='${!varName//\'/\'\"\'\"\'}'"$'\n'
    elif [[ ${chunk} == "declare -"* ]]; then
      test::fail "Could not parse variable declaration: ⌜${chunk}⌝."
    fi
  done
  if declare -F test::scrubOutput &>/dev/null; then
    test::scrubOutput
  fi
  # shellcheck disable=SC2016
  printf '```text\n%s\n```\n\n' "${GLOBAL_TEST_OUTPUT_CONTENT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
}

# ## test_flushFdToCodeBlock (private)
#
# This function write the captured standard and error outputs to the report file
# and reset these file descriptors.
#
# - $1: **file descriptor number** _as int_:
#       The file descriptor number to flush (1 or 2).
# - $2: **blockTitle** _as string_:
#       Add a 'title' to the code block (`**title**:` before the code block).
#
# ```bash
# test_flushFdToCodeBlock 1 true
# ```
function test_flushFdToCodeBlock() {
  local -i GLOBAL_TEST_FD_NUMBER="${1}"
  local blockTitle="${2}"
  local file
  if ((GLOBAL_TEST_FD_NUMBER == 1)); then
    file="${GLOBAL_TEST_STANDARD_OUTPUT_FILE}"
  else
    file="${GLOBAL_TEST_STANDARD_ERROR_FILE}"
  fi
  if [[ ! -s "${file}" ]]; then
    return 0
  fi
  local GLOBAL_TEST_OUTPUT_CONTENT=''
  local IFS=''
  read -rd '' GLOBAL_TEST_OUTPUT_CONTENT <"${file}" || :

  if declare -F test::scrubOutput &>/dev/null; then
    test::scrubOutput
  fi

  if [[ -n ${blockTitle} ]]; then
    # shellcheck disable=SC2016
    printf '%s\n\n```text\n%s\n```\n\n' "${blockTitle}" "${GLOBAL_TEST_OUTPUT_CONTENT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
  else
    # shellcheck disable=SC2016
    printf '```text\n%s\n```\n\n' "${GLOBAL_TEST_OUTPUT_CONTENT%$'\n'}" >>"${GLOBAL_TEST_REPORT_FILE}"
  fi

  # reset the file content (must close/open the file descriptor in between)
  exec {GLOBAL_TEST_FD_NUMBER}>&-
  : >"${file}"
  eval "exec ${GLOBAL_TEST_FD_NUMBER}>>\"${file}\""
  if ((GLOBAL_TEST_FD_NUMBER == 2)); then
    test::fixStdErrFileDescriptors
  fi
}

# ## test::fixStdErrFileDescriptors (private)
#
# Call this function after changing stderr to ensure that the other file descriptors
# pointing to stderr are correctly set.
#
# > When we change fd2, we also need to redeclare fd that point to fd2.
# > Even if they seem to point to the correct file (using ls -l /proc/PID/fd), writing to them
# > will not write to the correct file.
function test::fixStdErrFileDescriptors() {
  # since we changed fd2, we also need to redeclare fd that point to fd2
  # even if it seems to point to the correct file (using ls -l /proc/PID/fd)
  exec {GLOBAL_FD_ORIGINAL_STDERR}>&-
  exec {GLOBAL_FD_ORIGINAL_STDERR}>&2
  exec {GLOBAL_FD_LOG}>&-
  exec {GLOBAL_FD_LOG}>&2
  # shellcheck disable=SC2034
  GLOBAL_FD_TUI="${GLOBAL_FD_ORIGINAL_STDERR}"
}

# ## test::scrubOutput
#
# This function can be defined to modify the flushed text (both stdout and stderr) before adding it to the report.
#
# Scrubbers are required when we need to convert non-deterministic text to something stable so that
# tests are reproducible.
#
# The text to transform is in the global variable `GLOBAL_TEST_OUTPUT_CONTENT`.
# You can also use `GLOBAL_TEST_FD_NUMBER` to know which file descriptor is being flushed (1 for stdout, 2 for stderr).
#
# Returns:
#
# - `GLOBAL_TEST_OUTPUT_CONTENT`: The modified text.
#
# > You can define this function directly in the test script, or in a test hook if
# > you need it to be available for multiple tests.
# > Note however that this function can be called very often, so it should be optimized.

# ## test::scrubReplyVars
#
# This function can be defined to modify the REPLY variables before printing them in the report.
#
# Scrubbers are required when we need to convert non-deterministic text to something stable so that
# tests are reproducible.
#
# > You can define this function directly in the test script, or in a test hook if
# > you need it to be available for multiple tests.
# > Note however that this function can be called very often, so it should be optimized.

# ## test::flush
#
# Call this function to flush the standard and error outputs to the report file.
# They will be added as code blocks in the report file (one for the standard
# output, one for the standard error).
#
# ```bash
# test::flush
# ```
function test::flush() {
  test_flushFdToCodeBlock 1 "**Standard output**:"
  test_flushFdToCodeBlock 2 "**Error output**:"
}

# ## test::flushStdout
#
# Call this function to flush the standard output to the report file.
# It will be added as a code block in the report file.
#
# - ${blockTitle} _as string_:
#       (optional) Add a 'title' to the code block (`**title**:` before the code block).
#       (defaults to "")
#
# ```bash
# test::flushStdout
# ```
function test::flushStdout() {
  local \
    blockTitle="" \
    IFS=$' '
  eval "local a= ${*@Q}"
  test_flushFdToCodeBlock 1 "${blockTitle}"
}

# ## test::flushStderr
#
# Call this function to flush the standard error to the report file.
# It will be added as a code block in the report file.
#
# - ${blockTitle} _as string_:
#       (optional) Add a 'title' to the code block (`**title**:` before the code block).
#       (defaults to "")
#
# ```bash
# test::flushStderr
# ```
function test::flushStderr() {
  local \
    blockTitle="" \
    IFS=$' '
  eval "local a= ${*@Q}"
  test_flushFdToCodeBlock 2 "${blockTitle}"
}

# ## test::fail
#
# Call this function to log a message and exit with the status 142, which
# indicates to the self test command that the test failed and that we know the
# reason (it is a bad implementation of the test itself).
#
# - $@: **message** _as string_:
#       The message to log.
#
# ```bash
# test::fail "This is a failure message with a clear reason."
# ```
function test::fail() {
  GLOBAL_MOCK_STACK_FUNCTION_NAMES=("${FUNCNAME[@]}")
  GLOBAL_MOCK_STACK_SOURCE_FILES=("${BASH_SOURCE[@]}")
  GLOBAL_MOCK_STACK_LINE_NUMBERS=("${BASH_LINENO[@]}")
  declare -p GLOBAL_MOCK_STACK_FUNCTION_NAMES GLOBAL_MOCK_STACK_SOURCE_FILES GLOBAL_MOCK_STACK_LINE_NUMBERS >>"${GLOBAL_TEST_STACK_FILE}"

  test::log "$@"

  # shellcheck disable=SC2034
  core::exit "${GLOBAL_TEST_IMPLEMENTATION_FAILURE_STATUS}" silent=true
}

# ## test::setTerminalInputs
#
# Replaces the functions `terminal::waitForChar` and `terminal::waitForKeyPress` by custom functions
# that return keys defined as an input of this function.
#
# - $@: **keys** _as string_:
#       The keys to return when `terminal::waitForChar` or `terminal::waitForKeyPress` are called.
#       Keys are consumed in the order they are provided.
#
# ```bash
# test::setTerminalInputs "a" "b" "c"
# ```
# shellcheck disable=SC2317
function test::setTerminalInputs() {
  if [[ ! -v TEST_TERMINAL_INPUTS ]]; then
    # override the default functions
    function terminal::waitForChar() {
      if ((TEST_TERMINAL_INPUTS_INDEX >= ${#TEST_TERMINAL_INPUTS[@]})); then
        test::fail "No more terminal inputs available, but terminal::waitForChar was called."
      fi
      LAST_KEY_PRESSED="${TEST_TERMINAL_INPUTS[${TEST_TERMINAL_INPUTS_INDEX}]}"
      TEST_TERMINAL_INPUTS_INDEX=$((TEST_TERMINAL_INPUTS_INDEX + 1))
    }
    function terminal::waitForKeyPress() {
      if ((TEST_TERMINAL_INPUTS_INDEX >= ${#TEST_TERMINAL_INPUTS[@]})); then
        test::fail "No more terminal inputs available, but terminal::waitForKeyPress was called."
      fi
      # shellcheck disable=SC2034
      LAST_KEY_PRESSED="${TEST_TERMINAL_INPUTS[${TEST_TERMINAL_INPUTS_INDEX}]}"
      TEST_TERMINAL_INPUTS_INDEX=$((TEST_TERMINAL_INPUTS_INDEX + 1))
    }
  fi
  TEST_TERMINAL_INPUTS_INDEX=0
  TEST_TERMINAL_INPUTS=("${@}")
}

# ## test::setTestCallStack (private)
#
# This function is used to set the call stack for the tests.
# It is used to ensure that the call stack is consistent with the tests.
#
# Call `test::unsetTestCallStack` to unset the call stack after the tests.
#
# ```bash
# test::setTestCallStack
# ```
function test::setTestCallStack() {
  # fix output for printCallStack
  GLOBAL_MOCK_STACK_FUNCTION_NAMES=(log::getCallStack log::printCallStack log::error myCmd::subFunction myCmd::function)
  GLOBAL_MOCK_STACK_SOURCE_FILES=("core" "core" "core" "/path/to/subFunction.sh" "/path/to/function.sh")
  GLOBAL_MOCK_STACK_LINE_NUMBERS=(10 100 200 300)
}

# ## test::unsetTestCallStack (private)
#
# This function is used to unset the call stack for the tests.
#
# ```bash
# test::unsetTestCallStack
# ```
function test::unsetTestCallStack() {
  unset -v GLOBAL_MOCK_STACK_FUNCTION_NAMES GLOBAL_MOCK_STACK_SOURCE_FILES GLOBAL_MOCK_STACK_LINE_NUMBERS
}

# ## test::setupBashForConsistency
#
# This function is used to set up the Bash environment for maximum consistency during testing.
# It will override important dynamic bash variables to have more static results.
#
# ```bash
# test::setupBashForConsistency
# ```
# shellcheck disable=SC2034
function test::setupBashForConsistency() {
  # default IFS
  IFS=' '$'\t'$'\n'
  unset EPOCHSECONDS
  export EPOCHSECONDS=548902800
  if declare -F profiler::pause &>/dev/null; then
    profiler::pause
  fi
  # because the profiler uses EPOCHREALTIME in PS4, we need to pause it first
  unset EPOCHREALTIME
  export EPOCHREALTIME=548902800.000000
  if declare -F profiler::resume &>/dev/null; then
    profiler::resume
  fi
  GLOBAL_TEST_ORIGINAL_BASHPID="${BASHPID}"
  unset BASHPID
  export BASHPID=1234
  unset SECONDS
  export SECONDS=0
  GLOBAL_TEST_ORIGINAL_OSTYPE="${OSTYPE}"
  export OSTYPE=linux-gnu

  test::setTestCallStack
}