#!/usr/bin/env bash
# shellcheck disable=SC2034
# Title:          libraries.d/main
# Description:    this script contains the main code for our bash programs and
#                 it should be sourced, not called directly
# Author:         github.com/jcaillon

# check the bash version (and that we are running in bash), make it POSIX compliant
# shellcheck disable=SC2292
# shellcheck disable=SC2086
# shellcheck disable=SC2128
if [ ${BASH_VERSINFO:-0} -lt 5 ]; then
  printf '%s\n' "❌ Bash 5 or higher is required to run valet."
  exit 1
fi

# we check for this variable to know if this script has already been included
if [[ ${GLOBAL_MAIN_INCLUDED:-} == "true" ]]; then
  log::warning "The main script has already been included, skipping."
  return 0
fi
GLOBAL_MAIN_INCLUDED=true

# Set GLOBAL_INSTALLATION_DIRECTORY if not already set (case where core was included outside valet)
if [[ ! -v GLOBAL_INSTALLATION_DIRECTORY ]]; then
  GLOBAL_INSTALLATION_DIRECTORY="${BASH_SOURCE[0]}"
  if [[ "${GLOBAL_INSTALLATION_DIRECTORY}" != /* ]]; then
    # resolve relative path
    if pushd "${GLOBAL_INSTALLATION_DIRECTORY%/*}" &>/dev/null; then
      GLOBAL_INSTALLATION_DIRECTORY="${PWD}"
      popd 1>/dev/null || exit 1
    else GLOBAL_INSTALLATION_DIRECTORY="${PWD}"; fi
  else
    GLOBAL_INSTALLATION_DIRECTORY="${GLOBAL_INSTALLATION_DIRECTORY%/*}" # strip filename
  fi
  GLOBAL_INSTALLATION_DIRECTORY="${GLOBAL_INSTALLATION_DIRECTORY%/*}" # strip libraries.d directory
fi

# Include core functions
builtin source "${GLOBAL_INSTALLATION_DIRECTORY}/libraries.d/core"
builtin source "${GLOBAL_INSTALLATION_DIRECTORY}/libraries.d/core-lib"
builtin source "${GLOBAL_INSTALLATION_DIRECTORY}/libraries.d/core-traps"

# set different options for the shell, to have consistent behavior on all machines
core::setShellOptions

declare -g \
  GLOBAL_PROGRAM_STARTED_AT_SECOND="${EPOCHREALTIME%%[.,]*}" \
  GLOBAL_PROGRAM_STARTED_AT_MICROSECOND="${EPOCHREALTIME##*[.,]}" \
  GLOBAL_PROGRAM_STARTED_AT_DIRECTORY="${PWD}" \
  GLOBAL_PROGRAM_MAIN_PID="${BASHPID}" \
  GLOBAL_CONFIG_FILE="${VALET_CONFIG_FILE:-"${VALET_CONFIG_DIRECTORY:-${XDG_CONFIG_HOME:-${HOME}/.config}/valet}/config"}" \
  GLOBAL_STARTUP_FILE="${VALET_STARTUP_FILE:-"${VALET_CONFIG_DIRECTORY:-${XDG_CONFIG_HOME:-${HOME}/.config}/valet}/startup"}"

# To ensure we print errors even before log::init is called
declare -g \
  GLOBAL_LOG_PRINT_STATEMENT_FORMATTED_LOG="printf \"%-8s %s\n\" \"\${level:-}\" \"\${messageToLog}\" 1>&2" \
  GLOBAL_LOG_PRINT_STATEMENT_STANDARD="printf \"%s\" \"\${rawStringToPrintInLog}\" 1>&2" \
  GLOBAL_LOG_WRAP_PADDING='' \
  GLOBAL_LOG_DISABLE_WRAP=true

# start the profiler
if [[ ${VALET_CONFIG_STARTUP_PROFILING:-} == "true" ]]; then
  # profiler will need temp files
  fs::setupTempFileGlobalVariable
  # shellcheck disable=SC1091
  source profiler
  printf -v _PROFILER_FILE_NAME "profiler-%(%FT%H-%M-%S%z)T--PID_%06d.log" "${EPOCHSECONDS}" "${BASHPID}"
  core::getUserStateDirectory
  profiler::enable "${VALET_CONFIG_STARTUP_PROFILING_FILE:-"${REPLY}/logs/${_PROFILER_FILE_NAME}"}"
fi

# save the original stdin/stderr fd
exec {GLOBAL_FD_ORIGINAL_STDIN}<&0
exec {GLOBAL_FD_ORIGINAL_STDERR}>&2

# fd where we write the TUI
GLOBAL_FD_TUI="${GLOBAL_FD_ORIGINAL_STDERR}"

# set the signal traps
trap::register

# init the array containing background processes IDs
declare -g -A GLOBAL_BACKGROUND_PROCESSES=() GLOBAL_BACKGROUND_PROCESSES_LOGS=()

# Source the valet configuration from the user config dir
if [[ -f ${GLOBAL_CONFIG_FILE} ]]; then
  GLOBAL_ON_EXIT_MESSAGE="Error sourcing the configuration file ⌜${GLOBAL_CONFIG_FILE}⌝."$'\n'"Check the file for error and try again, or delete the file to discard your config."
  builtin source "${GLOBAL_CONFIG_FILE}"
  unset -v GLOBAL_ON_EXIT_MESSAGE
fi

# Source the env script
if [[ ${VALET_CONFIG_DOT_ENV_SCRIPT:-} != "false" && -f ${VALET_CONFIG_DOT_ENV_SCRIPT:-.env} ]]; then
  GLOBAL_ON_EXIT_MESSAGE="Error sourcing the env file ⌜${VALET_CONFIG_DOT_ENV_SCRIPT:-.env}⌝."$'\n'"Check the file for error and try again, or delete the file to discard your config."
  builtin source "${VALET_CONFIG_DOT_ENV_SCRIPT:-.env}"
  unset -v GLOBAL_ON_EXIT_MESSAGE
fi

# Setup global variables that will be used for temporary files and folders.
fs::setupTempFileGlobalVariable

core::resetIncludedFiles

# Since we use _OPTION_* variables to pass optional options to functions, we want to make sure
# to not create collisions so we unset them here.
# shellcheck disable=SC2086
unset -v ${!_OPTION_*}

# determine if we support colors (can be overridden by the user with VALET_CONFIG_ENABLE_COLORS)
if [[ -v NO_COLOR ]]; then
  VALET_CONFIG_ENABLE_COLORS="${VALET_CONFIG_ENABLE_COLORS:-false}"
else
  case "${TERM:-}" in
  xterm-color | xterm-16color | xterm-88color | xterm-256color | linux | rxvt-16color | konsole-16color) VALET_CONFIG_ENABLE_COLORS="${VALET_CONFIG_ENABLE_COLORS:-true}" ;;
  *) if [[ -n "${COLORTERM:-}" ]]; then VALET_CONFIG_ENABLE_COLORS="${VALET_CONFIG_ENABLE_COLORS:-true}"; fi ;;
  esac
fi

# set the styles and esc codes
styles::init

# Export terminal size on window resize if we are in interactive mode.
if [[ -t ${GLOBAL_FD_TUI} ]]; then
  terminal::getTerminalSize
  if [[ ${GLOBAL_SOURCED_FOR_PROMPT:-} != "true" ]]; then
    # hide the cursor (we restore on exit)
    printf "%s" "${ESC__CURSOR_HIDE}" 1>&"${GLOBAL_FD_TUI}"
  fi
else
  declare -g \
    GLOBAL_COLUMNS="${VALET_CONFIG_DEFAULT_COLUMNS:-120}" \
    GLOBAL_LINES="${VALET_CONFIG_DEFAULT_LINES:-30}"
fi

# Initialize the log system
log::init

# Parsing the options from environment variables
if [[ -v VALET_LOG_LEVEL ]]; then
  log::setLevel "${VALET_LOG_LEVEL}"
fi
if [[ ${VALET_VERBOSE:-} == "true" ]]; then
  log::setLevel debug
fi
if [[ ${VALET_VERY_VERBOSE:-} == "true" ]]; then
  log::setLevel trace
fi
if [[ -v DEBUG ]]; then
  log::setLevel debug
  VALET_PROFILING=true
fi

# Source the startup file
if [[ -f ${GLOBAL_STARTUP_FILE} ]]; then
  GLOBAL_ON_EXIT_MESSAGE="Error sourcing the startup file ⌜${GLOBAL_STARTUP_FILE}⌝."$'\n'"Check the file for error and try again, or delete the file to discard your config."
  builtin source "${GLOBAL_STARTUP_FILE}"
  unset -v GLOBAL_ON_EXIT_MESSAGE
fi

# ## main::parseProgramArguments (private)
#
# Parses the main arguments of the valet command.
#
# - $@: arguments _as any_:
#       The arguments to parse.
#
# ```bash
# main::parseProgramArguments "$@"
# ```
function main::parseProgramArguments() {
  # shellcheck disable=SC1091
  source command
  command::parseProgramArguments "$@"
}
