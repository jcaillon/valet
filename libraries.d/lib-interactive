#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-ansi-codes
source ansi-codes
# shellcheck source=lib-tui
source tui

#===============================================================
# >>> Interactive prompts
#===============================================================

# ##  interactive::askForConfirmation
#
# Ask the user to press the button to continue.
#
# - $1: **prompt** _as string_:
#       the prompt to display
#
# Returns:
#
# - $?:
#   - 0 if the user pressed enter
#   - 1 otherwise
#
# ```bash
# interactive::askForConfirmation "Press enter to continue."
# ```
function interactive::askForConfirmation() {
  interactive::displayQuestion "${1}"
  interactive::askForConfirmationRaw
  return 0
}

# ## interactive::askForConfirmationRaw
#
# Ask the user to press the button to continue.
#
# This raw version does not display the prompt or the answer.
#
# Returns:
#
# - $?:
#   - 0 if the user pressed enter
#   - 1 otherwise
#
# ```bash
# interactive::askForConfirmationRaw
# ```
function interactive::askForConfirmationRaw() {
  # colors
  local styleActiveButton
  if [[ "${VALET_CONFIG_ENABLE_COLORS:-}" == "true" ]]; then
    styleActiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_ACTIVE_BUTTON:-${AC__FG_MAGENTA}}"
  else
    styleActiveButton="${AC__TEXT_INVERSE}"
  fi

  tui::createSpace 2

  # print the current state (then move to column 1 to be ready to rewrite)
  printf '%s%s%s' \
    "${AC__CURSOR_HIDE}${styleActiveButton}" \
    "   (O)K   " \
    "${AC__TEXT_RESET}${AC__CURSOR_MOVE__}1${__AC__COLUMN}"

  while true; do
    # wait and handle key press
    if tui::waitForChar -t 1; then
      case ${LAST_KEY_PRESSED} in
      $'\n' | ' ' | o)
        break
        ;;
      ESC)
        core::fail "Interactive session cancelled."
        ;;
      esac
    fi

    # break if fd 0 is closed or does not refer to a terminal.
    if [[ ! -t 0 ]]; then break; fi
  done

  printf '%s' "${AC__ERASE_CHARS_RIGHT}${AC__CURSOR_SHOW}"

  return 0
}

# ## interactive::promptYesNo
#
# Ask the user to yes or no.
#
# - The user can switch between the two options with the arrow keys or space.
# - The user can validate the choice with the enter key.
# - The user can also validate immediately with the y or n key.
#
# Dialog boxes are displayed for the question and answer.
#
# - $1: **prompt** _as string_:
#       the prompt to display
# - $2: default _as bool_:
#       (optional) the default value to select
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0 if the user answered yes
#   - 1 otherwise
# - ${RETURNED_VALUE}: true or false.
#
# ```bash
# if interactive::promptYesNo "Do you want to continue?"; then echo "Yes."; else echo "No."; fi
# ```
function interactive::promptYesNo() {
  interactive::displayQuestion "${1}"
  interactive::promptYesNoRaw "${2:-true}"

  if [[ ${RETURNED_VALUE} == "true" ]]; then
    interactive::displayAnswer "Yes."
    RETURNED_VALUE=true
    return 0
  fi

  interactive::displayAnswer "No."
  RETURNED_VALUE=false
  return 1
}

# ## interactive::promptYesNoRaw
#
# Ask the user to yes or no.
#
# - The user can switch between the two options with the arrow keys or space.
# - The user can validate the choice with the enter key.
# - The user can also validate immediately with the y or n key.
#
# This raw version does not display the prompt or the answer.
#
# - $1: default _as bool_:
#       (optional) the default value to select
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0 if the user answered yes
#   - 1 otherwise
# - ${RETURNED_VALUE}: true or false.
#
# ```bash
# interactive::promptYesNoRaw "Do you want to continue?" && local answer="${RETURNED_VALUE}"
# ```
function interactive::promptYesNoRaw() {
  local state=${1:-true}

  # colors
  local styleActiveButton
  local styleInactiveButton
  if [[ "${VALET_CONFIG_ENABLE_COLORS:-}" == "true" ]]; then
    styleActiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_ACTIVE_BUTTON:-${AC__FG_MAGENTA}}"
    styleInactiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_INACTIVE_BUTTON:-}"
  else
    styleActiveButton="${AC__TEXT_INVERSE}"
    styleInactiveButton=""
  fi

  tui::createSpace 2

  printf '%s' "${AC__CURSOR_HIDE}"

  local yesColor noColor
  while true; do
    if [[ ${state} == "true" ]]; then
      yesColor="${styleActiveButton}"
      noColor="${styleInactiveButton}"
    else
      yesColor="${styleInactiveButton}"
      noColor="${styleActiveButton}"
    fi

    # print the current state (then move to column 1 to be ready to rewrite)
    printf '%s%s%s   %s%s%s' \
      "${yesColor}" \
      "   (Y)ES   " \
      "${AC__TEXT_RESET}" \
      "${noColor}" \
      "   (N)O   " \
      "${AC__TEXT_RESET}${AC__CURSOR_MOVE__}1${__AC__COLUMN}"

    # wait and handle key press
    if tui::waitForChar -t 1; then
      case ${LAST_KEY_PRESSED} in
      $'\n' | ' ')
        break
        ;;
      y | Y)
        state=true
        break
        ;;
      n | N)
        state=false
        break
        ;;
      UP | LEFT | RIGHT | DOWN)
        if [[ ${state} == "true" ]]; then state=false; else state=true; fi
        ;;
      ESC)
        core::fail "Interactive session cancelled."
        ;;
      esac
    fi

    # break if fd 0 is closed or does not refer to a terminal.
    if [[ ! -t 0 ]]; then break; fi
  done

  printf '%s' "${AC__ERASE_CHARS_RIGHT}${AC__CURSOR_SHOW}"

  if [[ ${state} == "true" ]]; then
    RETURNED_VALUE=${state}
    return 0
  fi

  RETURNED_VALUE=${state}
  return 1
}

# ## interactive::displayQuestion
#
# Displays a question to the user.
#
# The text is wrapped and put inside a box like so:
#
# ```text
#    ┌────────────────────────────────┐
# ░──┤ Is this an important question? │
#    └────────────────────────────────┘
# ```
#
# - $1: **prompt** _as string_:
#       the prompt to display
# - $2: max width _as int_:
#       (optional) the maximum width of text in the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayPrompt "Do you want to continue?"
# ```
function interactive::displayQuestion() {
  interactive::displayDialogBox "system" "${1}" "${2:-}"
}

# ## interactive::displayAnswer
#
# Displays an answer to a previous question.
#
# The text is wrapped and put inside a box like so:
#
# ```text
#     ┌─────┐
#     │ No. ├──░
#     └─────┘
# ```
#
# - $1: **answer** _as string_:
#       the answer to display
# - $2: max width _as int_:
#       (optional) the maximum width of the text in the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayAnswer "My answer."
# ```
function interactive::displayAnswer() {
  interactive::displayDialogBox "user" "${1}" "${2:-}"
}

# ## interactive::displayDialogBox
#
# Displays a dialog box with a speaker and a text.
#
# - $1: **speaker** _as string_:
#       the speaker (system or user)
# - $2: **text** _as string_:
#       the text to display
# - $3: max width _as int_:
#       (optional) the maximum width of the text in the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayDialogBox "system" "This is a system message."
# ```
interactive::displayDialogBox() {
  local speaker="${1}"
  local text="${2}"
  local requiredMaxTextWidth="${3:-${GLOBAL_COLUMNS}}"

  local -i maxTextWidth=$((GLOBAL_COLUMNS - 7))
  if (( requiredMaxTextWidth >= maxTextWidth )); then
    requiredMaxTextWidth=${maxTextWidth}
  fi
  local -i textWidth=${requiredMaxTextWidth}
  if (( ${#text} < textWidth )); then
    textWidth=${#text}
  fi

  string::wrapWords "${text}" "${textWidth}"
  local wrappedText="${RETURNED_VALUE}"

  local finalString line sideString
  local -i lineNumber=0

  local -i maxLineLength=0
  while read -r line; do
    if (( ${#line} > maxLineLength )); then
      maxLineLength=${#line}
    fi
  done <<<"${wrappedText}"
  textWidth=${maxLineLength}

  if [[ ${speaker} == "user" ]]; then

    local -i startColumn=$((GLOBAL_COLUMNS - textWidth - 7))
    startColumn=$((startColumn >= 0 ? startColumn : 0))
    startColumn=$((startColumn <= 8 ? startColumn : 8))
    startColumn+=1

    finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}┌─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┐${AC__TEXT_RESET}"$'\n'
    while read -r line; do
      if (( lineNumber == 0 )); then
        sideString="├──░"
      else
        sideString="│"
      fi
      finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}│${AC__TEXT_RESET} ${line} ${AC__CURSOR_MOVE__}$((textWidth + 3 + startColumn))${__AC__COLUMN}${AC__TEXT_FAINT}${sideString}${AC__TEXT_RESET}"$'\n'
      lineNumber+=1
    done <<<"${wrappedText}"
    finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}└─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┘${AC__TEXT_RESET}"$'\n'

  elif [[ ${speaker} == "system" ]]; then

    finalString+="${AC__TEXT_FAINT}   ┌─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┐${AC__TEXT_RESET}"$'\n'
    while read -r line; do
      if (( lineNumber == 0 )); then
        sideString="░──┤"
      else
        sideString="   │"
      fi
      finalString+="${AC__TEXT_FAINT}${sideString}${AC__TEXT_RESET} ${line} ${AC__CURSOR_MOVE__}$((textWidth + 7))${__AC__COLUMN}${AC__TEXT_FAINT}│${AC__TEXT_RESET}"$'\n'
      lineNumber+=1
    done <<<"${wrappedText}"
    finalString+="${AC__TEXT_FAINT}   └─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┘${AC__TEXT_RESET}"$'\n'

  fi

  printf '%s' "${finalString}"
}
