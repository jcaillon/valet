#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-bash
source bash
# shellcheck source=lib-fs
source fs

#===============================================================
# >>> Interactive utilities
#===============================================================

# ## terminal::createSpace
#
# This function creates empty lines from the current cursor position.
# Then it moves back to its original line (at the column 1).
# The current cursor line counts, meaning that `terminal::createSpace 1` will
# not do anything but clear the current line.
#
# This effectively creates a space in the terminal (scroll up if we are at the bottom).
# It does not create more space than the number of lines in the terminal.
#
# - $1: **number of lines** _as int_:
#       the number of lines to create
#
# ```bash
# terminal::createSpace 5
# ```
function terminal::createSpace() {
  local -i nbLines="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  nbLines=$((nbLines > GLOBAL_LINES ? GLOBAL_LINES : nbLines))
  if ((nbLines <= 1)); then
    printf '%s' "${ESC__CURSOR_HIDE}${ESC__CURSOR_MOVE__}1${__ESC__COLUMN}${ESC__ERASE_LINE}${ESC__CURSOR_SHOW}" 1>&"${GLOBAL_FD_TUI}"
    return 0
  fi

  nbLines=$((nbLines - 1))
  printf -v scrollInstruction "%${nbLines}s" " "
  scrollInstruction="${scrollInstruction// /$'\n'}"

  printf '%s' "${ESC__CURSOR_HIDE}${scrollInstruction}${ESC__CURSOR_MOVE__}${nbLines}${__ESC__START_OF_LINE_UP}${ESC__ERASE_LINES_BELOW}${ESC__CURSOR_SHOW}" 1>&"${GLOBAL_FD_TUI}"
}

# ## terminal::getCursorPosition
#
# Get the current cursor position.
#
# Returns:
#
# - `GLOBAL_CURSOR_LINE`: the line number
# - `GLOBAL_CURSOR_COLUMN`: the column number
#
# ```bash
# terminal::getCursorPosition
# ```
function terminal::getCursorPosition() {
  local IFS
  # we request the position
  printf "%s" "${ESC__REQUEST_CURSOR_POSITION}" 1>&"${GLOBAL_FD_TUI}"
  # then read \e[line;colR
  # shellcheck disable=SC2034
  IFS=';' read -d 'R' -sr GLOBAL_CURSOR_LINE GLOBAL_CURSOR_COLUMN || :
  GLOBAL_CURSOR_LINE="${GLOBAL_CURSOR_LINE#$'\e['}"
}

# ## terminal::switchToFullScreen
#
# Call this function to start an interactive session in full screen mode.
# This function will switch to the alternate screen, hide the cursor and clear the screen.
#
# You should call terminal::switchBackFromFullScreen at the end of the interactive session.
#
# ```bash
# terminal::switchToFullScreen
# ```
function terminal::switchToFullScreen() {
  GLOBAL_TERMINAL_FULL_SCREEN_MODE_ENABLED=true

  # switch to the alternate screen, hide the cursor and clear the screen
  printf '%s' "${ESC__ENABLE_ALTERNATE_BUFFER_SCREEN}${ESC__CURSOR_HIDE}${ESC__ERASE_SCREEN}" 1>&"${GLOBAL_FD_TUI}"
}

# ## terminal::switchBackFromFullScreen
#
# Call this function to switch back from the full screen mode.
#
# - This function will restore the terminal state and show the cursor.
# - It will also restore the key echoing.
#
# ```bash
# terminal::switchBackFromFullScreen
# ```
function terminal::switchBackFromFullScreen() {
  # shellcheck disable=SC2034
  GLOBAL_TERMINAL_FULL_SCREEN_MODE_ENABLED=false

  # restore the terminal state
  printf '%s' "${ESC__ERASE_SCREEN}${ESC__TEXT_RESET}${ESC__DISABLE_ALTERNATE_BUFFER_SCREEN}" 1>&"${GLOBAL_FD_TUI}"
}

# ## terminal::setRawMode
#
# Put the terminal in "raw" mode.
# Set options to enable a satisfying and consistent behavior for the GNU readline library.
# Call `terminal::restoreSettings` to restore the original settings.
#
# ```bash
# terminal::setRawMode
# ```
function terminal::setRawMode() {
  if [[ ${GLOBAL_TERMINAL_RAW_MODE_ENABLED:-} == "true" ]]; then
    return 0
  fi
  if [[ ! -t ${GLOBAL_FD_ORIGINAL_STDIN} && ${GLOBAL_TEST_FORCE_FD_OPEN:-} != "true" ]]; then
    core::fail "stdin is not a terminal, cannot reset mode."
  fi
  if [[ -z ${GLOBAL_STTY_SAVED_CONFIG:-} ]]; then
    terminal::saveSettings
  fi
  # we try to set specific settings and if it fails, we just set raw mode
  {
    stty -icrnl -inlcr -ixon -ixoff \
      nl0 cr0 tab0 ff0 -onlret \
      -icanon -echo -echok -echonl -echoe -echoke -ctlecho -tostop \
      erase ^B werase ^W \
      min 1 time 0 ||
      stty raw -echo || core::fail "Failed to set the terminal in raw mode, check stty version."
  } <&"${GLOBAL_FD_ORIGINAL_STDIN:-0}"
  GLOBAL_TERMINAL_RAW_MODE_ENABLED=true
}

# ## terminal::saveSettings
#
# Save the current terminal options (`stty -g`) so they can be restored later.
# Call `terminal::restoreSettings` to restore the original settings.
#
# ```bash
# terminal::saveSettings
# ```
function terminal::saveSettings() {
  if [[ ! -t ${GLOBAL_FD_ORIGINAL_STDIN} && ${GLOBAL_TEST_FORCE_FD_OPEN:-} != "true" ]]; then
    log::debug "stdin is not a terminal, cannot save settings."
    return 0
  fi
  if [[ -z ${GLOBAL_STTY_SAVED_CONFIG:-} ]]; then
    if stty -g <&"${GLOBAL_FD_ORIGINAL_STDIN:-0}" &>"${GLOBAL_TEMPORARY_STDOUT_FILE}"; then
      IFS='' read -rd '' REPLY <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || :
    else
      core::fail "Unable to get the current terminal configuration. Please make sure that ⌜stty⌝ is available in your PATH."
    fi
    GLOBAL_STTY_SAVED_CONFIG="${REPLY%%$'\n'}"
    log::debug "Saved terminal stty initial settings: ${GLOBAL_STTY_SAVED_CONFIG}."
  fi
}

# ## terminal::restoreSettings
#
# Restore the terminal options to their original state.
# Should be called after `terminal::setRawMode`.
#
# ```bash
# terminal::restoreSettings
# ```
#
# > Note that the bash read builtin will restore stty state as it was before entering.
# > So you want to call this after all read has been finished (particularly, you want to kill
# > any background process that is reading inputs before trying to restore these settings).
# shellcheck disable=SC2120
function terminal::restoreSettings() {
  if [[ ${GLOBAL_TERMINAL_RAW_MODE_ENABLED:-} != "true" || ! -v GLOBAL_STTY_SAVED_CONFIG || ${BASH_SUBSHELL} -ne 0 ]]; then
    return 0
  fi
  if [[ ! -t ${GLOBAL_FD_ORIGINAL_STDIN} && ${GLOBAL_TEST_FORCE_FD_OPEN:-} != "true" ]]; then
    core::fail "stdin is not a terminal, cannot restore settings."
  fi
  stty "${GLOBAL_STTY_SAVED_CONFIG}" <&"${GLOBAL_FD_ORIGINAL_STDIN:-}" 2>&"${GLOBAL_FD_LOG}" || log::warning "Failed to restore the terminal settings, check stty version."
  log::debug "Restored terminal settings using: stty ${GLOBAL_STTY_SAVED_CONFIG}."
  unset -v GLOBAL_TERMINAL_RAW_MODE_ENABLED
}

# ## terminal::rerouteLogs
#
# Reroute the logs to a temporary file.
# The logs will be displayed when calling `terminal::restoreLogs`
#
# ```bash
# terminal::rerouteLogs
# ```
function terminal::rerouteLogs() {
  if [[ ${GLOBAL_LOG_REROUTED_TO_FILE_ENABLED:-} == "true" ]]; then
    return 0
  fi
  if [[ ! -v _TUI_LOG_FILE ]]; then
    fs::createTempFile pathOnly=true
    _TUI_LOG_FILE="${REPLY}"
  fi

  log::init logFileDescriptor="${_TUI_LOG_FILE}"
  GLOBAL_LOG_REROUTED_TO_FILE_ENABLED=true
}

# ## terminal::restoreLogs
#
# Restore the logs to their original state.
# Should be called after `terminal::rerouteLogs` and at the end of an interactive session.
#
# ```bash
# terminal::restoreLogs
# ```
function terminal::restoreLogs() {
  if [[ ${GLOBAL_LOG_REROUTED_TO_FILE_ENABLED:-} != "true" ]]; then
    return 0
  fi
  log::init

  # display the accumulated logs
  if [[ -s ${_TUI_LOG_FILE} ]]; then
    fs::readFile "${_TUI_LOG_FILE}"
    log::printRaw REPLY
  fi
  unset -v GLOBAL_LOG_REROUTED_TO_FILE_ENABLED
}

# ## terminal::setInterruptTrap (private)
#
#TODO: delete, useless now
# Set a trap to catch the interrupt signal (SIGINT).
# When the user presses Ctrl+C, the GLOBAL_SESSION_INTERRUPTED variable will be set to true.
#
# ```bash
# terminal::setInterruptTrap
# ```
function terminal::setInterruptTrap() {
  # shellcheck disable=SC2034
  GLOBAL_SESSION_INTERRUPTED=false
  if [[ -z ${_TERMINAL_ORIGINAL_INTERRUPT_TRAP:-} ]]; then
    # save the original traps so we can restore them later
    bash::getBuiltinOutput trap -p SIGINT SIGQUIT
    _TERMINAL_ORIGINAL_INTERRUPT_TRAP="${REPLY}"

    # interrupting sets GLOBAL_SESSION_INTERRUPTED to true
    trap 'GLOBAL_SESSION_INTERRUPTED=true;' SIGINT SIGQUIT
  fi
}

# ## terminal::restoreInterruptTrap
#
# Restore the original trap for the interrupt signal (SIGINT).
# To be called after terminal::setInterruptTrap.
#
# ```bash
# terminal::restoreInterruptTrap
# ```
function terminal::restoreInterruptTrap() {
  if [[ -n ${_TERMINAL_ORIGINAL_INTERRUPT_TRAP:-} ]]; then
    eval "${_TERMINAL_ORIGINAL_INTERRUPT_TRAP}"
    unset -v _TERMINAL_ORIGINAL_INTERRUPT_TRAP
  fi
}

# ## terminal::clearBox
#
# Clear a "box" in the terminal.
# Will return the cursor at the current position at the end (using GLOBAL_CURSOR_LINE and GLOBAL_CURSOR_COLUMN).
#
# - ${top} _as int_:
#       (optional) the top position of the box
#       (defaults to 1)
# - ${left} _as int_:
#       (optional) the left position of the box
#       (defaults to 1)
# - ${width} _as int_:
#       (optional) the width of the box
#       (defaults to "${GLOBAL_COLUMNS}")
# - ${height} _as int_:
#       (optional) the height of the box
#       (defaults to "${GLOBAL_LINES}")
#
# ```bash
# terminal::getCursorPosition
# terminal::clearBox top=1 left=1 width=10 height=5
# ```
function terminal::clearBox() {
  local \
    top=1 \
    left=1 \
    width="${GLOBAL_COLUMNS:-9999}" \
    height="${GLOBAL_LINES:-9999}" \
    IFS=$' '
  eval "local a= ${*@Q}"

  local toPrint="${ESC__CURSOR_HIDE}" lineNumber=0
  for ((lineNumber = top; lineNumber < top + height; lineNumber++)); do
    toPrint+="${ESC__CURSOR_MOVE__}${lineNumber};${left}${__ESC__TO}${ESC__ERASE__}${width}${__ECS__CHARS}"
  done

  printf '%s%s' "${toPrint}" "${ESC__CURSOR_MOVE__}${GLOBAL_CURSOR_LINE};${GLOBAL_CURSOR_COLUMN}${__ESC__TO}${ESC__CURSOR_SHOW}" 1>&"${GLOBAL_FD_TUI}"
}

# ## terminal::getBestAutocompleteBox
#
# This function returns the best position and size for an autocomplete box that would open
# at the given position.
#
# - The box will be placed below the current position if possible, but can be placed
#   above if there is not enough space below.
# - The box will be placed on the same column as the current position if possible, but can be placed
#   on the left side if there is not enough space on the right to display the full width of the box.
# - The box will have the desired height and width if possible, but will be reduced if there is
#   not enough space in the terminal.
# - The box will not be placed on the same line as the current position if notOnCurrentLine is set to true.
#   Otherwise it can use the current position line.
#
# - ${top} _as int_:
#       (optional) the current line of the cursor (1 based)
#       (defaults to 1)
# - ${left} _as int_:
#       (optional) the current column of the cursor (1 based)
#       (defaults to 1)
# - ${desiredHeight} _as int_:
#       (optional) the desired height of the box
#       (defaults to "${GLOBAL_LINES}")
# - ${desiredWidth} _as int_:
#       (optional) the desired width of the box
#       (defaults to "${GLOBAL_COLUMNS}")
# - ${maxHeight} _as int_:
#       (optional) the maximum height of the box
#       (defaults to "${GLOBAL_LINES}")
# - ${forceBelow} _as bool_:
#       (optional) force the box to be below the current position
#       (defaults to false)
# - ${notOnCurrentLine} _as bool_:
#       (optional) the box will not be placed on the same line as the current position
#       (defaults to true)
# - ${terminalHeight} _as int_:
#       (optional) the height of the terminal
#       (defaults to "${GLOBAL_LINES}")
# - ${terminalWidth} _as int_:
#       (optional) the width of the terminal
#       (defaults to "${GLOBAL_COLUMNS}")
#
# Returns:
#
# - ${REPLY}: the top position of the box (1 based)
# - ${REPLY2}: the left position of the box (1 based)
# - ${REPLY3}: the width of the box
# - ${REPLY4}: the height of the box
#
# ```bash
# terminal::getBestAutocompleteBox top=1 left=1 desiredHeight=10 desiredWidth=5
# ```
function terminal::getBestAutocompleteBox() {
  local \
    top=1 \
    left=1 \
    desiredWidth="${GLOBAL_COLUMNS:-9999}" \
    desiredHeight="${GLOBAL_LINES:-9999}" \
    maxHeight="${GLOBAL_LINES:-9999}" \
    forceBelow=false \
    notOnCurrentLine=true \
    terminalWidth="${GLOBAL_COLUMNS:-9999}" \
    terminalHeight="${GLOBAL_LINES:-9999}" \
    IFS=$' '
  eval "local a= ${*@Q}"

  local left top width height extraLine=1 below=true
  if [[ ${notOnCurrentLine} == "true" ]]; then
    extraLine=0
  fi

  local -i maxAvailableLines=$((terminalHeight - top + extraLine))
  if [[ ${forceBelow} != "true" ]]; then
    local maxAvailableLinesAbove=$((top - 1 + extraLine))
    if ((desiredHeight > maxAvailableLines && maxAvailableLinesAbove > maxAvailableLines)); then
      maxAvailableLines=${maxAvailableLinesAbove}
      below=false
    fi
  fi

  maxHeight=$((maxAvailableLines >= maxHeight ? maxHeight : maxAvailableLines))
  height=$((desiredHeight >= maxHeight ? maxHeight : desiredHeight))
  if [[ ${below} == "true" ]]; then
    top=$((top + 1 - extraLine))
  else
    top=$((top - height + extraLine))
  fi

  width=$((desiredWidth >= terminalWidth ? terminalWidth : desiredWidth))
  left=$((terminalWidth - left + 1 > width ? left : terminalWidth - width + 1))

  if ((width < 1)); then
    width=1
  fi
  if ((height < 0)); then
    height=0
  fi

  REPLY="${top}"
  REPLY2="${left}"
  # shellcheck disable=SC2034
  REPLY3="${width}"
  # shellcheck disable=SC2034
  REPLY4="${height}"
}

#===============================================================
# >>> Key press detection
#===============================================================

# ## terminal::testWaitForChar
#
# Wait for the user to send a character to stdin (i.e. wait for a key press)
# and prints the character that bash reads.
#
# Useful to test the `terminal::waitForChar` function and see the char sequence we
# get when pressing a key in a given terminal.
#
# See @terminal::waitForChar for more information.
#
# ```bash
# terminal::testWaitForChar
# ```
function terminal::testWaitForChar() {
  printf '%s\n' "Press any key to see the returned character (Press Q to quit).${ESC__CURSOR_HIDE}" 1>&"${GLOBAL_FD_TUI}"
  while true; do
    if terminal::waitForChar -t 1; then
      if [[ ${LAST_KEY_PRESSED} == "Q" || ${LAST_KEY_PRESSED} == "q" ]]; then
        break
      fi
      printf "%sYou pressed: ⌜%q⌝%s" "${ESC__ERASE_LINE}" "${LAST_KEY_PRESSED}" "${ESC__CURSOR_MOVE__}1${__ESC__COLUMN}" 1>&"${GLOBAL_FD_TUI}"
    fi
    if [[ ! -t ${GLOBAL_FD_TUI} ]]; then break; fi
  done
}

# ## terminal::waitForChar
#
# Wait for a user input (single char).
# You can pass additional parameters to the read command (e.g. to wait for a set amount of time).
#
# It uses the read builtin command. This will not detect all key combinations.
# The output will depend on the terminal used and the character sequences it sends on each key press.
#
# Some special keys are translated into more readable strings:
# UP, DOWN, RIGHT, LEFT, BACKSPACE, DEL, PAGE_UP, PAGE_DOWN, HOME, END, ESC, F1, ALT+?.
# However, this is not at all exhaustive and will depend on the terminal used.
# Use `terminal::waitForKeyPress` if you need to listen to special keys.
#
# This simple implementation does not rely on GNU readline and does not require terminal options
# to be set using `terminal::setRawMode`.
#
#
# - $@: **read parameters** _as any_:
#       additional parameters to pass to the read command
#
# Returns:
#
# - $?:
#   - 0 if a char was retrieved
#   - 1 otherwise
# - `LAST_KEY_PRESSED`: the last char (key) retrieved.
#
# ```bash
# terminal::waitForChar
# terminal::waitForChar -t 0.1
# ```
#
# > <https://en.wikipedia.org/wiki/ANSI_escape_code#Terminal_input_sequences>
function terminal::waitForChar() {
  LAST_KEY_PRESSED=""
  local IFS=''
  read "$@" -d '' -srN 1 LAST_KEY_PRESSED || :

  LAST_KEY_PRESSED="${PREVIOUS_KEY_PRESSED_EXTRA_CHARS:-}${LAST_KEY_PRESSED}"
  PREVIOUS_KEY_PRESSED_EXTRA_CHARS=""

  if [[ -z ${LAST_KEY_PRESSED} ]]; then
    return 1
  fi

  # special key detection, need to read more characters (up to 4 for F1-F12 keys)
  if [[ ${LAST_KEY_PRESSED} == $'\e'* ]]; then
    REPLY=""
    IFS='' read -t 0.01 -d '' -rsN 4 &>/dev/null || :

    # we might have several ESC which means we read too much
    local wholeChain="${LAST_KEY_PRESSED#$'\e'}${REPLY}"
    LAST_KEY_PRESSED=$'\e'"${wholeChain%%$'\e'*}"

    if [[ ${wholeChain} == *$'\e'* ]]; then
      PREVIOUS_KEY_PRESSED_EXTRA_CHARS=$'\e'"${wholeChain#*$'\e'}"
    fi

    # translate some common inputs into more readable strings
    case ${LAST_KEY_PRESSED} in
    $'\e[A' | $'\eOA') LAST_KEY_PRESSED="UP" ;;
    $'\e[B' | $'\eOB') LAST_KEY_PRESSED="DOWN" ;;
    $'\e[C' | $'\eOC') LAST_KEY_PRESSED="RIGHT" ;;
    $'\e[D' | $'\eOD') LAST_KEY_PRESSED="LEFT" ;;
    $'\e[1~' | $'\e[H' | $'\e[7~') LAST_KEY_PRESSED="HOME" ;;
    $'\e[2~') LAST_KEY_PRESSED="INSERT" ;;
    $'\e[3~') LAST_KEY_PRESSED="DEL" ;;
    $'\e[4~' | $'\e[F' | $'\e[8~') LAST_KEY_PRESSED="END" ;;
    $'\e[5~') LAST_KEY_PRESSED="PAGE_UP" ;;
    $'\e[6~') LAST_KEY_PRESSED="PAGE_DOWN" ;;
    $'\e') LAST_KEY_PRESSED="ESC" ;;
    $'\eOP' | $'\e[11~') LAST_KEY_PRESSED="F1" ;;
    $'\e'?) LAST_KEY_PRESSED="ALT+${LAST_KEY_PRESSED#$'\e'}" ;;
    esac
  else

    if ((${#LAST_KEY_PRESSED} > 1)); then
      # if we have more than one char, we store the extra chars for the next read
      PREVIOUS_KEY_PRESSED_EXTRA_CHARS="${LAST_KEY_PRESSED:1}"
      LAST_KEY_PRESSED="${LAST_KEY_PRESSED:0:1}"
    fi
    case ${LAST_KEY_PRESSED} in
    $'\b' | $'\177') LAST_KEY_PRESSED="BACKSPACE" ;;
    $'\r') LAST_KEY_PRESSED=$"\n" ;;
    esac
  fi
  return 0
}

# ## terminal::waitForKeyPress
#
# Wait for a key press (single key).
# You can pass additional parameters to the read command (e.g. to wait for a set amount of time).
#
# It uses the read builtin command with the option `-e` to use readline behind the scene.
# This means we can detect more key combinations but all keys needs to be bound first...
# Special keys (CTRL+, ALT+, F1-F12, arrows, etc.) are intercepted using binding.
#
# You must call `terminal::rebindKeymap` and `terminal::setRawMode` before using this function.
# You should use `tui::start` instead of using this function directly.
#
# - $@: **read parameters** _as any_:
#       additional parameters to pass to the read command
#
# Returns:
#
# - $?:
#   - 0 if a key was pressed
#   - 1 otherwise
# - `LAST_KEY_PRESSED`: the key pressed.
#
# ```bash
# terminal::waitForKeyPress
# terminal::waitForKeyPress -t 0.1
# ```
#
# > There are issues when using readline in bash:
# >
# > 1. if the cursor is at the end of the screen, it will make the screen scroll
# >    even when nothing is read... Make sure to not position the cursor at the end of the screen.
# > 2. When read is done, it will print a new line in stderr. So we redirect stderr to null.
# >    This means that if you print something to stderr in a readline bound function, you will see nothing
# >    As a workaround, do this in your callback function: `exec 2>&"${GLOBAL_FD_LOG}"`
# > 3. Not all key combinations can be bound, like SHIFT+ENTER. This is inherent to the way terminals work,
# >    they send a sequence of characters when a key is pressed and this sequence is read by readline/bash.
# >    For advanced key combinations, you will need to use a terminal that allows to remap such keys
# >    and send a specific sequence of characters that you can bind in bash.
function terminal::waitForKeyPress() {
  if [[ -n ${PREVIOUS_KEY_PRESSED_EXTRA_CHARS:-} ]]; then
    LAST_KEY_PRESSED="${PREVIOUS_KEY_PRESSED_EXTRA_CHARS:0:1}"
    PREVIOUS_KEY_PRESSED_EXTRA_CHARS="${PREVIOUS_KEY_PRESSED_EXTRA_CHARS:1}"
    return 0
  fi
  # here we redirect the error output to null because of a weird bash behavior, it
  # prints a newline each time read is finished (when called with -e), idk why...
  # This means that if you print something in a readline bound function, do not print to
  # stderr or you will get nothing !
  local IFS=''
  read "$@" -e -d '' -s -r -N 1 LAST_KEY_PRESSED 2>/dev/null || :
  if [[ -z ${LAST_KEY_PRESSED} ]]; then
    return 1
  fi
  # readline will actually read byte per byte and not a complete UTF8 character (or I missed something!)
  # check if we have more chars waiting in the buffer and append it directly
  while read "$@" -t 0 -d '' -s -r -N 1 2>/dev/null; do
    read "$@" -d '' -s -r -N 1 2>/dev/null
    LAST_KEY_PRESSED+="${REPLY}"
  done
  if ((${#LAST_KEY_PRESSED} > 1)); then
    # if we have more than one char, we store the extra chars for the next read
    PREVIOUS_KEY_PRESSED_EXTRA_CHARS="${LAST_KEY_PRESSED:1}"
    LAST_KEY_PRESSED="${LAST_KEY_PRESSED:0:1}"
  fi
  return 0
}

# ## terminal::rebindKeymap
#
# Rebinds all special keys to call a given callback function.
# See @terminal::testWaitForKeyPress for an implementation example.
#
# This allows to use the `-e` option with the read command and receive events for special key press.
#
#
# This function should be called before using terminal::waitForKeyPress.
#
# You can call `terminal::restoreBindings` to restore the default bindings. However, this is not
# necessary as the bindings are local to the script.
#
# - $1: **callback function** _as string_:
#       The function name to call when a special key is pressed.

# ```bash
# terminal::rebindKeymap
# ```
#
# > Key binding is a mess because binding is based on the sequence of characters that gets
# > generated by the terminal when a key is pressed and this is not standard across all terminals.
# > We do our best here to cover most cases but it is by no mean perfect.
# > A good base documentation was <https://en.wikipedia.org/wiki/ANSI_escape_code#Terminal_input_sequences>.
# > This means that certain keys cannot be bound, like SHIFT+ENTER. For this, you will
# > need to use a terminal that allows to remap such keys and send a specific sequence
# > of characters that you can bind in bash.
# > `showkey -a` is a good program to see the sequence of characters sent by the terminal.
function terminal::rebindKeymap() {
  local callBackFunction="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  if ! declare -F "${callBackFunction}" &>/dev/null; then
    core::fail "The function ⌜${callBackFunction}⌝ must be defined before calling terminal::rebindKeymap."
  fi

  if [[ -z ${_TERMINAL_SAVED_BINDINGS_FILE:-} ]]; then
    # save the original bindings
    fs::createTempFile pathOnly=true
    _TERMINAL_SAVED_BINDINGS_FILE="${REPLY}"
    bind -p >"${_TERMINAL_SAVED_BINDINGS_FILE}" 2>/dev/null
  fi

  # use emacs style line editing
  set -o emacs

  # remove all existing bindings except the self-insert ones
  # (self-insert is the default binding for "normal" characters, e.g. a, b, c, 1, 2, 3, ...)
  fs::readFile "${_TERMINAL_SAVED_BINDINGS_FILE}"
  local bindings="${REPLY}"
  local \
    IFS=$'\n' \
    line \
    key
  set -o noglob
  for line in ${bindings}; do
    if [[ ${line} == "#"* || ${line} == *"self-insert" ]]; then
      continue
    fi
    key="${line%% *}"
    key="${key//\"/}"
    bind -r "${key%:}"
  done
  set +o noglob

  # some other default values to ensure we get the right behavior
  bind 'set bind-tty-special-chars on'
  bind 'set echo-control-characters on'
  bind 'set editing-mode emacs'
  bind 'set enable-keypad on'
  bind 'set enable-bracketed-paste on'
  bind 'set output-meta off'
  bind 'set show-mode-in-prompt off'

  if [[ ${VALET_CONFIG_TUI_KEEP_ESCAPE_KEY_SEQUENCES:-} != "true" ]]; then
    # make sure that readline will not wait the default 500ms after a special key (like \e ESC) is pressed
    # to read a longer sequence of keys
    bind 'set keyseq-timeout 1'

    # Escape key
    bind -x '"\e": '"${callBackFunction}"' ESC'
  fi

  # Escape key
  bind -x '"\e\e": '"${callBackFunction}"' ESC'
  bind -x '"\e\e\e": '"${callBackFunction}"' ESC'

  # for each normal key, bind it with the different modifiers
  local normalKeys="abcdefghijklmnopqrstuvwxyz1234567890"
  local -a modifiers=(
    "CTRL+" "\C-"
    "ALT+" "\e"
  )
  local -i index modeIndex
  for ((index = 0; index < ${#normalKeys}; index++)); do
    for ((modeIndex = 0; modeIndex < ${#modifiers[@]}; modeIndex += 2)); do
      key="${normalKeys:index:1}"
      bind -x "\"${modifiers[modeIndex + 1]}${key}\": ${callBackFunction} ${modifiers[modeIndex]}${key^^}"
    done
  done

  # VT sequences + xterm sequences
  local specialKeys=(
    "[1?~" "HOME"
    "[2?~" "INSERT"
    "[3?~" "DEL"
    "[4?~" "END"
    "[5?~" "PAGE_UP"
    "[6?~" "PAGE_DOWN"
    "[7?~" "HOME"
    "[8?~" "END"
    "[11?~" "F1"
    "[12?~" "F2"
    "[13?~" "F3"
    "[14?~" "F4"
    "[15?~" "F5"
    "[17?~" "F6"
    "[18?~" "F7"
    "[19?~" "F8"
    "[20?~" "F9"
    "[21?~" "F10"
    "[23?~" "F11"
    "[24?~" "F12"
    "[25?~" "F13"
    "[26?~" "F14"
    "[28?~" "F15"
    "[29?~" "F16"
    "[31?~" "F17"
    "[32?~" "F18"
    "[33?~" "F19"
    "[34?~" "F20"
  )
  modifiers=(
    "" ""
    "SHIFT+" ";2"
    "ALT+" ";3"
    "CTRL+" ";5"
    "CTRL+SHIFT+" ";6"
    "CTRL+ALT+" ";7"
  )
  for ((index = 0; index < ${#specialKeys[@]}; index += 2)); do
    for ((modeIndex = 0; modeIndex < ${#modifiers[@]}; modeIndex += 2)); do
      key="${specialKeys[index]}"
      bind -x "\"\e${key//\?/"${modifiers[modeIndex + 1]}"}\": ${callBackFunction} ${modifiers[modeIndex]}${specialKeys[index + 1]}"
      # I have noticed that sometimes the terminal sends the sequence without the \e...
      # so we need to bind it without the \e as well
      bind -x "\"${key//\?/"${modifiers[modeIndex + 1]}"}\": ${callBackFunction} ${modifiers[modeIndex]}${specialKeys[index + 1]}"
    done
  done

  local specialKeys2=(
    "[?A" "UP"
    "[?B" "DOWN"
    "[?C" "RIGHT"
    "[?D" "LEFT"
    "[?F" "END"
    "[?H" "HOME"
    "[?P" "F1"
    "[?Q" "F2"
    "[?R" "F3"
    "[?S" "F4"
    "[?I" "TAB"
    "[?M" "ENTER"
    "[?j" "*"
    "[?k" "+"
    "[?l" ","
    "[?m" "-"
    "[?n" "."
    "[?o" "/"
    "[?p" "0"
    "[?q" "1"
    "[?r" "2"
    "[?s" "3"
    "[?t" "4"
    "[?u" "5"
    "[?v" "6"
    "[?w" "7"
    "[?x" "8"
    "[?y" "9"
    "[?X" "="
  )
  modifiers=(
    "" ""
    "SHIFT+" "1;2"
    "ALT+" "1;3"
    "CTRL+" "1;5"
    "CTRL+SHIFT+" "1;6"
    "CTRL+ALT+" "1;7"
  )
  for ((index = 0; index < ${#specialKeys2[@]}; index += 2)); do
    for ((modeIndex = 0; modeIndex < ${#modifiers[@]}; modeIndex += 2)); do
      key="${specialKeys2[index]}"
      bind -x "\"\e${key//\?/"${modifiers[modeIndex + 1]}"}\": ${callBackFunction} ${modifiers[modeIndex]}${specialKeys2[index + 1]}"
      # I have noticed that sometimes the terminal sends the sequence without the \e...
      # so we need to bind it without the \e as well
      bind -x "\"${key//\?/"${modifiers[modeIndex + 1]}"}\": ${callBackFunction} ${modifiers[modeIndex]}${specialKeys2[index + 1]}"
      # We also handle the case where SS3 (\eO) is sent instead of CSI (\e[)
      key="${key//[/O}"
      bind -x "\"\e${key//\?/"${modifiers[modeIndex + 1]}"}\": ${callBackFunction} ${modifiers[modeIndex]}${specialKeys2[index + 1]}"
      bind -x "\"${key//\?/"${modifiers[modeIndex + 1]}"}\": ${callBackFunction} ${modifiers[modeIndex]}${specialKeys2[index + 1]}"
    done
  done

  # check http://www.afterstep.org/keyboard.html
  # special key bindings
  bind -x '"\C-x\C-a": '"${callBackFunction}"' CTRL+ENTER'
  bind 'NEWLINE: "\C-x\C-a"'
  bind 'LFD: "\C-x\C-a"'

  bind -x '"\C-x\C-b": '"${callBackFunction}"' ENTER'
  bind 'RET:"\C-x\C-b"'
  bind 'RETURN:"\C-x\C-b"'

  bind -x '"\C-x\C-c": '"${callBackFunction}"' TAB'
  bind 'TAB:"\C-x\C-c"'
  bind -x '"\t": '"${callBackFunction}"' TAB'

  bind -x '"\C-x\C-d": '"${callBackFunction}"' ESC'
  bind 'ESC:"\C-x\C-d"'
  bind 'ESCAPE:"\C-x\C-d"'

  bind -x '"\C-x\C-e": '"${callBackFunction}"' DEL'
  bind 'DEL:"\C-x\C-e"'
  bind -x '"\d": '"${callBackFunction}"' DEL'

  bind -x '"\C-x\C-f": '"${callBackFunction}"' BACKSPACE'
  bind 'RUBOUT:"\C-x\C-f"'
  bind -x '"\177": '"${callBackFunction}"' BACKSPACE'

  bind -x '"\b": '"${callBackFunction}"' CTRL+BACKSPACE'
  bind -x '"\023": '"${callBackFunction}"' CTRL+BACKSPACE'
}

# ## terminal::restoreBindings
#
# Reset the key bindings to the default ones.
# To be called after `terminal::rebindKeymap`.
#
# ```bash
# terminal::restoreBindings
# ```
function terminal::restoreBindings() {
  if [[ -z ${_TERMINAL_SAVED_BINDINGS_FILE:-} ]]; then
    return 0
  fi
  if [[ ${GLOBAL_SOURCED_FOR_PROMPT:-} != "true" ]]; then
    # there is no need to restore if we are not in exported mode, the bindings are local to this execution
    return 0
  fi

  # try to remove all bindings
  bash::getBuiltinOutput bind -p
  local bindings="${REPLY}"
  local \
    IFS=$'\n' \
    line \
    key
  set -o noglob
  for line in ${bindings}; do
    if [[ ${line} == "#"* ]]; then
      continue
    fi
    key="${line%% *}"
    key="${key//\"/}"
    bind -r "${key%:}"
  done
  set +o noglob

  # restore the default bindings
  bind -f "${_TERMINAL_SAVED_BINDINGS_FILE}"
}

# ## terminal::clearKeyPressed
#
# This function reads all the inputs from the user, effectively discarding them.
#
# ```bash
# terminal::clearKeyPressed
# ```
function terminal::clearKeyPressed() {
  local IFS
  IFS='' read -d '' -sr -t 0 LAST_KEY_PRESSED || :
  PREVIOUS_KEY_PRESSED_EXTRA_CHARS=""
}
