#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-fs
source fs
# shellcheck source=lib-exe
source exe

# ## system::isRoot
#
# Check if the script is running as root.
#
# Returns:
#
# - $?
#   - 0 if the script is running as root
#   - 1 otherwise.
#
# ```bash
# if system::isRoot; then
#   printf 'The script is running as root.'
# fi
# ```
function system::isRoot() {
  if [[ ${EUID:-${UID}} -eq 0 ]]; then
    return 0
  fi
  return 1
}

# ## system::getOs
#
# Returns the name of the current OS.
#
# Returns:
#
# - ${RETURNED_VALUE}: the name of the current OS: "darwin", "linux" or "windows".
#
# ```bash
# system::getOs
# local osName="${RETURNED_VALUE}"
# ```
function system::getOs() {
  local osName
  case "${OSTYPE:-}" in
    darwin*) osName="darwin";;
    linux*) osName="linux";;
    msys*) osName="windows";;
    *) osName="unknown";;
  esac
  RETURNED_VALUE="${osName}"
}

# ## system::getArchitecture
#
# Returns the CPU architecture of the current machine.
#
# Returns:
#
# - ${RETURNED_VALUE}: the CPU architecture of the current machine.
#
# ```bash
# system::getArchitecture
# local architecture="${RETURNED_VALUE}"
# ```
function system::getArchitecture() {
  RETURNED_VALUE="${MACHTYPE%%-*}"
}

# ## system::getEnvVars
#
# Get the list of all the environment variables.
# In pure bash, no need for env or printenv.
#
# Returns:
#
# - ${RETURNED_ARRAY[@]}: An array with the list of all the environment variables.
#
# ```bash
# system::getEnvVars
# for var in "${RETURNED_ARRAY[@]}"; do
#   printf '%s=%s\n' "${var}" "${!var}"
# done
# ```
function system::getEnvVars() {
  RETURNED_ARRAY=()
  exe::captureOutput compgen -v
  local IFS=$'\n'
  # shellcheck disable=SC2206
  RETURNED_ARRAY+=(${RETURNED_VALUE})
}

# ## system::addToPath
#
# Add the given path to the PATH environment variable for various shells,
# by adding the appropriate export command to the appropriate file.
#
# Will also export the PATH variable in the current bash.
#
# - $1: **path** _as string_:
#       the path to add to the PATH environment variable.
#
# ```bash
# system::addToPath "/path/to/bin"
# ```
function system::addToPath() {
  local pathToAdd="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  log::debug "Adding directory ⌜${pathToAdd}⌝ to the PATH."

  fs::createDirectoryIfNeeded "${HOME}"

  local -i count=0
  local shellName
  for shellName in "bash" "ksh" "zsh" "tcsh" "csh" "xonsh" "fish" "nu"; do
    if ! command -v "${shellName}" &>/dev/null; then
      continue
    fi
    local configContent
    local configFile="${HOME}/.${shellName}rc"

    case ${shellName} in
    nu)
      configFile="${HOME}/.config/nushell/env.nu"
      fs::createDirectoryIfNeeded "${HOME}/.config/nushell"
      configContent="\$env.PATH = (\$env.PATH | split row (char esep) | append \"${pathToAdd}\")"
      ;;
    fish)
      # shellcheck disable=SC2088
      configFile="${HOME}/.config/fish/config.fish"
      fs::createDirectoryIfNeeded "${HOME}/.config/fish"
      configContent="fish_add_path '${pathToAdd}'"
      ;;
    tcsh | csh)
      configContent="set path = (\$path '${pathToAdd}')"
      ;;
    xonsh)
      configContent="\$PATH.append('${pathToAdd}')"
      ;;
    *)
      # shellcheck disable=SC2016
      printf -v configContent 'export PATH="%s:${PATH}"' "${pathToAdd}"
      ;;
    esac

    if [[ -f "${configFile}" ]] && fs::readFile "${configFile}" && [[ "${RETURNED_VALUE}" == *"${configContent}"* ]]; then
      log::info "The directory ⌜${pathToAdd}⌝ is already in the PATH for ⌜${shellName}⌝ shell."
      continue
    fi

    log::info "Adding directory ⌜${pathToAdd}⌝ to the PATH for ⌜${shellName}⌝ shell." \
      "Appending to ⌜${configFile}⌝:" \
      "${configContent}"

    printf '\n\n%s\n' "${configContent}" >> "${configFile}"
    count+=1
  done

  export PATH="${pathToAdd}:${PATH}"

  if (( count > 0 )); then
    log::warning "The directory ⌜${pathToAdd}⌝ has been added to the PATH for ${count} shells." \
      "Please login again to apply the changes on your current shell if you are not using bash."
  fi
}
