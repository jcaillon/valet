#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## profiler::enable
#
# Enables the profiler and start writing to the given file.
# The profiler will also be active in subshells of this current shell.
#
# - $1: **path** _as string_:
#       the file to write to.
#
# ```bash
# profiler::enable "${HOME}/valet-profiler-${BASHPID}.txt"
# ```
#
# > There can be only one profiler active at a time.
function profiler::enable() {
  local file="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  # Nested profiling not supported
  if [[ -n ${_ACTIVE_PROFILER:-} ]]; then
    return 0
  fi
  _ACTIVE_PROFILER=1

  # create the directory for file and reset it
  if [[ ${file} != "${file%/*}" ]]; then
    mkdir -p "${file%/*}"
  fi
  : >"${file}"

  log::info "Starting profiler, writing in ⌜${file}⌝."

  # we can only get the function depth if we call the profiler::enable from a function
  if [[ -n ${FUNCNAME[3]:-} ]]; then
    # shellcheck disable=SC2016
    functionDepthExpression='${#FUNCNAME[@]}'
  else
    functionDepthExpression='0'
  fi

  PS4='+'$'\011''$(((${EPOCHREALTIME%%\.*} - _PROFILER_STARTED_AT_SECOND) * 1000000 + (10#${EPOCHREALTIME##*\.} - 10#${_PROFILER_STARTED_AT_MICROSECOND})))'$'\011''${BASH_SOURCE[0]:-}'$'\011''${LINENO:-?}'$'\011''${FUNCNAME[0]:-}'$'\011''${BASH_SUBSHELL:-}'$'\011'"${functionDepthExpression}"$'\011''→'$'\011'

  exec 5>"${file}"

  _PROFILER_OUTPUT_FILE="${file}"
  _PROFILER_STARTED_AT_SECOND="${EPOCHREALTIME%%\.*}"
  _PROFILER_STARTED_AT_MICROSECOND="${EPOCHREALTIME##*\.}"
  BASH_XTRACEFD=5
  set -o xtrace
}

# ## profiler::disable
#
# Disable the profiler if previously activated with profiler::enable.
#
# ```bash
# profiler::disable
# ```
function profiler::disable() {
  if [[ ${_ACTIVE_PROFILER:-} != "1" ]]; then return 0; fi

  log::info "Disabling profiler."
  set +o xtrace
  unset -v BASH_XTRACEFD PS4 _ACTIVE_PROFILER
  exec 5>&-
  if [[ -v _PROFILER_OUTPUT_FILE ]]; then
    profilerCleanFile
  fi
}

# ## profiler::pause
#
# Pause the profiler if previously activated with profiler::enable.
#
# ```bash
# profiler::pause
# ```
function profiler::pause() {
  if [[ ${_ACTIVE_PROFILER:-} != "1" ]]; then return 0; fi

  log::info "Pausing profiler."
  set +o xtrace
}

# ## profiler::resume
#
# Resume the profiler if previously paused with profiler::pause.
#
# ```bash
# profiler::resume
# ```
function profiler::resume() {
  if [[ ${_ACTIVE_PROFILER:-} != "1" ]]; then return 0; fi

  log::info "Resuming profiler."
  set -o xtrace
}

# Allows to pretty format the profiler file and remove stuff the user does not need.
#
# Usage:
#   profilerCleanFile
function profilerCleanFile() {
  _OPTION_PATH_ONLY=true fs::createTempFile
  local newProfilerFile="${RETURNED_VALUE}"

  local timePrecision=${EPOCHREALTIME#*.}
  timePrecision=${#timePrecision}

  local clearLine
  if [[ ${VALET_CONFIG_KEEP_ALL_PROFILER_LINES:-false} == "true" ]]; then
    clearLine=false
  fi
  if [[ -z ${clearLine:-} && "${VALET_CONFIG_STARTUP_PROFILING:-false}" == "true" ]]; then
    clearLine=false
  fi
  if [[ -z ${clearLine:-} ]]; then
    clearLine=true
  fi

  # we do this one in awk if present, but in bash otherwise
  if [[ ${VALET_CONFIG_STRICT_PURE_BASH:-false} == "true" ]] || ! command -v awk 1>/dev/null 2>&1; then
    log::trace "Cleaning the profiler file using bash."
    profilerBashCleanFile "${timePrecision}" "${clearLine}" >"${newProfilerFile}"
    mv -f "${newProfilerFile}" "${_PROFILER_OUTPUT_FILE}"
    return 0
  fi

  log::trace "Cleaning the profiler file using awk."

  awk -F $'\t' -v timePrecision="${timePrecision}" -v clearCoreLine="${clearLine}" '
  BEGIN {
    printf "%s\n\n", "(D=function depth, I=level of indirection, S=subshell level, timer=elapsed time in seconds, delta=delta between the last command in seconds, caller source:line=the source file and line number of the caller of the function, function=the name of the function in which the command is executed, command=the executed command)";
    printf "%s\n", "D  I  S  timer  delta                          source:line function                                 → command";
    lastLineWasSkipped = 0;
    lastTimer = 0;
    baseStackLength = 99999;
  }
  {
    if (clearCoreLine == "true" && $3 ~ /(libraries.d\/core|libraries.d\/main|libraries.d\/lib-[a-z0-9]+)$/) {
      lastLineWasSkipped = 1;
      next;
    }
    if ($0 ~ /^\+/) {
      if (clearCoreLine == "true") {
        lastLineWasSkipped = 0;
      }
    } else {
      if (lastLineWasSkipped == 1) {
        next;
      }
      printf "%103s%s\n", "", $0;
      next;
    }
    if (baseStackLength == 99999) {
      baseStackLength = $7;
    }

    indirectionLevel = length($1);
    timer = $2 / (10 ^ timePrecision);
    program = $3;
    lineNumber = $4;
    if (length(program) > 30) {
      programShorten = "..." substr(program, length(program)-27);
    } else {
      programShorten = program;
    }
    fun = $5 "()";
    if (length(fun) > 40) {
      funShorten = "..." substr(fun, length(fun)-37);
    } else {
      funShorten = fun;
    }
    subShellLevel = $6;
    stackLength = $7 - baseStackLength;
    theRest = "";
    for (x = 9; x <= NF; x++) {
      theRest = theRest $x;
    }
    deltaTimer = timer - lastTimer;
    lastTimer = timer;


    printf "%02d %02d %02d %.4f %.4f %30s:%-4d %-40s → %s\n", stackLength, indirectionLevel, subShellLevel, timer, deltaTimer, programShorten, lineNumber, fun, theRest;
  }
  ' "${_PROFILER_OUTPUT_FILE}" >"${newProfilerFile}"

  mv -f "${newProfilerFile}" "${_PROFILER_OUTPUT_FILE}"
}

# Clean the profiler file in bash if awk is not present.
function profilerBashCleanFile() {
  local timePrecision="${1}"
  local clearCoreLine="${2}"

  printf "%s\n\n" "(D=function depth, I=level of indirection, S=subshell level, timer=elapsed time in seconds, delta=delta between the last command in seconds, caller source:line=the source file and line number of the caller of the function, function=the name of the function in which the command is executed, command=the executed command)"
  printf "%s\n" "D  I  S  timer  delta                          source:line function                                 → command"

  local lastLineWasSkipped=0
  local lastTimer=0
  local baseStackLength=99999

  local -i deltaTimer
  local -i lastTimer=0
  local totalElapsedTime lastElapsedTime
  local IFS indirectionLevel timer program lineNumber fun subShellLevel depth theRest arrow
  while IFS=$'\t' read -r indirectionLevel timer program lineNumber fun subShellLevel depth arrow theRest; do
    if [[ ${clearCoreLine} == "true" && ${program} =~ (libraries.d/core|libraries.d/main|libraries.d/lib-[a-z0-9]*)$ ]]; then
      lastLineWasSkipped=1
      continue
    fi
    if [[ ${indirectionLevel} =~ ^\++$ ]]; then
      if [[ ${clearCoreLine} == "true" ]]; then
        lastLineWasSkipped=0
      fi
    else
      if [[ ${lastLineWasSkipped} == "1" ]]; then
        continue
      fi
      # print the raw line
      printf "%107s%s\n" "" "${indirectionLevel}"$'\t'"${timer}"$'\t'"${program}"$'\t'"${lineNumber}"$'\t'"${fun}"$'\t'"${subShellLevel}"$'\t'"${depth}"$'\t'"${arrow}"$'\t'"${theRest}"
      continue
    fi
    if [[ ${baseStackLength} == 99999 ]]; then
      baseStackLength=${depth}
    fi

    profilerMicrosecondsToSeconds "${timer}" 4
    totalElapsedTime="${RETURNED_VALUE}"

    deltaTimer=$((timer - lastTimer))
    lastTimer=${timer}

    profilerMicrosecondsToSeconds "${deltaTimer}" 4
    lastElapsedTime=${RETURNED_VALUE}

    # shorten the program name if it is too long
    if ((${#program} > 30)); then
      program="...${program:${#program}-27}"
    fi

    # shorten the function name if it is too long
    if ((${#fun} > 31)); then
      fun="...${fun:${#fun}-28}"
    fi
    fun="${fun}()"

    stackLength=$((depth - baseStackLength))

    printf "%02d %02d %02d %-8s %-8s %31s:%-4d %-40s → %s\n" "${stackLength}" "${#indirectionLevel}" "${subShellLevel}" "${totalElapsedTime}" "${lastElapsedTime}" "${program}" "${lineNumber}" "${fun}" "${theRest}"

  done <"${_PROFILER_OUTPUT_FILE}"
}

# Convert a microseconds integer to seconds float.
# e.g. 1234567 → 1.234567
#
# - $1: The microseconds integer.
# - $2: The precision to get (number of digits after the dot).
#
# Returns:
#
# - ${RETURNED_VALUE}: The seconds (float number).
#
# ```bash
# profilerMicrosecondsToSeconds 1234567
# echo "${RETURNED_VALUE}"
# ```
function profilerMicrosecondsToSeconds() {
  local microseconds="${1}"
  if [[ ${#microseconds} -gt 6 ]]; then
    local ms="${microseconds:${#microseconds}-6}"
    RETURNED_VALUE="${microseconds:0:${#microseconds}-6}.${ms:0:${2}}"
  else
    printf -v RETURNED_VALUE "%06d" "${microseconds}"
    printf -v RETURNED_VALUE "0.%s" "${RETURNED_VALUE:0:${2}}"
  fi
}
