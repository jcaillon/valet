#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-tui
source tui

#===============================================================
# >>> Wait spinner / progress bars
#===============================================================

# ## progress::start
#
# Shows a spinner / progress animation with configurable output including a progress bar.
#
# The animation will be displayed until progress::stop is called
# or if the max number of frames is reached.
#
# Outputs to stderr.
# This will run in the background and will not block the main thread.
# The main thread can continue to output logs while this animation is running.
#
# - $1: template _as string_:
#       (optional) Can be set using the variable `_OPTION_TEMPLATE`.
#       The template to display. The template can contain the following placeholders:
#       - `<spinner>`: the spinner animation
#       - `<percent>`: the percentage of the progress bar
#       - `<bar>`: the progress bar
#       - `<message>`: the message to display
#       - #TODO: add `<cGradient>` and `<cDefault>`: colors the bar with a gradient (if colors enabled)
#       (defaults to VALET_CONFIG_PROGRESS_DEFAULT_TEMPLATE or "<spinner> <percent> ░<bar>░ <message>")
# - $2: bar size _as int_:
#       (optional) Can be set using the variable `_OPTION_BAR_SIZE`.
#       The maximum width of the progress bar.
#       (defaults to VALET_CONFIG_PROGRESS_BAR_DEFAULT_SIZE or 20)
# - $3: frame delay _as int_:
#       (optional) Can be set using the variable `_OPTION_FRAME_DELAY`.
#       The time in milliseconds between each frame of the spinner.
#       (defaults to VALET_CONFIG_PROGRESS_DEFAULT_ANIMATION_DELAY or 200)
# - ${_OPTION_MAX_FRAMES} _as int_:
#       (optional) The maximum number of frames to display.
#       (defaults to 9223372036854775807)
# - ${_OPTION_SPINNER} _as string_:
#       (optional) The spinner to display (each character is a frame).
#       Examples:
#       - ◐◓◑◒
#       - ▖▘▝▗
#       - ⣾⣽⣻⢿⡿⣟⣯⣷
#       - ⢄⢂⢁⡁⡈⡐⡠
#       - ◡⊙◠
#       - ▌▀▐▄
#       - ⠄⠆⠇⠋⠙⠸⠰⠠⠰⠸⠙⠋⠇⠆
#       (defaults to VALET_CONFIG_SPINNER_CHARACTERS or "⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏")
# - ${_OPTION_DEFAULT_PERCENTAGE} _as int_:
#       (optional) The default percentage to start with.
#       (defaults to 0)
# - ${_OPTION_DEFAULT_MESSAGE} _as int_:
#       (optional) The default message to start with.
#       (defaults to "")
#
# ```bash
# progress::start "<spinner>" "" 100
# wait 4
# progress::stop
#
# _OPTION_SPINNER="⢄⢂⢁⡁⡈⡐⡠" progress::start "<spinner> <percent> ░<bar>░ <message>" 30
# IDX=0
# while [[ ${IDX} -le 50 ]]; do
#   progress::update $((IDX * 2)) "Doing something ${IDX}/50..."
#   IDX=$((IDX + 1))
#   sleep 0.1
# done
# ```
#
# > Important: all progress functions will only work if called from the same shell
# > that started the progress bar.
function progress::start() {
  local template="${1:-${_OPTION_TEMPLATE:-${VALET_CONFIG_PROGRESS_DEFAULT_TEMPLATE:-"<spinner> <percent> ░<bar>░ <message>"}}}"
  local -i barSize="${2:-${_OPTION_BAR_SIZE:-${VALET_CONFIG_PROGRESS_BAR_DEFAULT_SIZE:-20}}}"
  local frameDelay="${3:-${_OPTION_FRAME_DELAY:-${VALET_CONFIG_PROGRESS_DEFAULT_ANIMATION_DELAY:-200}}}"
  local -i maxFrames="${_OPTION_MAX_FRAMES:-9223372036854775807}"
  local spinner="${_OPTION_SPINNER:-${VALET_CONFIG_SPINNER_CHARACTERS:-"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"}}"
  local -i defaultPercentage="${_OPTION_DEFAULT_PERCENTAGE:-0}"
  local defaultMessage="${_OPTION_DEFAULT_MESSAGE:-}"

  if [[ ! -t 2 || ${VALET_DISABLE_PROGRESS_BARS:-} == "true" ]]; then
    # we are not in an interactive session or progress bars are disabled
    return 0
  fi
  if [[ -n ${GLOBAL_BACKGROUND_JOB1_PID:-} ]]; then
    core::fail "A spinner or progress bar is already running."
  fi

  # Hide the cursor
  printf "%s" "${ESC__CURSOR_HIDE}" 1>&2

  # disable echoing when we type something
  tui::setTerminalOptions

  _PROGRESS_BAR_RUNNING=true

  # coproc can emit a warning if another coproc is already running, so we redirect stderr to avoid it
  # but we still want to have stderr of progress_runAnimationInBackground so we redirect it to fd4
  exec 4>&2
  {
    # we use coproc because it gives us a file descriptor to write to the input stream of the background job
    coproc _PROGRESS_BACKGROUND_JOB { progress_runAnimationInBackground "${template}" "${barSize}" "${frameDelay}" "${maxFrames}" "${spinner}" "${defaultPercentage}" "${defaultMessage}" 2>&4; }
  } 2>/dev/null
  exec 4>&-
  GLOBAL_BACKGROUND_JOB1_PID="${_PROGRESS_BACKGROUND_JOB_PID}"
}

# ## progress::stop
#
# Stop the progress bar.
#
# ```bash
# progress::stop
# ```
function progress::stop() {
  if [[ ! -t 2 || ${VALET_DISABLE_PROGRESS_BARS:-} == "true" ]]; then
    # we are not in an interactive session or progress bars are disabled
    return 0
  fi
  if [[ ${_PROGRESS_BAR_RUNNING:-} == "true" && -n ${GLOBAL_BACKGROUND_JOB1_PID:-} ]]; then
    _PROGRESS_BAR_RUNNING=false
    kill "${GLOBAL_BACKGROUND_JOB1_PID}" &>/dev/null || :
    unset -v GLOBAL_BACKGROUND_JOB1_PID _PROGRESS_BAR_RUNNING _PROGRESS_BACKGROUND_JOB _PROGRESS_BACKGROUND_JOB_PID
  fi

  printf "%s" "${ESC__ERASE_LINE}${ESC__CURSOR_SHOW}" 1>&2

  # restore the key echoing
  tui::restoreTerminalOptions
}

# ## progress::update
#
# Update the progress bar with a new percentage and message.
#
# The animation can be started with progress::start for more options.
# The animation will stop if the updated percentage is 100.
#
# - $1: **percent** _as int_:
#       the percentage of the progress bar (0 to 100)
# - $2: message _as string_:
#       (optional) the message to display
#
# ```bash
# progress::update 50 "Doing something..."
# ```
function progress::update() {
  local -i percent="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local message="${2:-}"

  if [[ ! -t 2 || ${VALET_DISABLE_PROGRESS_BARS:-} == "true" ]]; then
    # we are not in an interactive session or progress bars are disabled
    return 0
  fi

  if (( percent < 0 )); then
    return
  fi

  # stop the progress bar at 100 percent
  if (( percent >= 100 )); then
    progress::stop
    return
  fi

  if [[ ${_PROGRESS_BAR_RUNNING:-} != "true" ]]; then
    _OPTION_DEFAULT_PERCENTAGE="${percent}" _OPTION_DEFAULT_MESSAGE="${message}" progress::start ""
    return 0
  fi
  if [[ ! -v _PROGRESS_BACKGROUND_JOB ]] || ! { printf "1\0%s %s %s\0" "update" "${percent}" "${message}" >&"${_PROGRESS_BACKGROUND_JOB[1]:-}"; } 2>/dev/null; then
    # case where the progress bar was stopped because it reached max frames
    progress::stop
  fi
}

function progress:redraw() {
  if [[ ! -t 2 || ${VALET_DISABLE_PROGRESS_BARS:-} == "true" ]]; then
    # we are not in an interactive session or progress bars are disabled
    return 0
  fi
  if [[ ${_PROGRESS_BAR_RUNNING:-} != "true" ]]; then
    return 0
  fi
  if [[ ! -v _PROGRESS_BACKGROUND_JOB ]] || ! { printf "1\0%s\0" "redraw" >&"${_PROGRESS_BACKGROUND_JOB[1]:-}"; } 2>/dev/null; then
    # case where the progress bar was stopped because it reached max frames
    progress::stop
  fi
}

function progress::onResize() {
  if [[ ! -t 2 || ${VALET_DISABLE_PROGRESS_BARS:-} == "true" ]]; then
    # we are not in an interactive session or progress bars are disabled
    return 0
  fi
  if [[ ${_PROGRESS_BAR_RUNNING:-} != "true" ]]; then
    return 0
  fi
  if [[ ! -v _PROGRESS_BACKGROUND_JOB ]] || ! { printf "1\0%s %s\0" "resize" "${GLOBAL_COLUMNS}" >&"${_PROGRESS_BACKGROUND_JOB[1]:-}"; } 2>/dev/null; then
    # case where the progress bar was stopped because it reached max frames
    progress::stop
  fi
}

# Starts a wait spinner animation that will loop for a set number of frames.
#
# This function runs in a background process (subshell) and will not block the main thread.
# It reads the progress from a file shared with the main thread.
# shellcheck disable=SC2120
function progress_runAnimationInBackground() {
  local template="${1}"
  local barSize="${2}"
  local frameDelay="${3}"
  local -i maxFrames="${4}"
  local spinner="${5}"
  local -i percentage="${6}"
  local message="${7}"

  # TODO: understand why unregistering here affects the main thread
  # core::setShellOptions
  # trap::unregister

  # Hide the cursor
  printf "%s" "${ESC__CURSOR_HIDE}" 1>&2

  # shellcheck source=lib-string
  source string
  # shellcheck source=lib-time
  source time

  time::getProgramElapsedMicroseconds
  local timerStart="${RETURNED_VALUE}"

  local -i readDelay=$((frameDelay / 2))
  if ((readDelay < 10)); then
    readDelay=10
  fi
  local readDelayInSeconds="${readDelay}"
  if ((readDelay < 100)); then
    readDelayInSeconds="00${readDelayInSeconds}"
  elif ((readDelay < 1000)); then
    readDelayInSeconds="0${readDelayInSeconds}"
  fi
  readDelayInSeconds="${readDelayInSeconds:0:${#readDelayInSeconds} - 3}.${readDelayInSeconds:${#readDelayInSeconds} - 3}"

  local -i spinnerIndex=0 loop=0
  local IFS='' instructionReceived="" instruction displayedString computeDisplayString=true
  while [[ ${loop} -lt ${maxFrames} ]]; do

    if [[ -n ${instructionReceived} ]]; then
      if [[ ${instructionReceived} == "1" ]]; then
        # read the instruction from the main thread (from stdin)
        read -t 100 -rd '' instruction || [[ -n ${instruction} ]] || :
      else
        # we are in this case if the read timer messed up; the instruction was read earlier
        instruction="${instructionReceived}"
      fi

      case "${instruction%% *}" in
      update)
        instruction="${instruction#"update "}"
        percentage="${instruction%%" "*}"
        message="${instruction#"${percentage} "}"
        computeDisplayString=true
        ;;
      resize)
        GLOBAL_COLUMNS="${instruction#"resize "}"
        computeDisplayString=true
        ;;
      esac
    fi

    if [[ ${computeDisplayString} == "true" ]]; then
      computeDisplayString=false
      progress_getStringToDisplay "${template}" "${barSize}" "${percentage}" "${message}"
      displayedString="${RETURNED_VALUE}"
    fi

    time::getProgramElapsedMicroseconds
    local -i elapsed=$((RETURNED_VALUE - timerStart))
    loop=$((elapsed / 1000 / frameDelay))
    spinnerIndex=$(( loop % ${#spinner} ))
    printf "%-${GLOBAL_COLUMNS}s%s" "${displayedString//"<spinner>"/"${spinner:spinnerIndex:1}"}" "${ESC__CURSOR_MOVE__}1${__ESC__COLUMN}" 1>&2

    # since we put a timeout on the read, we don't want to risk not reading the entire instruction,
    # so we read only a potential "1" indicating that an instruction was received
    instructionReceived=""

    read -t "${readDelayInSeconds}" -rd '' instructionReceived || :
  done

  printf "%s" "${ESC__ERASE_LINE}${ESC__CURSOR_SHOW}" 1>&2
}

# Computes the string to display for the progress bar.
# Makes sure the string fits in the terminal window.
# Will only leave the <spinner> tag and replace the other tags with the computed values.
function progress_getStringToDisplay() {
  local template="${1}"
  local barSize="${2}"
  local percentage="${3}"
  local message="${4}"

  local displayedString="${template}"

  # compute the max size available for the progress bar
  local staticCharacters="${template//"<spinner>"/}"
  staticCharacters="${staticCharacters//"<percent>"/}"
  staticCharacters="${staticCharacters//"<bar>"/}"
  staticCharacters="${staticCharacters//"<message>"/}"
  string::removeSgrCodes staticCharacters
  local -i templateLengthWithoutBarAndMessage="${#staticCharacters}"
  if [[ ${template} == *"<spinner>"* ]]; then
    templateLengthWithoutBarAndMessage+=1
  fi
  if [[ ${template} == *"<percent>"* ]]; then
    templateLengthWithoutBarAndMessage+=5
  fi

  if [[ ${template} == *"<percent>"* ]]; then
    local percentageString
    printf -v percentageString "%4s" "${percentage}%"
    displayedString="${displayedString//"<percent>"/"${percentageString}"}"
  fi

  if [[ ${template} == *"<bar>"* ]]; then
    local progressBarSize="${barSize}"
    if ((progressBarSize > GLOBAL_COLUMNS - templateLengthWithoutBarAndMessage)); then
      progressBarSize=$((GLOBAL_COLUMNS - templateLengthWithoutBarAndMessage))
    fi

    progress_getProgressBarString "${percentage}" "${progressBarSize}"
    displayedString="${displayedString//"<bar>"/"${RETURNED_VALUE}"}"
  fi

  if [[ ${template} == *"<message>"* ]]; then
    # cut the message if it is too long
    local -i templateLengthWithoutMessage="$((templateLengthWithoutBarAndMessage + progressBarSize))"
    local messageWithoutSfrCodes="${message}"
    string::removeSgrCodes messageWithoutSfrCodes
    if (( templateLengthWithoutMessage == GLOBAL_COLUMNS)); then
      message=""
    elif ((templateLengthWithoutMessage + ${#messageWithoutSfrCodes} > GLOBAL_COLUMNS)); then
      string::wrapCharacters message "$((GLOBAL_COLUMNS - templateLengthWithoutMessage - 1))"
      message="${RETURNED_VALUE%%$'\n'*}…"
    fi
    displayedString="${displayedString//"<message>"/"${message}"}"
  fi

  if ((templateLengthWithoutBarAndMessage > GLOBAL_COLUMNS)); then
    # not enough space to display the template
    displayedString="<spinner>"
  fi

  RETURNED_VALUE="${displayedString}"
}

# Returns a string representing a progress bar.
#
# - $1: **percent** _as int_:
#       the percentage of the progress bar (0 to 100)
# - $2: **size** _as int_:
#       the size of the progress bar (max total nb characters)
#
# Returns:
#
# - ${RETURNED_VALUE}: the progress bar string
#
# ```bash
# progress_getProgressBarString 50 20
# ```
function progress_getProgressBarString() {
  local percent="${1}"
  local size="${2}"
  local progressBarChars=" ▏▎▍▌▋▊▉"

  local -i nbFullChars=$((size * percent / 100))
  local -i extraCharIndex=$(((size * percent - nbFullChars * 100) * 8 / 100))

  if ((nbFullChars > 0)); then
    printf -v RETURNED_VALUE "%${nbFullChars}s" ""
    RETURNED_VALUE="${RETURNED_VALUE// /█}"
  else
    RETURNED_VALUE=""
  fi
  if ((extraCharIndex > 0)); then
    RETURNED_VALUE+="${progressBarChars:extraCharIndex:1}"
  fi
  if ((size - ${#RETURNED_VALUE} - 1 >= 0)); then
    local printVar
    printf -v printVar "%$((size - ${#RETURNED_VALUE}))s" ""
    RETURNED_VALUE+="${printVar}"
  fi
}
