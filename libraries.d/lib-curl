#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-exe
source exe
# shellcheck source=lib-fs
source fs

# ## curl::download
#
# This function is a wrapper around curl to save a request result in a file.
# It allows you to check the http status code and return 1 if it is not acceptable.
# It invokes curl with the following options (do not repeat them): -sSL -w "%{response_code}" -o ${2}.
#
# - $1: **fail** _as bool_:
#       true/false to indicate if the function should fail in case the execution fails
# - $2: **acceptable codes** _as string_:
#       list of http status codes that are acceptable, comma separated
#       (defaults to 200,201,202,204,301,304,308 if left empty)
# - $3: **path** _as string_:
#       the file in which to save the output of curl
# - $@: **curl arguments** _as any_:
#       options for curl
#
# Returns:
#
# - $?:
#   - 0 if the http status code is acceptable
#   - 1 otherwise
# - ${REPLY}: the content of stderr
# - ${REPLY2}: the http status code
#
# ```bash
# curl::download true 200,201 "/filePath" "https://example.com"
# curl::download false 200 "/filePath2" "https://example2.com" || core::fail "The curl command failed."
# ```
function curl::download() {
  local failIfFails="${1:-false}"
  local acceptableStatusCodes="${2:-200,201,202,204,301,304,308}"
  local outputFile="${3?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  shift 3

  # call curl
  local -i exitCode=0
  local httpStatusCode errors
  exe::invoke5 "false" "0" "false" "" "curl" "--silent" "--show-error" "--location" "--write-out" "%{response_code}" "--output" "${outputFile}" "$@" || exitCode=$?
  httpStatusCode="${REPLY}"
  errors="${REPLY2}"

  # workaround in case of unknown args in curl
  # and for a bug in curl https://github.com/Homebrew/homebrew-core/issues/173294
  if [[ ${exitCode} != "0" && (${errors} == *"bad argument"* || ${errors} == *"is unknown"*) ]]; then
    log::debug "Trying to use curl without the many options."
    exe::invoke5 "false" "0" "false" "" "curl" "--location" "-v" "--output" "${outputFile}" "$@" || exitCode=$?
    if [[ ${REPLY}${REPLY2} =~ "< HTTP/"([0-9.]+)" "([0-9]+)" " ]]; then
      httpStatusCode="${BASH_REMATCH[2]}"
    else
      httpStatusCode="??? Could not read from verbose curl output."
    fi
    errors="${REPLY2}"
  fi

  local url="$*"
  url="http${url##*http}"
  url="${url%% *}"
  url="${url%% \'}"

  log::debug "The curl command for url ⌜${url}⌝ ended with exit code ⌜${exitCode}⌝, the http return code was ⌜${httpStatusCode}⌝."

  # if the error code is acceptable, then we set it to 0
  if [[ ,${acceptableStatusCodes}, == *",${httpStatusCode},"* ]]; then
    exitCode=0
    log::debug "The http return code ⌜${httpStatusCode}⌝ is acceptable and exit code has been reset to 0 from ⌜${exitCode}⌝."
  else
    exitCode=1
    if log::isDebugEnabled || [[ ${failIfFails} == "true" ]]; then
      log::errorTrace "Curl error output stream:"
      log::saveFileString errors "curl-stderr"
      log::printFileString errors maxLines=99
    fi
    local message="The http return code ⌜${httpStatusCode}⌝ is not acceptable for url ⌜${url}⌝."
    if [[ ${failIfFails} == "true" ]]; then
      core::fail "${message}"
    fi
    log::debug "${message}"
  fi

  REPLY="${errors}"
  REPLY2="${httpStatusCode}"
  return ${exitCode}
}

# ## curl::request
#
# This function is a wrapper around curl to save the content of a request in a variable.
# It allows you to check the http status code and return 1 if it is not acceptable.
# It invokes curl with the following options (do not repeat them): -sSL -w "%{response_code}" -o "tempfile".
#
# - $1: **fail** _as bool_:
#       true/false to indicate if the function should fail in case the execution fails
# - $2: **acceptable codes** _as string_:
#       list of http status codes that are acceptable, comma separated
#       (defaults to 200,201,202,204,301,304,308 if left empty)
# - $@: **curl arguments** _as any_:
#       options for curl
#
# Returns:
#
# - $?:
#   - 0 if the http status code is acceptable
#   - 1 otherwise
# - ${REPLY}: the content of the request
# - ${REPLY2}: the content of stderr
# - ${REPLY3}: the http status code
#
# ```bash
# curl::request true 200 https://example.com -X POST -H 'Authorization: token'
# curl::request false 200,201 https://example.com || core::fail "The curl command failed."
# ```
function curl::request() {
  local failIfFails="${1:-false}"
  local acceptableStatusCodes="${2:-}"
  shift 2

  # reset the temporary file, only if needed
  if [[ -s "${GLOBAL_TEMPORARY_WORK_FILE}" ]]; then : >"${GLOBAL_TEMPORARY_WORK_FILE}"; fi

  local -i exitCode=0
  local errors httpStatusCode
  curl::download "${failIfFails}" "${acceptableStatusCodes}" "${GLOBAL_TEMPORARY_WORK_FILE}" "$@" || exitCode=$?
  errors="${REPLY}"
  httpStatusCode="${REPLY2}"

  fs::readFile "${GLOBAL_TEMPORARY_WORK_FILE}"
  REPLY2="${errors}"
  # shellcheck disable=SC2034
  REPLY3="${httpStatusCode}"
  return ${exitCode}
}
