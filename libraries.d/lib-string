#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## string::cutField
#
# Allows to get the nth element of a string separated by a given separator.
# This is the equivalent of the cut command "cut -d"${separator}" -f"${fieldNumber}""
# but it uses pure bash to go faster.
#
# - $1: **string to cut** _as string_:
#       the string to cut
# - $2: **field number** _as int_:
#       the field number to get (starting at 0)
# - $3: separator _as string_:
#       the separator
#       (defaults to tab if not provided)
#
# Returns:
#
# - `RETURNED_VALUE`: the extracted field
#
# ```bash
# string::cutField "field1 field2 field3" 1 " " && local field="${RETURNED_VALUE}"
# printf '%s' "${field}" # will output "field2"
# ```
#
# > This is faster than:
# >
# > - using read into an array from a here string
# > - using bash parameter expansion to remove before/after the separator
function string::cutField() {
  local str fieldNumber separator
  str="${1}"
  fieldNumber="${2}"
  separator="${3:-$'\t'}"

  local field IFS="${separator}"
  local -i index=0
  for field in ${str}; do
    if [[ index -eq fieldNumber ]]; then
      RETURNED_VALUE="${field}"
      return 0
    fi
    index=$((index + 1))
  done
  RETURNED_VALUE=""
}

# ## string::compareSemanticVersion
#
# This function allows to compare two semantic versions formatted like:
# major.minor.patch-prerelease+build
#
# - $1: **version1** _as string_:
#       the first version to compare
# - $2: **version2** _as string_:
#       the second version to compare
#
# Returns:
#
# - `RETURNED_VALUE`:
#   - 0 if the versions are equal,
#   - 1 if version1 is greater,
#   - -1 if version2 is greater
#
# ```bash
# string::compareSemanticVersion "2.3.4-prerelease+build" "1.2.3-prerelease+build"
# local comparison="${RETURNED_VALUE}"
# ```
#
# > The prerelease and build are ignored in the comparison.
function string::compareSemanticVersion() {
  local version1="${1#v}"
  local version2="${2#v}"

  local -i semVerIndex
  local semVerNumber1 semVerNumber2
  for semVerIndex in {0..2}; do
    string::cutField "${version1}" "${semVerIndex}" "."
    semVerNumber1="${RETURNED_VALUE%%-*}"
    semVerNumber1="${semVerNumber1%%+*}"
    string::cutField "${version2}" "${semVerIndex}" "."
    semVerNumber2="${RETURNED_VALUE%%-*}"
    semVerNumber2="${semVerNumber2%%+*}"
    if [[ ! ${semVerNumber1} =~ ^[0-9]+$ || ! ${semVerNumber2} =~ ^[0-9]+$ ]]; then
      core::fail "Failed to compare versions ⌜${version1}⌝ and ⌜${version2}⌝ because they are not valid semantic versions."
    elif (( semVerNumber1 > semVerNumber2 )); then
      RETURNED_VALUE=1
      return 0
    elif (( semVerNumber1 < semVerNumber2 )); then
      RETURNED_VALUE=-1
      return 0
    fi
  done
  RETURNED_VALUE=0
}

# ## string::bumpSemanticVersion
#
# This function allows to bump a semantic version formatted like:
# major.minor.patch-prerelease+build
#
# - $1: **version** _as string_:
#       the version to bump
# - $2: **level** _as string_:
#       the level to bump (major, minor, patch)
# - $3: clear build and prerelease _as bool_:
#       (optional) clear the prerelease and build
#       (defaults to true)
#
# Returns:
#
# - `RETURNED_VALUE`: the new version string
#
# ```bash
# string::bumpSemanticVersion "1.2.3-prerelease+build" "major"
# local newVersion="${RETURNED_VALUE}"
# ```
function string::bumpSemanticVersion() {
  local version level clearPreRelease
  version="${1}"
  bumpLevel="${2}"
  clearPreRelease="${3:-true}"

  local prerelease build modifiedVersion
  modifiedVersion="${version}-+"
  prerelease="${modifiedVersion#*-}"
  prerelease="${prerelease%%+*}"
  if [[ -n "${prerelease}" ]]; then prerelease="-${prerelease%-}"; fi
  build="${modifiedVersion#*+}"
  if [[ -n "${build}" ]]; then
    build="+${build%-+}"
  fi

  # bump the version
  local -i level semVerNumber semVerIndex
  level=2
  if [[ ${bumpLevel:-} == "major" ]]; then level=0; fi
  if [[ ${bumpLevel:-} == "minor" ]]; then level=1; fi
  local newVersion semVerString
  for semVerIndex in {0..2}; do
    string::cutField "${version}" "${semVerIndex}" "."
    semVerString="${RETURNED_VALUE%-*}"
    if [[ ! ${semVerString} =~ ^[0-9]+$ ]]; then
      core::fail "Failed to bump the version ⌜${version}⌝ because it is not valid semantic version."
    fi
    semVerNumber="${semVerString%+}"
    if [[ semVerIndex -eq level ]]; then semVerNumber=$((semVerNumber + 1)); fi
    if [[ semVerIndex -gt level ]]; then semVerNumber=0; fi
    newVersion+="${semVerNumber}."
  done
  newVersion="${newVersion%.}"

  if [[ "${clearPreRelease}" != "true" ]]; then
    newVersion="${newVersion%.}${prerelease}${build}"
  fi

  RETURNED_VALUE="${newVersion}"
}

# ## string::camelCaseToSnakeCase
#
# This function convert a camelCase string to a SNAKE_CASE string.
# It uses pure bash.
# Removes all leading underscores.
#
# - $1: **camelCase string** _as string_:
#       The camelCase string to convert.
#
# Returns:
#
# - `RETURNED_VALUE`: The SNAKE_CASE string.
#
# ```bash
# string::camelCaseToSnakeCase "myCamelCaseString" && local mySnakeCaseString="${RETURNED_VALUE}"
# ```
function string::camelCaseToSnakeCase() {
  local camelCase="${1}"
  local snakeCase=""
  local -i charIndex strLength=${#camelCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${camelCase:charIndex:1}"
    if [[ ${char} =~ ^[[:upper:]]$ ]]; then
      snakeCase+="_${char^}"
    else
      snakeCase+="${char^}"
    fi
  done
  while [[ ${snakeCase} == _* ]]; do
    snakeCase="${snakeCase:1}"
  done
  RETURNED_VALUE="${snakeCase}"
}

# ## string::kebabCaseToSnakeCase
#
# This function convert a kebab-case string to a SNAKE_CASE string.
# It uses pure bash.
# Removes all leading dashes.
#
# - $1: **kebab-case string** _as string_:
#       The kebab-case string to convert.
#
# Returns:
#
# - `RETURNED_VALUE`: The SNAKE_CASE string.
#
# ```bash
# string::kebabCaseToSnakeCase "my-kebab-case-string" && local mySnakeCaseString="${RETURNED_VALUE}"
# ```
function string::kebabCaseToSnakeCase() {
  local kebabCase="${1}"
  local snakeCase=""
  local -i charIndex strLength=${#kebabCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${kebabCase:charIndex:1}"
    if [[ ${char} == "-" ]]; then
      snakeCase+="_"
    else
      snakeCase+="${char^}"
    fi
  done
  while [[ ${snakeCase} == _* ]]; do
    snakeCase="${snakeCase:1}"
  done
  RETURNED_VALUE="${snakeCase}"
}

# ## string::kebabCaseToCamelCase
#
# This function convert a kebab-case string to a camelCase string.
# It uses pure bash.
# Removes all leading dashes.
#
# - $1: **kebab-case string** _as string_:
#       The kebab-case string to convert.
#
# Returns:
#
# - `RETURNED_VALUE`: The camelCase string.
#
# ```bash
# string::kebabCaseToCamelCase "my-kebab-case-string" && local myCamelCaseString="${RETURNED_VALUE}"
# ```
function string::kebabCaseToCamelCase() {
  local kebabCase="${1}"
  local camelCase=""
  local -i charIndex strLength=${#kebabCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${kebabCase:charIndex:1}"
    if [[ ${char} == "-" ]]; then
      continue
    fi
    if [[ ${kebabCase:charIndex-1:1} == "-" ]]; then
      camelCase+="${char^}"
    else
      camelCase+="${char}"
    fi
  done
  RETURNED_VALUE="${camelCase,}"
}

# ## string::trimAll
#
# Trim all whitespaces and truncate spaces.
#
# - $1: **string to trim** _as string_:
#       The string to trim.
#
# Returns:
#
# - `RETURNED_VALUE`: The trimmed string.
#
# ```bash
# string::trimAll "   example   string    " && local trimmedString="${RETURNED_VALUE}"
# ```
function string::trimAll() {
  set -f
  # shellcheck disable=SC2086
  # shellcheck disable=SC2048
  set -- $*
  RETURNED_VALUE="$*"
  set +f
}

# ## string::trim
#
# Trim leading and trailing whitespaces.
#
# - $1: **string to trim** _as string_:
#       The string to trim.
#
# Returns:
#
# - `RETURNED_VALUE`: The trimmed string.
#
# ```bash
# string::trim "   example string    " && local trimmedString="${RETURNED_VALUE}"
# ```
function string::trim() {
  RETURNED_VALUE="${1#"${1%%[![:space:]]*}"}"
  RETURNED_VALUE="${RETURNED_VALUE%"${RETURNED_VALUE##*[![:space:]]}"}"
}

# ## string::indexOf
#
# Find the first index of a string within another string.
#
# - $1: **string** _as string_:
#       the string in which to search
# - $2: **search** _as string_:
#       the string to search
# - $3: start index _as int_:
#       (optional) the starting index
#       (defaults to 0)
#
# Returns:
#
# - `RETURNED_VALUE`: the index of the substring in the string or -1 if not found.
#
# ```bash
# string::indexOf "This is a long text" "long" && local index="${RETURNED_VALUE}"
# string::indexOf "This is a long text" "long" 10 && local index="${RETURNED_VALUE}"
# ```
function string::indexOf() {
  local search string
  local -i startingIndex
  string="${1}"
  search="${2}"
  startingIndex=${3:-0}

  local -i stringLength
  stringLength="${#string}"

  if [[ startingIndex -gt 0 ]]; then
    # if the starting index is greater than the length of the string, we return -1
    if [[ startingIndex -ge stringLength ]]; then
      RETURNED_VALUE=-1
      return 0
    fi

    # otherwise we keep only what is after this index
    string="${string:${startingIndex}}"
  fi

  stringLength="${#string}"

  # if the string starts with the search, we have our index
  if [[ ${string} == "${search}"* ]]; then
    RETURNED_VALUE=${startingIndex}
    return 0
  fi

  # cut everything after the search string
  local tempString
  tempString="${string%%"${search}"*}"
  local -i tempStringLength="${#tempString}"

  # the index is the length of the temp string if it is different than the initial string length
  if [[ tempStringLength -ne stringLength ]]; then
    RETURNED_VALUE=$((tempStringLength + startingIndex))
  else
    RETURNED_VALUE=-1
  fi
  return 0
}

# ## string::extractBetween
#
# Extract the text between two strings within a string.
# Search for the first occurrence of the start string and the first occurrence
# (after the start index) of the end string.
# Both start and end strings are excluded in the extracted text.
# Both start and end strings must be found to extract something.
#
# - $1: **string** _as string_:
#       the string in which to search
# - $2: **start string** _as string_:
#       the start string
#       (if empty, then it will extract from the beginning of the string)
# - $3: **end string** _as string_:
#       the end string
#       (if empty, then it will extract until the end of the string)
#
# Returns:
#
# - `RETURNED_VALUE`: the extracted text
#
# ```bash
# string::extractBetween "This is a long text" "is a " " text"
# local extractedText="${RETURNED_VALUE}"
# ```
function string::extractBetween() {
  local string start end
  string="${1}"
  start="${2}"
  end="${3}"

  local -i startIndex endIndex

  if [[ -n "${start}" ]]; then
    string::indexOf "${string}" "${start}" && startIndex="${RETURNED_VALUE}"
    if [[ startIndex -eq -1 ]]; then
      RETURNED_VALUE=""
      return 0
    fi
    startIndex=$((startIndex + ${#start}))
  else
    startIndex=0
  fi

  if [[ -n "${end}" ]]; then
    string::indexOf "${string}" "${end}" "${startIndex}" && endIndex="${RETURNED_VALUE}"
    if [[ endIndex -eq -1 ]]; then
      RETURNED_VALUE=""
      return 0
    fi
  else
    RETURNED_VALUE="${string:${startIndex}}"
    return 0
  fi

  local -i extractedLength
  extractedLength=$((endIndex - startIndex))
  RETURNED_VALUE="${string:${startIndex}:${extractedLength}}"
}

# ## string::count
#
# Counts the number of occurrences of a substring in a string.
#
# - $1: **string** _as string_:
#       the string in which to search
# - $2: **substring** _as string_:
#       the substring to count
#
# Returns:
#
# - `RETURNED_VALUE`: the number of occurrences
#
# ```bash
# string::count "name,firstname,address" "," && local count="${RETURNED_VALUE}"
# ```
#
# > This is faster than looping over the string and check the substring.
function string::count() {
  local string="${1}"
  local newString="${string//"${2}"/}"
  RETURNED_VALUE=$(((${#string} - ${#newString}) / ${#2}))
}

# ## string::split
#
# Split a string into an array using a separator.
#
# - $1: **string** _as string_:
#       the string to split
# - $2: **separator** _as string_:
#       the separator (must be a single character!)
#
# Returns:
#
# - `RETURNED_ARRAY`: the array of strings
#
# ```bash
# string::split "name,first name,address" "," && local -a array=("${RETURNED_ARRAY[@]}")
# ```
#
# > This is faster than using read into an array from a here string.
function string::split() {
  local IFS="${2}"
  # shellcheck disable=SC2206
  # shellcheck disable=SC2034
  RETURNED_ARRAY=(${1})
}

# ## string::regexGetFirst
#
# Matches a string against a regex and returns the first capture group of the matched string.
#
# - $1: **string** _as string_:
#       the string to match
# - $2: **regex** _as string_:
#       the regex
#
# Returns:
#
# - `RETURNED_VALUE`: the first capture group in the matched string.
#                     Empty if no match.
#
# ```bash
# string::regexGetFirst "name: julien" "name:(.*)"
# echo "${RETURNED_VALUE}"
# ```
#
# > Regex wiki: https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions
function string::regexGetFirst() {
  # Usage: regex "string" "regex"
  if [[ ${1} =~ ${2} ]]; then
    RETURNED_VALUE="${BASH_REMATCH[1]:-}"
  else
    RETURNED_VALUE=""
  fi
}

# ## string::microsecondsToHuman
#
# Convert microseconds to human readable format.
#
# - $1: **microseconds** _as int_:
#       the microseconds to convert
# - $2: format _as string_:
#      (optional) Can be set using the variable `_OPTION_FORMAT`.
#      the format to use (defaults to "%HH:%MM:%SS")
#      Usable formats:
#      - %HH: hours
#      - %MM: minutes
#      - %SS: seconds
#      - %LL: milliseconds
#      - %h: hours without leading zero
#      - %m: minutes without leading zero
#      - %s: seconds without leading zero
#      - %l: milliseconds without leading zero
#      - %u: microseconds without leading zero
#      - %M: total minutes
#      - %S: total seconds
#      - %L: total milliseconds
#      - %U: total microseconds
#
# Returns:
#
# - `RETURNED_VALUE`: the human readable format
#
# ```bash
# string::microsecondsToHuman 123456789
# echo "${RETURNED_VALUE}"
# ```
function string::microsecondsToHuman() {
  local -i ms="${1}"
  local format="${2:-${_OPTION_FORMAT:-"%HH:%MM:%SS"}}"

  local -i hours=$((ms / 3600 / 1000000))
  local -i minutes=$(((ms / 60 / 1000000) % 60))
  local -i seconds=$(((ms / 1000000) % 60))
  local -i milliseconds=$((ms / 1000 % 1000))
  local -i microseconds=$((ms % 1000000))

  local humanFormat="${format}"
  if [[ ${hours} -lt 10 ]]; then
    humanFormat="${humanFormat//%HH/0${hours}}"
  else
    humanFormat="${humanFormat//%HH/${hours}}"
  fi
  if [[ ${minutes} -lt 10 ]]; then
    humanFormat="${humanFormat//%MM/0${minutes}}"
  else
    humanFormat="${humanFormat//%MM/${minutes}}"
  fi
  if [[ ${seconds} -lt 10 ]]; then
    humanFormat="${humanFormat//%SS/0${seconds}}"
  else
    humanFormat="${humanFormat//%SS/${seconds}}"
  fi
  if [[ ${milliseconds} -lt 10 ]]; then
    humanFormat="${humanFormat//%LL/00${milliseconds}}"
  elif [[ ${milliseconds} -lt 100 ]]; then
    humanFormat="${humanFormat//%LL/0${milliseconds}}"
  else
    humanFormat="${humanFormat//%LL/${milliseconds}}"
  fi
  humanFormat="${humanFormat//%h/${hours}}"
  humanFormat="${humanFormat//%m/${minutes}}"
  humanFormat="${humanFormat//%s/${seconds}}"
  humanFormat="${humanFormat//%l/${milliseconds}}"
  humanFormat="${humanFormat//%u/${microseconds}}"
  humanFormat="${humanFormat//%M/$((hours * 60 + minutes))}"
  humanFormat="${humanFormat//%S/$((hours * 3600 + minutes * 60 + seconds))}"
  humanFormat="${humanFormat//%L/$(((hours * 3600 * + minutes * 60 + seconds) * 1000 + milliseconds))}"
  humanFormat="${humanFormat//%U/$((ms))}"

  RETURNED_VALUE="${humanFormat}"
}

# ## string::fitStringInScreen
#
# This function return a string that can be printed in a terminal in order to display a text
# and position the cursor at a given index in the input text.
#
# If the string is too long to fit in the screen, it will be truncated and ellipsis will be displayed
# at the beginning and/or at the end of the string.
#
# The cursor will be displayed under the character at the given index of the input text and
# it makes sure that the cursor is always visible in the screen.
#
# This function is useful to display a long prompt on a single line.
#
# An example:
#
# ```text
# inputString="This is a long string that will be displayed in the screen."
# #                                ^ input index 20
# string::fitStringInScreen "${inputString}" 20 10
# # output: "…g string…"
# #                  ^ screen cursor (at index 8)
# ```
#
# - $1: **input string** _as string_:
#       the string to display
# - $2: **input index** _as int_:
#       the index of the character (in the input string) that should be under the cursor
# - $3: **screen width** _as int_:
#       the width of the screen
#
# Returns:
#
# - `RETURNED_VALUE`: the string to display in the screen
# - `RETURNED_VALUE2`: the index at which to position the cursor on screen
#
# ```bash
# string::fitStringInScreen "This is a long string that will be displayed in the screen." 20 10
# ```
function string::fitStringInScreen() {
  local inputString="${1}"
  local -i inputIndex="${2}"
  local -i screenWidth="${3}"

  local -i inputLength=${#inputString}
  local -i screenIndex

  # compute where we will display the cursor in the display
  if ((inputIndex >= screenWidth)); then
    if ((inputIndex >= inputLength - 1)); then
      # we display it in the last position if it is at the end of the string
      screenIndex=$((screenWidth - 1))
    else
      # we display at the second last position if it is not at the end
      screenIndex=$((screenWidth - 2))
    fi
  else
    if ((inputLength > screenWidth && inputLength - inputIndex == 2)); then
      screenIndex=$((screenWidth - 2))
    else
      if ((inputLength > screenWidth && screenWidth - inputIndex == 1)); then
        # if within the display but at the last character and we will need to display ellipsis...
        screenIndex=$((screenWidth - 2))
      else
        # if it is already within the display, we display it at the right position
        screenIndex=${inputIndex}
      fi
    fi
  fi

  local -i screenLeftLength=$((screenIndex))
  local -i realLeftLength=$((inputIndex))

  local screenString=""

  # compute what to display at the left of the character under the caret (if any)
  if ((screenLeftLength > 0)); then
    if ((realLeftLength > screenLeftLength)); then
      # we can't display the whole left string, so we display ellipsis
      if ((screenLeftLength > 1)); then
        screenString+="…${inputString:$((realLeftLength - screenLeftLength + 1)):$((screenLeftLength - 1))}"
      else
        screenString+="…"
      fi
    else
      screenString+="${inputString:$((realLeftLength - screenLeftLength)):$((screenLeftLength))}"
    fi
  fi

  # compute the character to display under the caret (if any)
  if ((inputLength > 0 && inputIndex <= inputLength)); then
    screenString+="${inputString:$((inputIndex)):1}"
  fi

  # compute what to display at the right of the character under the caret (if any)
  local -i screenRightLength=$((screenWidth - screenIndex - 1))
  local -i realRightLength=$((inputLength - inputIndex - 1))

  if ((screenRightLength > 0)); then
    if ((realRightLength > screenRightLength)); then
      # we can't display the whole right string, so we display ellipsis
      if ((screenRightLength > 1)); then
        screenString+="${inputString:$((inputLength - realRightLength)):$((screenRightLength - 1))}…"
      else
        screenString+="…"
      fi
    else
      screenString+="${inputString:$((inputLength - realRightLength)):$((screenRightLength))}"
    fi
  fi

  RETURNED_VALUE="${screenString}"
  RETURNED_VALUE2=${screenIndex}
}

# ## string::truncateVisibleCharacters
#
# Truncate a string to a given number of visible characters.
# Adds an ellipsis at the end if the string is truncated.
#
# This function will truncate a string without taking into account
# the ANSI escape sequences for text formatting (i.e. the `\e[*m` format).
#
# - $1: **string** _as string_:
#       the string to truncate
# - $2: **visible characters** _as int_:
#       the number of visible characters
#
# Returns:
#
# - `RETURNED_VALUE`: the truncated string
#
# ```bash
# string::truncateVisibleCharacters "This is a long string that will be displayed in the screen." 20
# echo "${RETURNED_VALUE}"
# ```
function string::truncateVisibleCharacters() {
  local string="${1}"
  local -i visibleCharacters="${2}"

  local -i stringLength=${#string}
  if ((stringLength <= visibleCharacters)); then
    RETURNED_VALUE="${string}"
    return 0
  fi

  local -i index
  local -i visibleLength=0
  for ((index = 0; index < stringLength; index++)); do
    if [[ ${string:index:1} == $'\e' ]]; then
      index=$((index + 3))
      while [[ ${string:index:1} != "m" ]]; do
        index=$((index + 1))
      done
      continue
    fi
    visibleLength=$((visibleLength + 1))
    if ((visibleLength >= visibleCharacters)); then
      break
    fi
  done

  if ((index < stringLength)); then
    RETURNED_VALUE="${string:0:index}…"
  else
    RETURNED_VALUE="${string}"
  fi
}

function prompt::fuzzyFilterSort() {
  local pattern="${1}"
  local -n array="${2}"

  local -a originalIndexes
  declare -g -a ARRAY_MATCHES=()
  declare -g -a ARRAY_INDEXES=()
  declare -g -a ARRAY_DISTANCES=()

  local -i patternLength lineLength
  patternLength="${#pattern}"

  # make all match case insensitive
  shopt -s nocasematch

  local line patternChar lineChar
  local -i lineCharIndex patternCharIndex lastLineCharIndex distance patternFirstCharIndex itemIndex=-1

  for line in "${array[@]}"; do
    itemIndex+=1
    lineLength="${#line}"
    distance=0

    # for each character in the pattern
    patternCharIndex=0
    lineCharIndex=0
    lastLineCharIndex=0
    while (( patternCharIndex < patternLength )); do
      patternChar="${pattern:${patternCharIndex}:1}"

      # find the character in the line
      while (( lineCharIndex < lineLength )); do
        lineChar="${line:${lineCharIndex}:1}"

        if [[ ${lineChar} == "${patternChar}" ]]; then
          # if we find the character, mark the distance
          distance=$((distance + (lineCharIndex - lastLineCharIndex)))
          lastLineCharIndex=$((lineCharIndex + 1))

          # if it is the first char of the pattern, remember the index
          if (( patternCharIndex == 0 )); then
            patternFirstCharIndex=${lineCharIndex}
          fi

          # loop on the next pattern character
          break
        fi

        lineCharIndex+=1
      done

      # if we don't find the character in the line, the line is not a match
      if (( lineCharIndex >= lineLength )); then
        break
      else
        lineCharIndex+=1
      fi

      patternCharIndex+=1
    done

    # if we found all the characters in the pattern
    if (( patternCharIndex >= patternLength )); then
      ARRAY_MATCHES+=("${line}")
      ARRAY_INDEXES+=("${patternFirstCharIndex}")
      ARRAY_DISTANCES+=("${distance}")
      originalIndexes+=("${itemIndex}")
    fi

  done

  shopt -u nocasematch
  
  # sort the results
  array::sortWithCriteria ARRAY_MATCHES ARRAY_INDEXES ARRAY_DISTANCES

  # create the final correspondence array
  RETURNED_ARRAY2=()
  for i in "${RETURNED_ARRAY[@]}"; do
    RETURNED_ARRAY2+=("${originalIndexes[i]}")
  done
  RETURNED_ARRAY=("${ARRAY_MATCHES[@]}")
  
  unset ARRAY_INDEXES ARRAY_DISTANCES
}
