#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-string
source string

# ## version::compare
#
# This function allows to compare two semantic versions formatted like:
# major.minor.patch-prerelease+build
#
# - $1: **version1** _as string_:
#       the first version to compare
# - $2: **version2** _as string_:
#       the second version to compare
#
# Returns:
#
# - ${REPLY}:
#   - 0 if the versions are equal,
#   - 1 if version1 is greater,
#   - -1 if version2 is greater
#
# ```bash
# version::compare "2.3.4-prerelease+build" "1.2.3-prerelease+build"
# local comparison="${REPLY}"
# ```
#
# > The prerelease and build are ignored in the comparison.
function version::compare() {
  local version1="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local version2="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  version1="${version1#v}"
  version2="${version2#v}"

  local -i semVerIndex
  local semVerNumber1 semVerNumber2
  for semVerIndex in {0..2}; do
    string::getField version1 "${semVerIndex}" separator="."
    semVerNumber1="${REPLY%%-*}"
    semVerNumber1="${semVerNumber1%%+*}"
    string::getField version2 "${semVerIndex}" separator="."
    semVerNumber2="${REPLY%%-*}"
    semVerNumber2="${semVerNumber2%%+*}"
    if [[ ! ${semVerNumber1} =~ ^[0-9]+$ || ! ${semVerNumber2} =~ ^[0-9]+$ ]]; then
      core::fail "Failed to compare versions ⌜${version1}⌝ and ⌜${version2}⌝ because they are not valid semantic versions."
    elif (( semVerNumber1 > semVerNumber2 )); then
      REPLY=1
      return 0
    elif (( semVerNumber1 < semVerNumber2 )); then
      REPLY=-1
      return 0
    fi
  done
  REPLY=0
}

# ## version::bump
#
# This function allows to bump a semantic version formatted like:
# major.minor.patch-prerelease+build
#
# - $1: **version** _as string_:
#       the version to bump
# - $2: **level** _as string_:
#       the level to bump (major, minor, patch)
# - ${keepPreRelease} _as bool_:
#       (optional) keep the prerelease and build strings
#       (defaults to false)
#
# Returns:
#
# - ${REPLY}: the new version string
#
# ```bash
# version::bump "1.2.3-prerelease+build" "major" keepPreRelease=true
# version::bump "1.2.3-prerelease+build" "major"
# local newVersion="${REPLY}"
# ```
function version::bump() {
  local \
    version="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" \
    bumpLevel="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" \
    keepPreRelease=false \
    IFS=$' '
  shift 2
  eval "local a= ${*@Q}"

  local prerelease build modifiedVersion
  modifiedVersion="${version}-+"
  prerelease="${modifiedVersion#*-}"
  prerelease="${prerelease%%+*}"
  if [[ -n ${prerelease} ]]; then prerelease="-${prerelease%-}"; fi
  build="${modifiedVersion#*+}"
  if [[ -n ${build} ]]; then
    build="+${build%-+}"
  fi

  # bump the version
  local -i level semVerNumber semVerIndex
  level=2
  if [[ ${bumpLevel:-} == "major" ]]; then level=0; fi
  if [[ ${bumpLevel:-} == "minor" ]]; then level=1; fi
  local newVersion semVerString
  for semVerIndex in {0..2}; do
    string::getField version "${semVerIndex}" separator="."
    semVerString="${REPLY%-*}"
    if [[ ! ${semVerString} =~ ^[0-9]+$ ]]; then
      core::fail "Failed to bump the version ⌜${version}⌝ because it is not valid semantic version."
    fi
    semVerNumber="${semVerString%+}"
    if [[ semVerIndex -eq level ]]; then semVerNumber=$((semVerNumber + 1)); fi
    if [[ semVerIndex -gt level ]]; then semVerNumber=0; fi
    newVersion+="${semVerNumber}."
  done
  newVersion="${newVersion%.}"

  if [[ "${keepPreRelease}" == "true" ]]; then
    newVersion="${newVersion%.}${prerelease}${build}"
  fi

  REPLY="${newVersion}"
}

