#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## fs::toAbsolutePath
#
# This function returns the absolute path of a path.
#
# If the path exists, it can be resolved to the real path, following symlinks,
# using the option `_OPTION_REALPATH=true`.
#
# - $1: **path** _as string_:
#       The path to translate to absolute path.
# - ${_OPTION_REALPATH} _as bool_:
#       (optional) true to resolve the path to the real path, following symlinks.
#       (defaults to false)
#
# Returns:
#
# - ${RETURNED_VALUE}: The absolute path of the path.
#
# ```bash
# fs::toAbsolutePath "myPath"
# local myPathAbsolutePath="${RETURNED_VALUE}"
# ```
#
# > This is a pure bash alternative to `realpath` or `readlink`.
# > The `..` will be processed before following any symlinks, by removing
# > the immediate pathname component.
function fs::toAbsolutePath() {
  local path="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  path="${path%/}"

  # if path starts with ~, we replace it with the home directory
  if [[ ${path} == "~"* ]]; then
    path="${HOME}${path:1}"
  fi

  # check if the path is an existing directory
  if cd "${path}" &>/dev/null; then
    if [[ ${_OPTION_REALPATH:-} == "true" ]]; then
      fs::getPwdRealPath
    else
      RETURNED_VALUE="${PWD}"
    fi
    cd "${OLDPWD}" &>/dev/null || core::fail "Failed to cd back to the previous directory."
    return 0
  fi

  # check if the path is an existing file
  if cd "${path%/*}" &>/dev/null; then
    if [[ ${_OPTION_REALPATH:-} == "true" ]]; then
      fs::getPwdRealPath
      RETURNED_VALUE="${RETURNED_VALUE}/${path##*/}"
    else
      RETURNED_VALUE="${PWD}/${path##*/}"
    fi
    cd "${OLDPWD}" &>/dev/null || core::fail "Failed to cd back to the previous directory."
    return 0
  fi

  local currentDirectoryPath
  if [[ ${_OPTION_REALPATH:-} == "true" ]]; then
    fs::getPwdRealPath
    currentDirectoryPath="${RETURNED_VALUE}"
  else
    currentDirectoryPath="${PWD}"
  fi

  # TODO: from this point and for non existing path, we could loop on the path components
  # to resolve the real path starting from the left until we have a missing path component

  # if the file is already an absolute path, we return it
  if [[ ${path} == "/"* ]]; then
    RETURNED_VALUE="${path}"
    return 0
  fi

  # other cases of relative paths not handled
  RETURNED_VALUE="${currentDirectoryPath}/${path#./}"
}

# ## fs::getPwdRealPath
#
# Get the real path of the current directory.
# By default, the `${PWD}` variable is the logical path, which may contain symlinks.
#
# ```bash
# fs::getPwdRealPath
# ```
#
# Returns:
#
# - ${RETURNED_VALUE}: The realpath for the current directory.
#
# > This is a pure bash alternative to `realpath` or `readlink`.
function fs::getPwdRealPath() {
  local IFS=''
  pwd -P &>"${GLOBAL_TEMPORARY_STDOUT_FILE}"
  RETURNED_VALUE=""
  IFS='' read -rd '' RETURNED_VALUE <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || :
  RETURNED_VALUE="${RETURNED_VALUE%[[:space:]]}"
}

# ## fs::readFile
#
# Reads the content of a file and returns it in the global variable RETURNED_VALUE.
# Uses pure bash.
#
# - $1: **path** _as string_:
#       the file path to read
# - $2: max char _as int_:
#       (optional) the maximum number of characters to read
#       (defaults to 0, which means read the whole file)
#
# > If the file does not exist, the function will return an empty string instead of failing.
#
# Returns:
#
# - ${RETURNED_VALUE}: The content of the file.
#
# ```bash
# fs::readFile "/path/to/file" && local fileContent="${RETURNED_VALUE}"
# fs::readFile "/path/to/file" 500 && local fileContent="${RETURNED_VALUE}"
# ```
function fs::readFile() {
  local filePath="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -i maxCharacters="${2:-0}"

  if [[ ! -s "${filePath}" ]]; then
    RETURNED_VALUE=""
    return 0
  fi

  RETURNED_VALUE=""
  local IFS=''
  if [[ "${maxCharacters}" -gt 0 ]]; then
    read -rd '' -n "${maxCharacters}" RETURNED_VALUE <"${filePath}" || [[ -n ${RETURNED_VALUE} ]]
  else
    read -rd '' RETURNED_VALUE <"${filePath}" || [[ -n ${RETURNED_VALUE} ]] || RETURNED_VALUE=""
    # fail safe for cases where the file is suppose to not be empty but we get null string
    if [[ -z ${RETURNED_VALUE} ]]; then
      RETURNED_VALUE="$(<"${filePath}")"
    fi
  fi
}

## fs::writeToFile
#
# Write the content to a file.
#
# - $1: **path** _as string_:
#       the file path to write
# - $2: **content** _as string_:
#       The variable containing the content to write.
# - $3: append _as bool_:
#       (optional) true to append the content to the file, false otherwise
#       (defaults to false)
#
# ```bash
# fs::writeToFile "/path/to/file" "content"
# ```
#
# > - This function will overwrite the file if it already exists.
# > - If the file path does not exist, the function will create the directory tree.
# > - The main use case is to be able to mock this function during tests...
function fs::writeToFile() {
  local -n contentToWriteInFile="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  fs::createFilePathIfNeeded "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  if [[ ${3:-false} == "true" ]]; then
    printf '%s' "${contentToWriteInFile}" >>"${1}"
  else
    printf '%s' "${contentToWriteInFile}" >"${1}"
  fi
}

# ## fs::createDirectoryIfNeeded
#
# Create the directory tree if needed.
#
# - $1: **path** _as string_:
#       The directory path to create.
#
# Returns:
#
# - ${RETURNED_VALUE}: The absolute path to the directory.
#
# ```bash
# fs::createDirectoryIfNeeded "/my/directory"
# ```
function fs::createDirectoryIfNeeded() {
  fs::toAbsolutePath "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local dirPath="${RETURNED_VALUE}"

  if [[ ! -d "${dirPath}" ]]; then
    if ! mkdir -p "${dirPath}" 1>/dev/null; then
      core::fail "Failed to create the directory ⌜${dirPath}⌝."
    fi
  fi

  RETURNED_VALUE="${dirPath}"
}

# ## fs::createFilePathIfNeeded
#
# Make sure that the given file path exists.
# Create the directory tree and the file if needed.
#
# - $1: **path** _as string_:
#       the file path to create
#
# Returns:
#
# - ${RETURNED_VALUE}: The absolute path of the file.
#
# ```bash
# fs::createFilePathIfNeeded "myFile"
# ```
function fs::createFilePathIfNeeded() {
  fs::toAbsolutePath "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local filePath="${RETURNED_VALUE}"
  local parentDir="${filePath%/*}"

  fs::createDirectoryIfNeeded "${parentDir}"

  if [[ ! -f "${filePath}" ]]; then
    : >"${filePath}"
  fi

  RETURNED_VALUE="${filePath}"
}

# ## fs::cat
#
# Print the content of a file to stdout.
# This is a pure bash equivalent of cat.
#
# - $1: **path** _as string_:
#       the file to print
#
# ```bash
# fs::cat "myFile"
# ```
#
# > Also see log::printFile if you want to print a file for a user.
function fs::cat() {
  fs::readFile "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  printf '%s\n' "${RETURNED_VALUE}"
}

# ## fs::head
#
# Print the first lines of a file to stdout.
# This is a pure bash equivalent of head.
#
# - $1: **path** _as string_:
#       The file to print.
# - $2: **number of lines** _as int_:
#       The number of lines to print.
# - $3: to variable _as bool_:
#       (optional) Can be set using the variable `_OPTION_TO_VARIABLE`.
#       If true, the output will be stored in the variable `RETURNED_ARRAY`
#       instead of being printed to stdout.
#       (defaults to false)
#
# ```bash
# fs::head "myFile" 10
# ```
#
# > #TODO: faster with mapfile + quantum?
function fs::head() {
  local filePath="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -i numberOfLines="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local toVariable="${3:-${_OPTION_TO_VARIABLE:-false}}"
  RETURNED_ARRAY=()
  local IFS=$'\n' line
  nb=0
  while read -rd $'\n' line || [[ -n ${line:-} ]]; do
    if ((nb++ >= numberOfLines)); then
      break
    fi
    if [[ ${toVariable} == "true" ]]; then
      RETURNED_ARRAY+=("${line}")
    else
      printf '%s\n' "${line}"
    fi
  done <"${filePath}"
}

# ## fs::tail
#
# Print the last lines of a file to stdout.
# This is a pure bash equivalent of tail.
# However, because we have to read the whole file, it is not efficient for large files.
#
# - $1: **path** _as string_:
#       The file to print.
# - $2: **number of lines** _as int_:
#       The number of lines to print from the end of the file.
# - $3: to variable _as bool_:
#       (optional) Can be set using the variable `_OPTION_TO_VARIABLE`.
#       If true, the output will be stored in the variable `RETURNED_ARRAY`
#       instead of being printed to stdout.
#       (defaults to false)
#
# ```bash
# fs::tail "myFile" 10
# ```
#
# > #TODO: use mapfile quantum to not have to read the whole file in a single go.
function fs::tail() {
  local filePath="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -i numberOfLines="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local toVariable="${3:-${_OPTION_TO_VARIABLE:-false}}"
  RETURNED_ARRAY=()
  local IFS=$'\n'
  local -a lines
  mapfile -d $'\n' -t lines <"${filePath}"
  local -i startLine=$(( ${#lines[@]} - numberOfLines ))
  if [[ ${startLine} -lt 0 ]]; then
    startLine=0
  fi
  if [[ ${toVariable} == "true" ]]; then
    RETURNED_ARRAY=("${lines[@]:${startLine}}")
  else
    printf '%s\n' "${lines[@]:${startLine}}"
  fi
}

# ## fs::listPaths
#
# List all the paths in the given directory.
#
# - $1: **directory** _as string_:
#       the directory to list
# - $2: recursive _as bool_:
#       (optional) true to list recursively, false otherwise
#       (defaults to false)
# - $3: hidden _as bool_:
#       (optional) true to list hidden paths, false otherwise
#       (defaults to false)
# - $4: path filter function name _as string_:
#       (optional) a function name that is called to filter the paths that will be listed
#       The function should return 0 if the path is to be kept, 1 otherwise.
#       The function is called with the path as the first argument.
#       (defaults to empty string, no filter)
# - $5: directory filter function name _as string_:
#       (optional) a function name that is called to filter the directories (for recursive listing)
#       The function should return 0 if the path is to be kept, 1 otherwise.
#       The function is called with the path as the first argument.
#       (defaults to empty string, no filter)
#
# Returns:
#
# - ${RETURNED_ARRAY[@]}: An array with the list of all the paths.
#
# ```bash
# fs::listPaths "/path/to/directory" true true myFilterFunction myFilterDirectoryFunction
# for path in "${RETURNED_ARRAY[@]}"; do
#   printf '%s' "${path}"
# done
# ```
#
# > - It will correctly list files under symbolic link directories.
function fs::listPaths() {
  local directory="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local recursive="${2:-false}"
  local includeHidden="${3:-false}"
  local filterFunction="${4:-}"
  local filterDirectoryFunction="${5:-}"

  local IFS=' '

  local activatedHidden=false
  if [[ ${includeHidden} == "true" ]]; then
    # change the shell options to include hidden files
    log::trace "Activating the dotglob shell option."
    shopt -s dotglob
    activatedHidden=true
  fi

  RETURNED_ARRAY=()

  local path listOfDirectories currentDirectory

  listOfDirectories="${directory}"$'\n'
  while [[ -n ${listOfDirectories} ]]; do
    currentDirectory="${listOfDirectories%%$'\n'*}"
    listOfDirectories="${listOfDirectories#*$'\n'}"

    log::trace "Listing paths in ⌜${currentDirectory}⌝."

    for path in "${currentDirectory}"/*; do
      if [[ ${recursive} == "true" && -d "${path}" ]]; then
        if [[ -z ${filterDirectoryFunction} ]] || ${filterDirectoryFunction} "${path}"; then
          listOfDirectories+="${path}"$'\n'
          log::trace "Adding directory ⌜${path}⌝ to the search list."
        fi
      fi
      if [[ -n ${filterFunction} ]] && ! ${filterFunction} "${path}"; then
        continue
      fi
      RETURNED_ARRAY+=("${path}")
    done
  done

  if [[ ${activatedHidden} == "true" ]]; then
    shopt -u dotglob
  fi
}

# ## fs::listFiles
#
# List all the files in the given directory.
#
# - $1: **directory** _as string_:
#       the directory to list
# - $2: recursive _as bool_:
#       (optional) true to list recursively, false otherwise
#       (defaults to false)
# - $3: hidden _as bool_:
#       (optional) true to list hidden paths, false otherwise
#       (defaults to false)
# - $4: directory filter function name _as string_:
#       (optional) a function name that is called to filter the directories (for recursive listing)
#       The function should return 0 if the path is to be kept, 1 otherwise.
#       The function is called with the path as the first argument.
#       (defaults to empty string, no filter)
#
# Returns:
#
# - ${RETURNED_ARRAY[@]}: An array with the list of all the files.
#
# ```bash
# fs::listFiles "/path/to/directory" true true myFilterFunction
# for path in "${RETURNED_ARRAY[@]}"; do
#   printf '%s' "${path}"
# done
# ```
function fs::listFiles() {
  # shellcheck disable=SC2317
  function fs_listFilesReturnTrueIfFile() {
    if [[ ! -f ${1} ]]; then return 1; fi
  }
  fs::listPaths "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" "${2:-false}" "${3:-false}" fs_listFilesReturnTrueIfFile "${4:-}"
}

# ## fs::listDirectories
#
# List all the directories in the given directory.
#
# - $1: **directory** _as string_:
#       the directory to list
# - $2: recursive _as bool_:
#       (optional) true to list recursively, false otherwise
#       (defaults to false)
# - $3: hidden _as bool_:
#       (optional) true to list hidden paths, false otherwise
#       (defaults to false)
# - $4: directory filter function name _as string_:
#       (optional) a function name that is called to filter the sub directories (for recursive listing)
#       The function should return 0 if the path is to be kept, 1 otherwise.
#       The function is called with the path as the first argument.
#       (defaults to empty string, no filter)
#
# Returns:
#
# - ${RETURNED_ARRAY[@]}: An array with the list of all the files.
#
# ```bash
# fs::listDirectories "/path/to/directory" true true myFilterFunction
# for path in "${RETURNED_ARRAY[@]}"; do
#   printf '%s' "${path}"
# done
# ```
function fs::listDirectories() {
  # shellcheck disable=SC2317
  function fs_listDirectoriesReturnTrueIfDirectory() {
    if [[ ! -d ${1} ]]; then return 1; fi
  }
  fs::listPaths "${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" "${2:-false}" "${3:-false}" fs_listDirectoriesReturnTrueIfDirectory "${4:-}"
}

# ## fs::isDirectoryWritable
#
# Check if the directory is writable. Creates the directory if it does not exist.
#
# - $1: **directory** _as string_:
#       the directory to check
# - $2: test file name _as string_:
#       (optional) Can be set using the variable `_OPTION_TEST_FILE_NAME`.
#       the name of the file to create in the directory to test the write access
#
# Returns:
#
# - $?:
#   - 0 if the directory is writable
#   - 1 otherwise
#
# ```bash
# if fs::isDirectoryWritable "/path/to/directory"; then
#   echo "The directory is writable."
# fi
# ```
function fs::isDirectoryWritable() {
  local directory="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local testFile="${2:-${_OPTION_TEST_FILE_NAME:-"writable-test-${BASHPID}"}}"
  directory="${directory%/}"
  if ! mkdir -p "${directory}" &>/dev/null; then
    return 1
  fi
  local path="${1}/${testFile}"
  if (: >"${path}") &>/dev/null; then
    if ! rm -f "${path}" 1>/dev/null; then
      return 1
    fi
    return 0
  fi
  return 1
}

# ## fs::createLink
#
# Create a soft or hard link (original ← link).
#
# Reminder:
#
# - A soft (symbolic) link is a new file that contains a reference to another file or directory in the
#   form of an absolute or relative path.
# - A hard link is a directory entry that associates a new pathname with an existing
#   file (inode + data block) on a file system.
#
# See `windows::createLink` for Windows.
#
# - $1: **linked path** _as string_:
#       the path to link to (the original file)
# - $2: **link path** _as string_:
#       the path where to create the link
# - $3: hard link _as boolean_:
#       (optional) Can be set using the variable `_OPTION_HARD_LINK`.
#       True to create a hard link, false to create a symbolic link
#       (defaults to false)
# - $4: force _as boolean_:
#       (optional) Can be set using the variable `_OPTION_FORCE`.
#       True to overwrite the link or file if it already exists.
#       Otherwise, the function will fail on an existing link.
#       (defaults to true)
#
# ```bash
# fs::createLink "/path/to/link" "/path/to/linked"
# fs::createLink "/path/to/link" "/path/to/linked" true
# ```
#
# > The function uses the `ln` command.
function fs::createLink() {
  local linkedPath="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local linkPath="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local hardLink="${3:-${_OPTION_HARD_LINK:-false}}"
  local force="${3:-${_OPTION_FORCE:-true}}"

  fs::toAbsolutePath "${linkedPath}"
  linkedPath="${RETURNED_VALUE}"
  fs::toAbsolutePath "${linkPath}"
  linkPath="${RETURNED_VALUE}"

  # check if the linked path exists
  if [[ ! -e "${linkedPath}" ]]; then
    core::fail "Failed to create a link ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝, the linked path does not exist."
  fi

  # check the link path
  if [[ -f ${linkPath} || -L ${linkPath} ]]; then
    # if force, delete the link (or file) if it exists
    if [[ ${force} == true ]]; then
      if ! rm -f "${linkPath}"; then
        core::fail "Failed to delete the existing link ⌜${linkPath}⌝ to replace it."
      fi
    else
      core::fail "Failed to create a link to ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝, the link pathname already exists."
    fi
  fi

  # create link parent directory if needed
  local linkParentPath="${linkPath%/*}"
  fs::createDirectoryIfNeeded "${linkParentPath}"

  # create link
  if [[ ${hardLink} == "true" ]]; then
    if ! ln "${linkedPath}" "${linkPath}"; then
      core::fail "Failed to create the hard link ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝."
    fi
  else
    if ! ln -s "${linkedPath}" "${linkPath}"; then
      core::fail "Failed to create the symbolic link ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝."
    fi
  fi

  local linkType="symbolic"
  if [[ ${hardLink} == "true" ]]; then
    linkType="hard"
  fi
  log::debug "Created ${linkType} link: ⌜${linkedPath}⌝ ← ⌜${linkPath}⌝."
}

# ## fs::getFileLineCount
#
# Get the number of lines in a file.
#
# - $1: **path** _as string_:
#       the file path to read
#
# Returns:
#
# - ${RETURNED_VALUE}: The number of lines in the file.
#
# ```bash
# fs::getFileLineCount "/path/to/file"
# local lineCount="${RETURNED_VALUE}"
# ```
#
# TODO: fails to count the last line if empty
function fs::getFileLineCount() {
  local filePath="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -i lineCount=0
  while read -rd $'\n' || [[ -n ${REPLY:-} ]]; do
    ((lineCount++))
  done <"${filePath}"
  RETURNED_VALUE="${lineCount}"
}

# ## fs::getScriptDirectory
#
# This function returns the absolute path of the directory of the script that called it.
#
# Returns:
#
# - ${RETURNED_VALUE}: the directory of the script that called it.
#
# ```bash
# fs::getScriptDirectory
# echo "${RETURNED_VALUE}"
# ```
function fs::getScriptDirectory() {
  local scriptDirectory
  local scriptDirectory="${BASH_SOURCE[1]}"
  if [[ "${scriptDirectory}" != /* ]]; then
    # resolve relative path
    if pushd "${scriptDirectory%/*}" &>/dev/null; then
      scriptDirectory="${PWD}"
      popd &>/dev/null || :
    else
      scriptDirectory="${PWD}"
    fi
  else
    # strip filename
    scriptDirectory="${scriptDirectory%/*}"
  fi
  fs::toAbsolutePath "${scriptDirectory}"
  RETURNED_VALUE="${scriptDirectory}"
}

# ## fs::getCommandPath
#
# Get the absolute path of a command.
#
# - $1: **command** _as string_:
#       the command to find
#
# Returns:
#
# - ${RETURNED_VALUE}: The absolute path of the command (or empty if command not found).
#
# ```bash
# fs::getCommandPath "command"
# echo "${RETURNED_VALUE}"
# ```
function fs::getCommandPath() {
  local command="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  if [[ -v BASH_CMDS && -n ${BASH_CMDS[${command}]:-} ]]; then
    fs::toAbsolutePath "${BASH_CMDS[${command}]}"
    return 0
  fi

  local IFS=' '
  RETURNED_VALUE=""
  if command -v "${command}" &>"${GLOBAL_TEMPORARY_STDOUT_FILE}"; then
    IFS='' read -rd '' RETURNED_VALUE <"${GLOBAL_TEMPORARY_STDOUT_FILE}" || :
    RETURNED_VALUE="${RETURNED_VALUE%[[:space:]]}"
    fs::toAbsolutePath "${RETURNED_VALUE}"
  fi
}