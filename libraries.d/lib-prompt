#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-ansi-codes
source ansi-codes
# shellcheck source=lib-interactive
source interactive
# shellcheck source=lib-array
source array

# ## prompt::input
#
# Displays a user prompt at a given location.
#
# Allows the user to type a text in the given row between a starting column and
# ending column (included). Longer text are shifted to fit between
# the two columns.
#
# This component is a replacement for the `read -e` command, which allows
# to limit the input to a single line and which provides autocompletion.
#
# The autocompletion box can be hidden, or displayed below/above the input text
# depending on the space available on the screen.
#
# The user can type character to filter down a list of suggestions,
# navigate up and down between suggestions, insert a suggestion using
# TAB or ENTER, press ESC to close the autocompletion box, and ALT+ENTER to
# submit the input (or just ENTER when the box is closed).
#
# The autocompletion box will position itself depending on the screen size
# and the starting position of the text.
#
# The multiple options allows to use this function to ask for any user input
# as long as it is on a single line.
#
# You can define several callback functions that are called on different events:
#
# - `autocompletionOnTextUpdate`: Called when the text is updated (after each key press).
#
# - $1: **start line** _as int_:
#       The line/row at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $2: **start column** _as int_:
#       The column at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $3: stop column _as int_:
#       (optional) Can be set using the variable `_OPTION_STOP_COLUMN`.
#       The column at which to stop showing the autocompleted text.
#       Longer texts get shifted to display the end of the user input.
#       (defaults to the end of the screen)
# - $4: items array name _as string_:
#       (optional) Can be set using the variable `_OPTION_ITEMS_ARRAY_NAME`.
#       The items to display (name of a global array which contains the items).
#       If left empty, the autocompletion box will not be displayed. Useful to turn this into a simple prompt.
#       (defaults to empty)
# - $5: initial text _as string_:
#       (optional) Can be set using the variable `_OPTION_STRING`.
#       The initial string, which corresponds to the text already entered
#       by the user at the moment the autocompletion box shows up.
#       Allows to pre-filter the autocompletion.
#       (defaults to empty)
# - $6: items box max lines _as int_:
#       (optional) Can be set using the variable `_OPTION_ITEMS_BOX_MAX_HEIGHT`.
#       The maximum number of lines/rows to use for the autocompletion box.
#       If the number of items is greater than this value, the box will be scrollable.
#       (defaults to a maximized auto-computed value depending on the items and screen size)
# - $7: force items box below _as bool_:
#       (optional) Can be set using the variable `_OPTION_ITEMS_BOX_FORCE_BELOW`.
#       If true, the box is forced to be displayed below the input text.
#       Otherwise it will depend on the space required and space available below/above.
#       (defaults to false)
# - $8: show prompt _as bool_:
#       (optional) Can be set using the variable `_OPTION_ENABLE_PROMPT`.
#       If true, the prompt is displayed. If false, the prompt is hidden.
#       Useful to turn this into a simple multiple choice list.
#       (defaults to true)
# - $9: force show count _as bool_:
#       (optional) Can be set using the variable `_OPTION_ITEMS_BOX_FORCE_SHOW_COUNT`.
#       If true, the count of items is always displayed.
#       If false, the count is only displayed when we can't display all the items at once.
#       (defaults to false)
# - $10: show count at top _as bool_:
#       (optional) Can be set using the variable `_OPTION_ITEMS_BOX_SHOW_COUNT_AT_TOP`.
#       If true, the count of items will be displayed at the top of the box instead of the bottom.
#       (defaults to false)
# - $11: show left symbols _as bool_:
#       (optional) Can be set using the variable `_OPTION_SHOW_SYMBOL`.
#       If true, the left cursors are displayed (> for prompt and the ◆ for selected item).
#       Useful to display the most simple auto-completion when false.
#       (defaults to true)
# - $12: filters from n chars _as int_:
#       (optional) Can be set using the variable `_OPTION_FILTERS_FROM_N_CHARS`.
#       The minimum number of characters to type before starting to filter the items.
#       By default, the list is shown full and the user can start typing to filter.
#       Put a value superior to 0 to make it behave like a standard autocompletion.
#       When non-zero, the user can TAB to show the full list.
#       (defaults to 0)
# - $13: accept any value _as bool_:
#       (optional) Can be set using the variable `_OPTION_ACCEPT_ANY_VALUE`.
#       If true, the left cursors are displayed (> for prompt and the > for selected item).
#       Useful to display the most simple auto-completion when false.
#       (defaults to true)
# - $14: placeholder _as string_:
#       (optional) Can be set using the variable `_OPTION_PLACEHOLDER`.
#       The placeholder to display when the input is empty.
#       (defaults to empty)
# - $15: max length _as int_:
#       (optional) Can be set using the variable `_OPTION_STRING_MAX_LENGTH`.
#       The maximum length of the input string.
#       If the user types more characters, they are truncated and an error message is displayed.
#       (defaults to 99999)
# - $16: autocomplete whole line _as bool_:
#       (optional) Can be set using the variable `_OPTION_AUTOCOMPLETE_WHOLE_LINE`.
#       If true, the whole line is autocompleted (all characters are considered to filter)
#       the items. If false, only the word characters before the cursor are considered.
#       (defaults to true)
# - $17: tab opens items box _as bool_:
#       (optional) Can be set using the variable `_OPTION_TAB_OPENS_ITEMS_BOX`.
#       If true, the tab key opens the items box if it is not already open.
#       (defaults to true)
# - $18: items box allow filtering _as bool_:
#       (optional) Can be set using the variable `_OPTION_ITEMS_BOX_ALLOW_FILTERING`.
#       If true, the items can be filtered by typing characters.
#       If false, the items are displayed as is.
#       (defaults to the value of `_OPTION_ENABLE_PROMPT` or true)
# - $19: password mode _as bool_:
#       (optional) Can be set using the variable `_OPTION_PASSWORD_MODE`.
#       If true, the input is displayed as a series of stars *.
#       This mode can be activated/deactivated by pressing CTRL+P.
#       (defaults to false)
# - $20: callback function on text update _as string_:
#       (optional) Can be set using the variable `_OPTION_CALLBACK_FUNCTION_ON_TEXT_UPDATE`.
#       The name of a function to call each time the text is updated.
#       Can be used to validate the input and display an error message.
#       The function is called with no arguments but you can use the global variable `_OPTION_STRING` and
#       `_OPTION_STRING_INDEX` to access the current text and cursor position.
#       You must set:
#
#       - `RETURNED_VALUE`: The error message to display (or empty).
#       - `RETURNED_VALUE2`: A boolean to indicate if the autocompletion box should be redrawn.
#
#       (defaults to empty)
# - $21: callback function on key pressed _as string_:
#       (optional) Can be set using the variable `_OPTION_CALLBACK_FUNCTION_ON_KEY_PRESSED`.
#       The name of a function to call each time a key is pressed.
#       Can be used to customize the behavior of the prompt.
#       The function is called with the following arguments:
#
#       - $1: The key that was pressed, including special keys (CTRL+, ALT+, TAB, etc...).
#       - $2: The last character that was sent by the terminal, if any (can be empty when key is not empty).
#
#       The function must return 0 if the key press was handled, 1 otherwise.
#       (defaults to empty)
# - $22: callback function on box closed _as string_:
#       (optional) Can be set using the variable `_OPTION_CALLBACK_FUNCTION_ON_BOX_CLOSED`.
#       The name of a function to call when the autocompletion box is closed.
#       Can be used to clean up resources or to update the screen.
#       The function is called with arguments:
#
#       - $1: The top line number of the box that was just closed.
#       - $2: The left column of the box.
#       - $3: The width of the box.
#       - $4: The height of the box.
#
#       The function must return 0 to state that prompt does not have to be redrawn, 1 otherwise.
#       (defaults to empty)
#
# Returns:
#
# - $?:
#   - 0: The user pressed ENTER to validate the text.
#   - 1: The user pressed ESC to close the text box.
# - `RETURNED_VALUE`: The entered value (or empty).
# - `RETURNED_VALUE2`: The string displayed on the screen between the 2 columns at the
#                      moment when the autocompletion was closed.
#
# ```bash
# prompt::input "Select an item" item_array_name "onItemSelected" "Details"
# ```
function prompt::input() {
  _PROMPT_START_LINE="${1}"
  _PROMPT_START_COLUMN="${2}"
  _PROMPT_STOP_COLUMN="${3:-${_OPTION_STOP_COLUMN:-${GLOBAL_COLUMNS}}}"
  _PROMPT_STOP_COLUMN_AT_END="false"
  if [[ -z ${3:-${_OPTION_STOP_COLUMN:-}} ]]; then
    _PROMPT_STOP_COLUMN_AT_END="true"
  fi

  _PROMPT_ITEMS_ARRAY_NAME="${4:-${_OPTION_ITEMS_ARRAY_NAME:-}}"

  _PROMPT_STRING="${5:-${_OPTION_STRING:-}}"

  _PROMPT_ITEMS_BOX_MAX_HEIGHT="${6:-${_OPTION_ITEMS_BOX_MAX_HEIGHT:-}}"
  _PROMPT_ITEMS_BOX_FORCE_BELOW="${7:-${_OPTION_ITEMS_BOX_FORCE_BELOW:-false}}"

  _PROMPT_ENABLE_PROMPT="${8:-${_OPTION_ENABLE_PROMPT:-true}}"
  _PROMPT_ITEMS_BOX_FORCE_SHOW_COUNT="${9:-${_OPTION_ITEMS_BOX_FORCE_SHOW_COUNT:-false}}"
  _PROMPT_ITEMS_BOX_SHOW_COUNT_AT_TOP="${10:-${_OPTION_ITEMS_BOX_SHOW_COUNT_AT_TOP:-false}}"

  _PROMPT_SHOW_SYMBOL="${11:-${_OPTION_SHOW_SYMBOL:-true}}"
  _PROMPT_FILTERS_FROM_N_CHARS="${12:-${_OPTION_FILTERS_FROM_N_CHARS:-0}}"

  _PROMPT_ACCEPT_ANY_VALUE="${13:-${_OPTION_ACCEPT_ANY_VALUE:-true}}"

  _PROMPT_PLACEHOLDER="${14:-${_OPTION_PLACEHOLDER:-}}"
  _PROMPT_STRING_MAX_LENGTH="${15:-${_OPTION_STRING_MAX_LENGTH:-99999}}"

  _PROMPT_AUTOCOMPLETE_WHOLE_LINE="${16:-${_OPTION_AUTOCOMPLETE_WHOLE_LINE:-true}}"
  _PROMPT_TAB_OPENS_ITEMS_BOX="${17:-${_OPTION_TAB_OPENS_ITEMS_BOX:-true}}"
  _PROMPT_ITEMS_BOX_ALLOW_FILTERING="${18:-${_OPTION_ITEMS_BOX_ALLOW_FILTERING:-${_PROMPT_ENABLE_PROMPT}}}"
  _PROMPT_PASSWORD_MODE="${19:-${_OPTION_PASSWORD_MODE:-false}}"

  _PROMPT_CALLBACK_FUNCTION_ON_TEXT_UPDATE="${20:-${_OPTION_CALLBACK_FUNCTION_ON_TEXT_UPDATE:-}}"
  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_TEXT_UPDATE} ]] && ! command -v "${_PROMPT_CALLBACK_FUNCTION_ON_TEXT_UPDATE}" &>/dev/null; then
    core::fail "The callback function ⌜${_PROMPT_CALLBACK_FUNCTION_ON_TEXT_UPDATE}⌝ does not exist."
  fi

  _PROMPT_CALLBACK_FUNCTION_ON_KEY_PRESSED="${21:-${_OPTION_CALLBACK_FUNCTION_ON_KEY_PRESSED:-}}"
  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_KEY_PRESSED} ]] && ! command -v "${_PROMPT_CALLBACK_FUNCTION_ON_KEY_PRESSED}" &>/dev/null; then
    core::fail "The callback function ⌜${_PROMPT_CALLBACK_FUNCTION_ON_KEY_PRESSED}⌝ does not exist."
  fi

  _PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED="${22:-${_OPTION_CALLBACK_FUNCTION_ON_BOX_CLOSED:-}}"
  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED} ]] && ! command -v "${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED}" &>/dev/null; then
    core::fail "The callback function ⌜${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED}⌝ does not exist."
  fi

  _PROMPT_CALLBACK_FUNCTION_ON_ITEM_DISPLAY=""
  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_ITEM_DISPLAY} ]]; then
    if ! command -v "${_PROMPT_CALLBACK_FUNCTION_ON_ITEM_DISPLAY}" &>/dev/null; then
      core::fail "The callback function ⌜${_PROMPT_CALLBACK_FUNCTION_ON_ITEM_DISPLAY}⌝ does not exist."
    fi
  else
    _PROMPT_CALLBACK_FUNCTION_ON_ITEM_DISPLAY="prompt::getItemDisplayedString"
  fi

  _PROMPT_ITEMS_BOX_FILTER_SYNCHRONOUSLY=""
  _PROMPT_ITEMS_BOX_FILTER_WITHOUT_SORTING=""
  _PROMPT_ITEMS_BOX_FILTER_USING_GREP=""

  # set up colors
  if [[ ${VALET_CONFIG_ENABLE_COLORS:-} == "true" ]]; then
    _PROMPT_COLOR_STRING="${VALET_CONFIG_PROMPT_COLOR_STRING:-"${AC__FG_MAGENTA}"}"
    _PROMPT_COLOR_STRING_RESET="${VALET_CONFIG_PROMPT_COLOR_STRING_RESET:-"${AC__FG_RESET}"}"
    _PROMPT_COLOR_STATIC="${VALET_CONFIG_PROMPT_COLOR_STATIC:-"${AC__FG_BRIGHT_BLACK}"}"
    _PROMPT_COLOR_STATIC_RESET="${VALET_CONFIG_PROMPT_COLOR_STATIC_RESET:-"${AC__FG_RESET}"}"
    _PROMPT_COLOR_LETTER_HIGHLIGHT="${VALET_CONFIG_PROMPT_COLOR_LETTER_HIGHLIGHT:-"${AC__TEXT_INVERSE}${AC__FG_MAGENTA}"}"
    _PROMPT_COLOR_LETTER_HIGHLIGHT_RESET="${VALET_CONFIG_PROMPT_COLOR_LETTER_HIGHLIGHT_RESET:-"${AC__TEXT_NO_INVERSE}${AC__FG_RESET}"}"
    _PROMPT_COLOR_SELECTED_ITEM="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM:-"${AC__BG_BLACK}${AC__FG_WHITE}"}"
    _PROMPT_COLOR_SELECTED_ITEM_RESET="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM_RESET:-"${AC__BG_RESET}${AC__FG_RESET}"}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM_SYMBOL:-"${AC__BG_BLACK}${AC__FG_MAGENTA}"}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET:-"${AC__BG_RESET}${AC__FG_RESET}"}"
    _PROMPT_COLOR_UNSELECTED_ITEM="${VALET_CONFIG_PROMPT_COLOR_UNSELECTED_ITEM:-""}"
    _PROMPT_COLOR_UNSELECTED_ITEM_RESET="${VALET_CONFIG_PROMPT_COLOR_UNSELECTED_ITEM_RESET:-""}"
    _PROMPT_COLOR_COUNT="${VALET_CONFIG_PROMPT_COLOR_COUNT:-"${AC__FG_YELLOW}"}"
    _PROMPT_COLOR_COUNT_RESET="${VALET_CONFIG_PROMPT_COLOR_COUNT_RESET:-"${AC__FG_RESET}"}"
    _PROMPT_COLOR_VALIDATION_ERROR="${VALET_CONFIG_PROMPT_COLOR_VALIDATION_ERROR:-"${AC__FG_RED}"}"
    _PROMPT_COLOR_VALIDATION_ERROR_RESET="${VALET_CONFIG_PROMPT_COLOR_VALIDATION_ERROR_RESET:-"${AC__FG_RESET}"}"
  else
    _PROMPT_COLOR_STRING=""
    _PROMPT_COLOR_STRING_RESET=""
    _PROMPT_COLOR_STATIC=""
    _PROMPT_COLOR_STATIC_RESET=""
    _PROMPT_COLOR_LETTER_HIGHLIGHT="${AC__TEXT_UNDERLINE}"
    _PROMPT_COLOR_LETTER_HIGHLIGHT_RESET="${AC__TEXT_NO_UNDERLINE}"
    _PROMPT_COLOR_SELECTED_ITEM="${AC__TEXT_INVERSE}"
    _PROMPT_COLOR_SELECTED_ITEM_RESET="${AC__TEXT_NO_INVERSE}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL="${AC__TEXT_INVERSE}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET="${AC__TEXT_NO_INVERSE}"
    _PROMPT_COLOR_UNSELECTED_ITEM=""
    _PROMPT_COLOR_UNSELECTED_ITEM_RESET=""
    _PROMPT_COLOR_COUNT=""
    _PROMPT_COLOR_COUNT_RESET=""
    _PROMPT_COLOR_VALIDATION_ERROR="${AC__TEXT_INVERSE}"
    _PROMPT_COLOR_VALIDATION_ERROR_RESET="${AC__TEXT_NO_INVERSE}"
  fi

  # set up the left symbols (> for prompt and the > for selected item)
  if [[ ${_PROMPT_SHOW_SYMBOL} == "true" ]]; then
    _PROMPT_SYMBOL="${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-"> "}"
    _PROMPT_SYMBOL_LENGTH=${#_PROMPT_SYMBOL}
    _PROMPT_ITEMS_BOX_SYMBOL_SELECTED_ITEM="${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-"█ "}"
    _PROMPT_ITEMS_BOX_SYMBOL_UNSELECTED_ITEM="░ "
    _PROMPT_ITEMS_BOX_SYMBOL_COUNTER="░░"
    _PROMPT_ITEMS_BOX_SYMBOL_LENGTH=${#_PROMPT_ITEMS_BOX_SYMBOL_SELECTED_ITEM}
  else
    _PROMPT_SYMBOL=""
    _PROMPT_SYMBOL_LENGTH=0
    _PROMPT_ITEMS_BOX_SYMBOL_SELECTED_ITEM=""
    _PROMPT_ITEMS_BOX_SYMBOL_UNSELECTED_ITEM=""
    _PROMPT_ITEMS_BOX_SYMBOL_COUNTER=""
    _PROMPT_ITEMS_BOX_SYMBOL_LENGTH=0
  fi
  _PROMPT_ERROR_BOX_SYMBOL="█ "

  _PROMPT_KILLED_STRING=""
  _PROMPT_STRING_INDEX=${#_PROMPT_STRING}
  GLOBAL_CURSOR_LINE="${_PROMPT_START_LINE}"
  GLOBAL_CURSOR_COLUMN=$((_PROMPT_START_COLUMN + _PROMPT_SYMBOL_LENGTH + _PROMPT_STRING_INDEX))

  prompt_setItemsListVariables
  prompt_reExportFuzzyFilterFunction

  # check if we display the autocompletion box, and the initial state of the box (shown or hidden)
  if ((_PROMPT_ORIGINAL_ITEMS_COUNT > 0)); then
    _PROMPT_ITEMS_BOX_ENABLED=true
    if ((${#_PROMPT_STRING} >= _PROMPT_FILTERS_FROM_N_CHARS)); then
      _PROMPT_ITEMS_BOX_SHOWN=true
    else
      _PROMPT_ITEMS_BOX_SHOWN=false
    fi
  else
    _PROMPT_ITEMS_BOX_ENABLED=false
    _PROMPT_ITEMS_BOX_SHOWN=false
  fi
  _PROMPT_ERROR_BOX_SHOWN=false

  _PROMPT_ITEMS_BOX_REVERSE_MODE=false

  if [[ ${_PROMPT_ITEMS_BOX_ENABLED} != "true" ]]; then
    # if we don't show the box, we necessarily accept any value
    _PROMPT_ACCEPT_ANY_VALUE=true
  elif [[ ${_PROMPT_ENABLE_PROMPT} != "true" ]]; then
    # if don't show the prompt, we don't accept any value
    _PROMPT_ACCEPT_ANY_VALUE=false
  fi

  # compute properties that depend on the screen size
  prompt_setSizeVariables

  _PROMPT_LAST_KEY_PRESSED_TIME=0
  _PROMPT_NB_SUCCESSIVE_RAPID_KEY_PRESSED=0

  _PROMPT_CANCELLED=true

  # set trap so that interrupt signal sets GLOBAL_SESSION_INTERRUPTED to true
  interactive::setInterruptTrap
  # before starting to wait for inputs, we clear up the key pressed
  interactive::clearKeyPressed
  # setup the terminal to be ready for readline
  interactive::sttyInit
  # rebind some keys to call the callback function prompt_onKeyBindingPress
  interactive::rebindKeymap prompt_onKeyBindingPress

  # disable the monitor mode to avoid the "Terminated" message with exit code once the job is stopped
  shopt -u -o monitor
  # make all match case insensitive
  shopt -s nocasematch

  if [[ ${_PROMPT_ITEMS_BOX_SHOWN} == "true" ]]; then
    prompt_openItemsBox
  fi
  prompt_drawPrompt

  # main loop
  while true; do
    if interactive::waitForKeyPress -t 0.2; then
      prompt_onKeyPressed "${LAST_KEY_PRESSED}" "${LAST_KEY_PRESSED}"
    fi

    # in case of a terminal resize, we will have to redraw
    if [[ ${GLOBAL_SCREEN_REDRAW_REQUIRED:-} == "true" ]]; then
      local isItemBoxShown="${_PROMPT_ITEMS_BOX_SHOWN}"
      prompt_clearPrompt
      prompt_clearItemsBox
      prompt_clearErrorBox
      prompt_setSizeVariables
      if [[ ${isItemBoxShown} == "true" ]]; then
        prompt_openItemsBox
      fi
      prompt_drawPrompt
      GLOBAL_SCREEN_REDRAW_REQUIRED=false
    fi

    # check if the background job for async filtering is done
    if [[ -n ${GLOBAL_BACKGROUND_JOB1_PID:-} && -f ${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE:-} ]]; then
      unset -v GLOBAL_BACKGROUND_JOB1_PID
      # read the items from the file
      if [[ -s ${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE} ]]; then
        readarray -t _PROMPT_FILTERED_ITEMS <"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE}"
        readarray -t _PROMPT_FILTERED_ITEMS_CORRESPONDENCES <"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_CORRESPONDENCES_FILE}"
      else
        _PROMPT_FILTERED_ITEMS=()
        _PROMPT_FILTERED_ITEMS_CORRESPONDENCES=()
      fi
      prompt_drawItemsBox
    fi

    # break if fd 0 is closed or does not refer to a terminal.
    if [[ ! -t 0 || ${GLOBAL_SESSION_INTERRUPTED} == "true" ]]; then
      break
    fi
  done

  # clean up
  prompt_filterItemsAsyncKill
  prompt_clearErrorBox
  prompt_clearItemsBox
  prompt_clearPrompt
  interactive::sttyRestore
  interactive::restoreInterruptTrap
  shopt -s -o monitor
  shopt -u nocasematch

  if [[ ${_PROMPT_CANCELLED:-} == "true" ]]; then
    return 1
  else
    RETURNED_VALUE="${_PROMPT_STRING}"
    if ((_PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX >= 0)); then
      RETURNED_VALUE2="${_PROMPT_ORIGINAL_ITEMS[${_PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX}]}"
    else
      RETURNED_VALUE2=""
    fi
    # shellcheck disable=SC2034
    RETURNED_VALUE3=${_PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX}
  fi

  return 0
}

# compute properties that depend on the screen size
function prompt_setSizeVariables() {
  if ((_PROMPT_START_LINE > GLOBAL_LINES)); then
    _PROMPT_START_LINE=${GLOBAL_LINES}
  fi
  if ((_PROMPT_START_COLUMN > GLOBAL_COLUMNS)); then
    _PROMPT_START_COLUMN=${GLOBAL_COLUMNS}
  fi
  if ((_PROMPT_STOP_COLUMN > GLOBAL_COLUMNS)); then
    _PROMPT_STOP_COLUMN=${GLOBAL_COLUMNS}
  fi
  if [[ ${_PROMPT_STOP_COLUMN_AT_END} == "true" ]]; then
    _PROMPT_STOP_COLUMN=${GLOBAL_COLUMNS}
  fi

  _PROMPT_WIDTH=$((_PROMPT_STOP_COLUMN - _PROMPT_START_COLUMN + 1))

  if [[ ${_PROMPT_SHOW_SYMBOL} == "true" ]]; then
    _PROMPT_STRING_SCREEN_WIDTH=$((_PROMPT_WIDTH - _PROMPT_SYMBOL_LENGTH))
  else
    _PROMPT_STRING_SCREEN_WIDTH=${_PROMPT_WIDTH}
  fi
}

function prompt_setItemsListVariables() {
  _PROMPT_ITEMS_BOX_PREFERRED_WIDTH=0
  if [[ -n "${_PROMPT_ITEMS_ARRAY_NAME}" ]]; then
    local -n originalItems="${_PROMPT_ITEMS_ARRAY_NAME}"
    _PROMPT_ORIGINAL_ITEMS=("${originalItems[@]}")
    local item
    for item in "${_PROMPT_ORIGINAL_ITEMS[@]}"; do
      if ((${#item} > _PROMPT_ITEMS_BOX_PREFERRED_WIDTH)); then
        _PROMPT_ITEMS_BOX_PREFERRED_WIDTH=${#item}
        if ((_PROMPT_ITEMS_BOX_PREFERRED_WIDTH > GLOBAL_COLUMNS)); then
          break
        fi
      fi
    done
  else
    _PROMPT_ORIGINAL_ITEMS=()
  fi
  _PROMPT_ITEMS_BOX_PREFERRED_HEIGHT=${#_PROMPT_ORIGINAL_ITEMS[@]}
  if [[ ${_PROMPT_ITEMS_BOX_FORCE_SHOW_COUNT} == "true" ]]; then
    _PROMPT_ITEMS_BOX_PREFERRED_HEIGHT=$((_PROMPT_ITEMS_BOX_PREFERRED_HEIGHT + 1))
  fi

  _PROMPT_ORIGINAL_ITEMS_COUNT=${#_PROMPT_ORIGINAL_ITEMS[@]}
  _PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX=-1

  local itemCountWidth=$((8 + ${#_PROMPT_ORIGINAL_ITEMS_COUNT} * 4))
  if ((_PROMPT_ITEMS_BOX_PREFERRED_WIDTH < itemCountWidth)); then
    # the width necessary to display the count of items
    _PROMPT_ITEMS_BOX_PREFERRED_WIDTH=${itemCountWidth}
  fi

  if [[ ${_PROMPT_SHOW_SYMBOL} == "true" ]]; then
    _PROMPT_ITEMS_BOX_PREFERRED_WIDTH=$((_PROMPT_ITEMS_BOX_PREFERRED_WIDTH + _PROMPT_ITEMS_BOX_SYMBOL_LENGTH))
  fi

  if [[ ${_PROMPT_ITEMS_BOX_ALLOW_FILTERING} == "true" ]]; then
    _PROMPT_FILTERED_ITEMS=()
  else
    _PROMPT_FILTERED_ITEMS=("${_PROMPT_ORIGINAL_ITEMS[@]}")
  fi
  _PROMPT_FILTERED_ITEMS_CORRESPONDENCES=()
  _PROMPT_FILTERED_ITEMS_START_INDEX=0
  _PROMPT_FILTERED_ITEMS_SELECTED_INDEX=-1
  _PROMPT_ITEMS_BOX_FILTER_STRING=""

  # if the items are too many, we will filter them asynchronously/filter with grep
  if [[ -z ${_PROMPT_ITEMS_BOX_FILTER_SYNCHRONOUSLY} && _PROMPT_ORIGINAL_ITEMS_COUNT -gt 150 ]]; then
    _PROMPT_ITEMS_BOX_FILTER_SYNCHRONOUSLY="false"
  fi
  if [[ -z ${_PROMPT_ITEMS_BOX_FILTER_WITHOUT_SORTING} && _PROMPT_ORIGINAL_ITEMS_COUNT -gt 1000 ]]; then
    _PROMPT_ITEMS_BOX_FILTER_WITHOUT_SORTING="true"
  fi
  if [[ -z ${_PROMPT_ITEMS_BOX_FILTER_USING_GREP} && _PROMPT_ORIGINAL_ITEMS_COUNT -gt 1000 ]]; then
    if command -v grep &>/dev/null && command -v awk &>/dev/null; then
      _PROMPT_ITEMS_BOX_FILTER_USING_GREP="true"
    fi
  fi

  # initial setup of files for async filtering if not done
  if [[ ${_PROMPT_ITEMS_BOX_FILTER_SYNCHRONOUSLY:-true} != "true" && -z ${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE:-} ]]; then
    io::createTempFile
    _PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE="${RETURNED_VALUE}"
    io::createTempFile
    _PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_CORRESPONDENCES_FILE="${RETURNED_VALUE}"
  fi

  # initial setup of files for grep filtering
  if [[ ${_PROMPT_ITEMS_BOX_FILTER_USING_GREP:-true} == "true" ]]; then
    if [[ -z ${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_ORIGINAL_ITEMS:-} ]]; then
      io::createTempFile
      _PROMPT_ITEMS_BOX_FILTER_USING_GREP_ORIGINAL_ITEMS="${RETURNED_VALUE}"
      io::createTempFile
      _PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP1="${RETURNED_VALUE}"
      io::createTempFile
      _PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP2="${RETURNED_VALUE}"
    fi
    local IFS=$'\n'
    echo "${_PROMPT_ORIGINAL_ITEMS[*]}" >"${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_ORIGINAL_ITEMS}"
  fi
}

# define the callback function called when a special key is pressed
# shellcheck disable=SC2317
function prompt_onKeyBindingPress() {
  prompt_onKeyPressed "${1}" ""
}

# Called when a key is pressed.
#
# - $1: **key** _as string_:
#       The key that was pressed, including special keys (CTRL+, ALT+, TAB, etc...).
# - $2: **char sent** _as string_:
#       The last character that was sent by the terminal, if any
#       (can be empty when key is not empty).
#
function prompt_onKeyPressed() {
  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_KEY_PRESSED} ]]; then
    if "${_PROMPT_CALLBACK_FUNCTION_ON_KEY_PRESSED}" "${1}" "${2}"; then
      return 0
    fi
  fi

  case "${1}" in

  # autocompletion box
  PAGE_UP)
    prompt_changeSelectedItemIndex "-$((${_PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS:-10} - 1))"
    prompt_drawItemsBox
    ;;
  PAGE_DOWN)
    prompt_changeSelectedItemIndex "$((${_PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS:-10} - 1))"
    prompt_drawItemsBox
    ;;
  HOME | CTRL+UP)
    prompt_changeSelectedItemIndex "-$((_PROMPT_ORIGINAL_ITEMS_COUNT + 1))"
    prompt_drawItemsBox
    ;;
  END | CTRL+DOWN)
    prompt_changeSelectedItemIndex "$((_PROMPT_ORIGINAL_ITEMS_COUNT + 1))"
    prompt_drawItemsBox
    ;;
  UP)
    prompt_changeSelectedItemIndex -1
    prompt_drawItemsBox
    ;;
  DOWN)
    prompt_changeSelectedItemIndex 1
    prompt_drawItemsBox
    ;;

  # validate or exit
  $'\n' | CTRL+M | CTRL+J | NEWLINE)
    # in autocompletion mode we can only validate if we autocompletion is closed, otherwise it autocompletes
    if [[ ${_PROMPT_ITEMS_BOX_SHOWN} == "true" && ${_PROMPT_ACCEPT_ANY_VALUE} == "true" ]]; then
      prompt_autocompleteWithSelectedItem
      return 0
    fi

    # if we selected index is within the range of the filtered items
    # we can return the corresponding index in the original items
    prompt_getCurrentInitialItemsIndex
    if [[ ${RETURNED_VALUE} == "-1" ]]; then
      if [[ ${_PROMPT_ACCEPT_ANY_VALUE} != "true" ]]; then
        # make enter have no effect if we are not on a valid item and we don't accept any value
        prompt_showError "No item matching your query!"
        return 0
      fi
      _PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX=${RETURNED_VALUE}
    fi
    if [[ ${_PROMPT_ACCEPT_ANY_VALUE} == "true" && ${_PROMPT_STRING} == "" ]]; then
      # make enter have no effect if we accept any value but we have an empty string
      prompt_showError "Please enter a value!"
      return 0
    fi
    GLOBAL_SESSION_INTERRUPTED=true
    _PROMPT_CANCELLED=false
    return 0
    ;;
  TAB | CTRL+I)
    # autocompletes if the box is shown, otherwise it opens the box (if allowed)
    if [[ ${_PROMPT_ITEMS_BOX_SHOWN} == "true" ]]; then
      prompt_autocompleteWithSelectedItem
    elif [[ ${_PROMPT_TAB_OPENS_ITEMS_BOX} == "true" ]]; then
      prompt_openItemsBox
    else
      prompt_insertTextAtCurrentIndex $'\t'
      prompt_onTextChanged
    fi
    ;;
  ESC)
    if [[ ${_PROMPT_ERROR_BOX_SHOWN} == "true" ]]; then
      prompt_clearErrorBox
      return 0
    fi
    # interrupt the prompt session or close the autocompletion box
    if [[ ${_PROMPT_ACCEPT_ANY_VALUE} == "true" && ${_PROMPT_ITEMS_BOX_SHOWN} == "true" ]]; then
      prompt_clearItemsBox
      return 0
    fi
    GLOBAL_SESSION_INTERRUPTED=true
    ;;
  CTRL+Q)
    GLOBAL_SESSION_INTERRUPTED=true
    ;;

  # move the cursor
  CTRL+A)
    prompt_changePromptCursorIndex -9999999
    prompt_updateItemsBox
    prompt_drawPrompt
    ;;
  CTRL+E)
    prompt_changePromptCursorIndex 9999999
    prompt_updateItemsBox
    prompt_drawPrompt
    ;;
  LEFT | CTRL+B)
    prompt_changePromptCursorIndex -1
    prompt_updateItemsBox
    prompt_drawPrompt
    ;;
  RIGHT | CTRL+F)
    prompt_changePromptCursorIndex 1
    prompt_updateItemsBox
    prompt_drawPrompt
    ;;
  CTRL+LEFT)
    # move to beginning of the previous word
    prompt_getIndexDeltaToBeginningOfWord
    prompt_changePromptCursorIndex "${RETURNED_VALUE}"
    prompt_updateItemsBox
    prompt_drawPrompt
    ;;
  CTRL+RIGHT)
    prompt_getIndexDeltaToEndOfWord
    prompt_changePromptCursorIndex "${RETURNED_VALUE}"
    prompt_updateItemsBox
    prompt_drawPrompt
    ;;

  # modify the text
  CTRL+K)
    # kill the line from cursor to the end
    _PROMPT_KILLED_STRING="${_PROMPT_STRING:_PROMPT_STRING_INDEX}"
    if ((_PROMPT_STRING_INDEX > 0)); then
      _PROMPT_STRING="${_PROMPT_STRING:0:_PROMPT_STRING_INDEX}"
    else
      _PROMPT_STRING=""
    fi
    prompt_clearItemsBox
    prompt_onTextChanged
    ;;
  CTRL+Y)
    # yank the killed string at cursor position
    if [[ -n ${_PROMPT_KILLED_STRING:-} ]]; then
      prompt_insertTextAtCurrentIndex "${_PROMPT_KILLED_STRING}"
      prompt_onTextChanged
    fi
    ;;
  DEL | CTRL+D)
    # delete the character under the cursor
    local tempUserString
    if ((_PROMPT_STRING_INDEX > 0)); then
      tempUserString="${_PROMPT_STRING:0:${_PROMPT_STRING_INDEX}}"
    else
      tempUserString=""
    fi
    if ((_PROMPT_STRING_INDEX < ${#_PROMPT_STRING} - 1)); then
      tempUserString+="${_PROMPT_STRING:_PROMPT_STRING_INDEX+1}"
    fi
    _PROMPT_STRING="${tempUserString}"
    prompt_onTextChanged
    ;;
  BACKSPACE | CTRL+H)
    # delete the character before the cursor
    if ((_PROMPT_STRING_INDEX > 0)); then
      if ((_PROMPT_STRING_INDEX > 1)); then
        _PROMPT_STRING="${_PROMPT_STRING:0:_PROMPT_STRING_INDEX-1}${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      else
        _PROMPT_STRING="${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      fi
    fi
    prompt_changePromptCursorIndex -1
    prompt_onTextChanged
    ;;
  CTRL+DEL)
    # delete all chars from the cursor to the end of (this or next) word
    local -i oldIndex=${_PROMPT_STRING_INDEX}
    prompt_getIndexDeltaToEndOfWord
    prompt_changePromptCursorIndex "${RETURNED_VALUE}"
    if ((_PROMPT_STRING_INDEX > oldIndex)); then
      _PROMPT_KILLED_STRING="${_PROMPT_STRING:${oldIndex}:_PROMPT_STRING_INDEX-oldIndex}"
      if ((oldIndex > 0)); then
        _PROMPT_STRING="${_PROMPT_STRING:0:${oldIndex}}${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      else
        _PROMPT_STRING="${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      fi
      _PROMPT_STRING_INDEX=${oldIndex}
    fi
    prompt_onTextChanged
    ;;
  CTRL+BACKSPACE | CTRL+W)
    # delete all chars before the cursor until reaching a space
    local -i oldIndex=${_PROMPT_STRING_INDEX}
    prompt_getIndexDeltaToBeginningOfWord
    prompt_changePromptCursorIndex "${RETURNED_VALUE}"
    if ((oldIndex > _PROMPT_STRING_INDEX)); then
      _PROMPT_KILLED_STRING="${_PROMPT_STRING:_PROMPT_STRING_INDEX:oldIndex-_PROMPT_STRING_INDEX}"
      if ((_PROMPT_STRING_INDEX > 0)); then
        _PROMPT_STRING="${_PROMPT_STRING:0:_PROMPT_STRING_INDEX}${_PROMPT_STRING:oldIndex}"
      else
        _PROMPT_STRING="${_PROMPT_STRING:oldIndex}"
      fi
    fi
    prompt_onTextChanged
    ;;
  CTRL+P)
    # reveal/hide the prompt
    if [[ ${_PROMPT_PASSWORD_MODE} == "true" ]]; then
      _PROMPT_PASSWORD_MODE=false
    else
      _PROMPT_PASSWORD_MODE=true
    fi
    prompt_drawPrompt
    ;;
  *)
    # Case of keys that are supposed to only affect the search string
    # insert the character at the cursor position
    if [[ -z ${2} ]]; then
      return 0
    fi

    # if it is too long warn the user
    if ((${#_PROMPT_STRING} >= _PROMPT_STRING_MAX_LENGTH)); then
      prompt_showError "The input can't exceed a maximum of ${_PROMPT_STRING_MAX_LENGTH} characters."
      # read the stream until the end to clear the buffer
      local IFS
      IFS='' read -d '' -sr -t 0.2 _ || :
      return 0
    fi

    prompt_insertTextAtCurrentIndex "${2}"
    prompt_onTextChanged

    # here we handle the case where the user pastes a string (or spam a key)
    core::getProgramElapsedMicroseconds
    if ((RETURNED_VALUE - _PROMPT_LAST_KEY_PRESSED_TIME < 300000)); then
      # key pressed under 100ms of the last
      _PROMPT_NB_SUCCESSIVE_RAPID_KEY_PRESSED=$((_PROMPT_NB_SUCCESSIVE_RAPID_KEY_PRESSED + 1))
    else
      _PROMPT_NB_SUCCESSIVE_RAPID_KEY_PRESSED=0
    fi
    _PROMPT_LAST_KEY_PRESSED_TIME=${RETURNED_VALUE}
    if ((_PROMPT_NB_SUCCESSIVE_RAPID_KEY_PRESSED > 10)); then
      # if we have 6 rapid successive key pressed, we consider it as a paste
      local IFS copiedText
      IFS='' read -d '' -s -r -t 0.2 copiedText 2>/dev/null || :
      if [[ -n ${copiedText:-} ]]; then
        prompt_insertTextAtCurrentIndex "${copiedText}"
        prompt_onTextChanged
        return 0
      fi
    fi

    # check if we need to open the items box
    if [[ ${_PROMPT_ITEMS_BOX_SHOWN} != "true" && ${2:-} != " " ]]; then
      if [[ ${_PROMPT_AUTOCOMPLETE_WHOLE_LINE} == "true" ]]; then
        if ((${#_PROMPT_STRING} >= _PROMPT_FILTERS_FROM_N_CHARS)); then
          prompt_openItemsBox
          return 0
        fi
      else
        # count the number of characters that are not spaces before the cursor
        local -i count=0
        while [[ ${count} -lt ${_PROMPT_FILTERS_FROM_N_CHARS} && $((_PROMPT_STRING_INDEX - count - 1)) -gt 0 && ${_PROMPT_STRING:_PROMPT_STRING_INDEX-count-1:1} == [^[:space:]] ]]; do
          count+=1
        done
        if ((count >= _PROMPT_FILTERS_FROM_N_CHARS)); then
          prompt_openItemsBox
          return 0
        fi
      fi
    fi
    ;;
  esac
}

function prompt_onTextChanged() {
  local shownError=false

  # close error box if shown
  if [[ ${_PROMPT_ERROR_BOX_SHOWN} == "true" ]]; then
    prompt_clearErrorBox
  fi

  # truncate the string if it is too long and warn the user
  if ((${#_PROMPT_STRING} > _PROMPT_STRING_MAX_LENGTH)); then
    _PROMPT_STRING="${_PROMPT_STRING:0:_PROMPT_STRING_MAX_LENGTH}"
    if ((_PROMPT_STRING_INDEX > _PROMPT_STRING_MAX_LENGTH)); then
      _PROMPT_STRING_INDEX=${_PROMPT_STRING_MAX_LENGTH}
    fi
    prompt_showError "The input exceeds the maximum of ${_PROMPT_STRING_MAX_LENGTH} characters, it has been truncated."
    shownError=true

    # read the stream until the end to clear the buffer
    local IFS
    IFS='' read -d '' -sr -t 0.2 _ || :
  fi

  # call the callback function on text update if it is enabled (and we did not just update the cursor)
  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_TEXT_UPDATE} ]]; then
    ${_PROMPT_CALLBACK_FUNCTION_ON_TEXT_UPDATE}
    if [[ -n ${RETURNED_VALUE} ]]; then
      prompt_showError "${RETURNED_VALUE}"
      shownError=true
    fi
    if [[ ${RETURNED_VALUE2:-false} == "true" ]]; then
      prompt_drawItemsBox
    fi
  fi

  # update the prompt
  prompt_drawPrompt

  # filter the items and update the items box
  if [[ ${shownError} != "true" ]]; then
    prompt_updateItemsBox
  fi
}

# Draw the prompt line
function prompt_drawPrompt() {
  if [[ ${_PROMPT_ENABLE_PROMPT} != "true" ]]; then
    return 0
  fi

  # use interactive::showStringInScreen with global the variables: _PROMPT_STRING, _PROMPT_STRING_INDEX, _PROMPT_STRING_SCREEN_WIDTH
  prompt_getDisplayedPromptString
  GLOBAL_CURSOR_LINE="${_PROMPT_START_LINE}"
  GLOBAL_CURSOR_COLUMN=$((_PROMPT_START_COLUMN + _PROMPT_SYMBOL_LENGTH + RETURNED_VALUE2))

  if [[ ${_PROMPT_PASSWORD_MODE} == "true" ]]; then
    RETURNED_VALUE="${RETURNED_VALUE//[^…]/*}"
  fi
  if [[ -z ${RETURNED_VALUE} && -n ${_PROMPT_PLACEHOLDER} ]]; then
    RETURNED_VALUE="${_PROMPT_COLOR_STATIC}${_PROMPT_PLACEHOLDER}${_PROMPT_COLOR_STATIC_RESET}"
  fi

  printf '%s' "${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}${_PROMPT_START_LINE};${_PROMPT_START_COLUMN}${__AC__TO}${AC__ERASE__}${_PROMPT_WIDTH}${__AC_CHARS}"$'\r'"${_PROMPT_COLOR_STATIC}${_PROMPT_SYMBOL}${_PROMPT_COLOR_STATIC_RESET}${_PROMPT_COLOR_STRING}${RETURNED_VALUE}${_PROMPT_COLOR_STRING_RESET}${AC__CURSOR_MOVE__}${GLOBAL_CURSOR_LINE};${GLOBAL_CURSOR_COLUMN}${__AC__TO}${AC__CURSOR_SHOW}"
}

# Clear the prompt line
function prompt_clearPrompt() {
  if [[ ${_PROMPT_ENABLE_PROMPT} != "true" ]]; then
    return 0
  fi

  printf '%s' "${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}$((_PROMPT_START_LINE));$((_PROMPT_START_COLUMN))${__AC__TO}${AC__ERASE__}$((_PROMPT_WIDTH))${__AC_CHARS}${AC__CURSOR_SHOW}"
}

function prompt_openItemsBox() {
  _PROMPT_ITEMS_BOX_SHOWN=true

  # position the box aligned with the current word
  prompt_setCurrentWord
  local preferredLeftPosition="$((GLOBAL_CURSOR_COLUMN - ${#_PROMPT_CURRENT_WORD} - _PROMPT_ITEMS_BOX_SYMBOL_LENGTH))"
  if ((preferredLeftPosition < _PROMPT_START_COLUMN)); then
    preferredLeftPosition="${_PROMPT_START_COLUMN}"
  fi

  # compute the size of the autocomplete box
  interactive::getBestAutocompleteBox "${_PROMPT_START_LINE}" "${preferredLeftPosition}" "${_PROMPT_ITEMS_BOX_PREFERRED_HEIGHT}" "${_PROMPT_ITEMS_BOX_PREFERRED_WIDTH}" "${_PROMPT_ITEMS_BOX_MAX_HEIGHT}" "${_PROMPT_ITEMS_BOX_FORCE_BELOW}" "${_PROMPT_ENABLE_PROMPT}"
  _PROMPT_ITEMS_BOX_TOP="${RETURNED_VALUE}"
  _PROMPT_ITEMS_BOX_LEFT="${RETURNED_VALUE2}"
  _PROMPT_ITEMS_BOX_WIDTH="${RETURNED_VALUE3}"
  _PROMPT_ITEMS_BOX_HEIGHT="${RETURNED_VALUE4}"

  _PROMPT_ITEMS_BOX_REVERSE_MODE="false"
  if ((_PROMPT_ITEMS_BOX_TOP < _PROMPT_START_LINE)); then
    _PROMPT_ITEMS_BOX_REVERSE_MODE="true"
  fi

  prompt_filterItems
  prompt_drawItemsBox
}

function prompt_updateItemsBox() {
  # if the box is opened and the previous character is a space, we close the box
  if [[ ${_PROMPT_ITEMS_BOX_SHOWN} == "true" && ${_PROMPT_AUTOCOMPLETE_WHOLE_LINE} != "true" && ${_PROMPT_STRING_INDEX} -gt 0 && ${_PROMPT_STRING:_PROMPT_STRING_INDEX-1:1} == [[:space:]] ]]; then
    prompt_clearItemsBox
  fi

  if [[ ${_PROMPT_ITEMS_BOX_SHOWN} != "true" ]]; then
    return 0
  fi

  # filter the items and update the items box
  prompt_setCurrentWord
  prompt_filterItems
  prompt_drawItemsBox
}

function prompt_setCurrentWord() {
  if [[ ${_PROMPT_AUTOCOMPLETE_WHOLE_LINE} == "true" ]]; then
    _PROMPT_CURRENT_WORD="${_PROMPT_STRING}"
  else
    # we take the current word
    if [[ ${_PROMPT_STRING_INDEX} -eq 0 || ${_PROMPT_STRING:_PROMPT_STRING_INDEX-1:1} == [[:space:]] ]]; then
      # if we are at the beginning of the line, or the previous character is a space
      _PROMPT_CURRENT_WORD=""
    else
      prompt_getIndexDeltaToBeginningOfWord
      if ((RETURNED_VALUE < 0)); then
        _PROMPT_CURRENT_WORD="${_PROMPT_STRING:_PROMPT_STRING_INDEX+RETURNED_VALUE:-1*RETURNED_VALUE}"
      else
        _PROMPT_CURRENT_WORD=""
      fi
    fi
  fi
}

function prompt_filterItems() {
  if [[ ${_PROMPT_ITEMS_BOX_ALLOW_FILTERING} != "true" ]]; then
    return 0
  fi

  if [[ ${_PROMPT_ITEMS_BOX_FILTER_SYNCHRONOUSLY:-true} != "true" ]]; then
    # asynchronous filtering, kill an already running background job
    prompt_filterItemsAsyncKill
  fi

  _PROMPT_ITEMS_BOX_FILTER_STRING="${_PROMPT_CURRENT_WORD}"

  # case where we can return the original items
  if [[ -z ${_PROMPT_ITEMS_BOX_FILTER_STRING} ]]; then
    _PROMPT_FILTERED_ITEMS=("${_PROMPT_ORIGINAL_ITEMS[@]}")
    _PROMPT_FILTERED_ITEMS_CORRESPONDENCES=()
    return 0
  fi

  if [[ ${_PROMPT_ITEMS_BOX_FILTER_SYNCHRONOUSLY:-true} == "true" ]]; then
    prompt_fuzzyFilterSort "${_PROMPT_ITEMS_BOX_FILTER_STRING}" _PROMPT_ORIGINAL_ITEMS
  else
    # asynchronous filtering
    rm -f "${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE}" &>/dev/null || :
    prompt_filterItemsAsync 1>&2 &
    GLOBAL_BACKGROUND_JOB1_PID="$!"
  fi
}

function prompt_filterItemsAsync() {
  if [[ ${_PROMPT_ITEMS_BOX_FILTER_USING_GREP} == "true" ]]; then
    # sort with grep and awk
    : >"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_CORRESPONDENCES_FILE}"
    rm "${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP2}" &>/dev/null || :

    # prepare the regex for the pattern
    # the -> '([^t]*)(t[^h]*h[^e]*e)'
    local patternRegex="([^${_PROMPT_ITEMS_BOX_FILTER_STRING:0:1}]*)(${_PROMPT_ITEMS_BOX_FILTER_STRING:0:1}"
    local -i index
    for ((index = 1; index < ${#_PROMPT_ITEMS_BOX_FILTER_STRING}; index++)); do
      patternRegex+="[^${_PROMPT_ITEMS_BOX_FILTER_STRING:index:1}]*${_PROMPT_ITEMS_BOX_FILTER_STRING:index:1}"
    done
    patternRegex+=")"

    grep --ignore-case --line-number "${patternRegex//[()]/}" "${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_ORIGINAL_ITEMS}" >"${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP1}"
    awk "
      BEGIN {
        IGNORECASE = 1;
      }
      # Store each line and its key for sorting
      {
        if (match(\$0, /^[0-9]+:${patternRegex}/, m)) {
          idx = idx + 1;
          # Store the full line
          lines[idx] = \$0
          # Store the keys for sorting
          keys[idx] = sprintf(\"%d%04d%04d\", length(m[1]), length(m[2]), length(lines[idx]))
        }
      }
      END {
        # Sort the data
        n = length(lines)
        quicksort(keys, lines, 1, n)

        # Print sorted results
        for (i = 1; i <= n; i++) {
          semiColonIndex = index(lines[i], \":\");
          idx = substr(lines[i], 0, semiColonIndex - 1) - 1;
          print substr(lines[i], semiColonIndex + 1) >> \"${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP2}\"
          print idx >> \"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_CORRESPONDENCES_FILE}\"
        }
      }
      # Quicksort implementation from https://stackoverflow.com/questions/17048188/how-to-use-awk-sort-by-column-3
      function quicksort(keys, lines, left, right) {
        if (left >= right) return

        # Choose pivot (middle element)
        pivot_idx = int((left + right) / 2)
        pivot = keys[pivot_idx]

        # Partition
        i = left
        j = right
        while (i <= j) {
          while (compare(keys[i], pivot) < 0) i++
          while (compare(keys[j], pivot) > 0) j--
          if (i <= j) {
            temp_key = keys[i]
            temp_line = lines[i]
            keys[i] = keys[j]
            lines[i] = lines[j]
            keys[j] = temp_key
            lines[j] = temp_line
            i++
            j--
          }
        }
        # Recursive calls
        if (left < j) quicksort(keys, lines, left, j)
        if (i < right) quicksort(keys, lines, i, right)
      }
      function compare(a, b) { return (a + 0) - (b + 0) }
    " "${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP1}"

    if [[ -f ${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP2} ]]; then
      mv "${_PROMPT_ITEMS_BOX_FILTER_USING_GREP_TEMP2}" "${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE}"
    else
      : >"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE}"
    fi
  else
    # sort with bash
    prompt_fuzzyFilterSort "${_PROMPT_ITEMS_BOX_FILTER_STRING}" _PROMPT_ORIGINAL_ITEMS
    local IFS=$'\n'
    if ((${#_PROMPT_FILTERED_ITEMS[@]} > 0)); then
      echo "${_PROMPT_FILTERED_ITEMS[*]}" >"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE}"
      echo "${_PROMPT_FILTERED_ITEMS_CORRESPONDENCES[*]}" >"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_CORRESPONDENCES_FILE}"
    else
      : >"${_PROMPT_ITEMS_BOX_ASYNC_FILTERED_ITEMS_FILE}"
    fi
  fi
}

function prompt_filterItemsAsyncKill() {
  if [[ -n ${GLOBAL_BACKGROUND_JOB1_PID:-} ]]; then
    kill "${GLOBAL_BACKGROUND_JOB1_PID}" &>/dev/null || :
    unset -v GLOBAL_BACKGROUND_JOB1_PID
  fi
}

# Draw the autocompletion box
function prompt_drawItemsBox() {
  if [[ ${_PROMPT_ITEMS_BOX_ENABLED} != "true" || ${_PROMPT_ITEMS_BOX_SHOWN} != "true" || _PROMPT_ITEMS_BOX_HEIGHT -le 0 ]]; then
    return 0
  fi

  # clear the error box
  if [[ ${_PROMPT_ERROR_BOX_SHOWN} == "true" ]]; then
    prompt_clearErrorBox
  fi

  # check if we display the item count
  _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS="${_PROMPT_ITEMS_BOX_HEIGHT}"
  local showCount=false
  local showCountAtTop=0
  if [[ ${_PROMPT_ITEMS_BOX_FORCE_SHOW_COUNT} == "true" || ${#_PROMPT_FILTERED_ITEMS[@]} -gt ${_PROMPT_ITEMS_BOX_HEIGHT} || ${#_PROMPT_FILTERED_ITEMS[@]} -ne ${_PROMPT_ORIGINAL_ITEMS_COUNT} ]]; then
    if ((_PROMPT_ITEMS_BOX_HEIGHT > 1 || (_PROMPT_ITEMS_BOX_HEIGHT == 1 && ${#_PROMPT_FILTERED_ITEMS[@]} == 0))); then
      # we show the count if:
      # - we force its display
      # - we have more items than the box can display
      # - we display less items than the original items
      showCount=true
      if [[ ${_PROMPT_ITEMS_BOX_SHOW_COUNT_AT_TOP} == "true" ]]; then
        showCountAtTop=1
      fi
      _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS=$((_PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS - 1))
    fi
  fi

  # make sure to select an existing index regarding the filtered items +
  # make sure it is in the view
  prompt_changeSelectedItemIndex 0

  local toPrint="${AC__CURSOR_HIDE}"

  # draw the items
  _PROMPT_ITEMS_BOX_ITEM_WIDTH="$((_PROMPT_ITEMS_BOX_WIDTH - _PROMPT_ITEMS_BOX_SYMBOL_LENGTH))"

  local -i line
  local -i showAtLine
  for ((line = 0; line < _PROMPT_ITEMS_BOX_HEIGHT - showCountAtTop; line++)); do
    if [[ ${_PROMPT_ITEMS_BOX_REVERSE_MODE} == "true" ]]; then
      showAtLine=$((_PROMPT_ITEMS_BOX_TOP + _PROMPT_ITEMS_BOX_HEIGHT - 1 - line - showCountAtTop))
    else
      showAtLine=$((_PROMPT_ITEMS_BOX_TOP + line + showCountAtTop))
    fi
    index=$((_PROMPT_FILTERED_ITEMS_START_INDEX + line))

    # position and erase the line
    toPrint+="${AC__CURSOR_MOVE__}${showAtLine};${_PROMPT_ITEMS_BOX_LEFT}${__AC__TO}${AC__ERASE__}${_PROMPT_ITEMS_BOX_WIDTH}${__AC_CHARS}"

    if ((index >= ${#_PROMPT_FILTERED_ITEMS[@]})); then
      # nothing to show for this line
      continue
    fi

    if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED} ]]; then
      if "${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED}" "${_PROMPT_ITEMS_BOX_TOP}" "${_PROMPT_ITEMS_BOX_LEFT}" "${_PROMPT_ITEMS_BOX_WIDTH}" "${_PROMPT_ITEMS_BOX_HEIGHT}"; then
        return 0
      fi
    fi

    # get the item display string in RETURNED_VALUE
    _PROMPT_ITEMS_BOX_ITEM_DISPLAYED="${_PROMPT_FILTERED_ITEMS[${index}]}"
    "${_PROMPT_CALLBACK_FUNCTION_ON_ITEM_DISPLAY}"

    if ((index == _PROMPT_FILTERED_ITEMS_SELECTED_INDEX)); then
      # highlight the selected item
      toPrint+="${_PROMPT_COLOR_SELECTED_ITEM_SYMBOL}${_PROMPT_ITEMS_BOX_SYMBOL_SELECTED_ITEM}${_PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET}${_PROMPT_COLOR_SELECTED_ITEM}${_PROMPT_ITEMS_BOX_ITEM_DISPLAYED}${_PROMPT_COLOR_SELECTED_ITEM_RESET}"
    else
      toPrint+="${_PROMPT_COLOR_STATIC}${_PROMPT_ITEMS_BOX_SYMBOL_UNSELECTED_ITEM}${_PROMPT_COLOR_STATIC_RESET}${_PROMPT_COLOR_UNSELECTED_ITEM}${_PROMPT_ITEMS_BOX_ITEM_DISPLAYED}${_PROMPT_COLOR_UNSELECTED_ITEM_RESET}"
    fi
  done

  # display the items count (nb filtered items/nb total items)
  if [[ ${showCount} == "true" ]]; then
    local itemsCounter
    local -i itemCounterLength

    if [[ -n ${GLOBAL_BACKGROUND_JOB1_PID:-} ]]; then
      # case where we are filtering asynchronously, we display a loading message
      if ((_PROMPT_ITEMS_BOX_WIDTH - _PROMPT_ITEMS_BOX_SYMBOL_LENGTH >= 11)); then
        itemsCounter=" ${_PROMPT_COLOR_COUNT}Filtering…${_PROMPT_COLOR_COUNT_RESET}"
        itemCounterLength=11
      else
        itemsCounter=" ${_PROMPT_COLOR_COUNT}…${_PROMPT_COLOR_COUNT_RESET}"
        itemCounterLength=2
      fi
    else
      # case where we display the count
      local lastItemNumber=$((_PROMPT_FILTERED_ITEMS_START_INDEX + _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS))
      if [[ ${_PROMPT_ITEMS_BOX_ALLOW_FILTERING} != "true" ]]; then
        # case of ' 00-00'
        local itemCounterLength=$((2 + ${#lastItemNumber} * 2))
        printf -v itemsCounter " %s%0${#lastItemNumber}i-%i%s" "${_PROMPT_COLOR_COUNT}" "${_PROMPT_FILTERED_ITEMS_START_INDEX}" "${lastItemNumber}" "${_PROMPT_COLOR_COUNT_RESET}"
      else
        itemCounterLength=$((7 + ${#_PROMPT_ORIGINAL_ITEMS_COUNT} * 2 + ${#lastItemNumber} * 2))
        if ((_PROMPT_ITEMS_BOX_WIDTH - _PROMPT_ITEMS_BOX_SYMBOL_LENGTH >= itemCounterLength && _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS > 1)); then
          # case of ' 00-00 of 00/00'
          printf -v itemsCounter " %s%0${#lastItemNumber}i-%i%s of %s%0${#_PROMPT_ORIGINAL_ITEMS_COUNT}i%s/%i%s" "${_PROMPT_COLOR_COUNT}" "${_PROMPT_FILTERED_ITEMS_START_INDEX}" "${lastItemNumber}" "${_PROMPT_COLOR_COUNT_RESET}${_PROMPT_COLOR_STATIC}" "${_PROMPT_COLOR_STATIC_RESET}${_PROMPT_COLOR_COUNT}" "${#_PROMPT_FILTERED_ITEMS[@]}" "${_PROMPT_COLOR_COUNT_RESET}${_PROMPT_COLOR_STATIC}" "${_PROMPT_ORIGINAL_ITEMS_COUNT}" "${_PROMPT_COLOR_STATIC_RESET}"
        else
          # case of ' 00/00'
          local itemCounterLength=$((2 + ${#_PROMPT_ORIGINAL_ITEMS_COUNT} * 2))
          printf -v itemsCounter " %s%0${#_PROMPT_ORIGINAL_ITEMS_COUNT}i%s/%i%s" "${_PROMPT_COLOR_COUNT}" "${#_PROMPT_FILTERED_ITEMS[@]}" "${_PROMPT_COLOR_COUNT_RESET}${_PROMPT_COLOR_STATIC}" "${_PROMPT_ORIGINAL_ITEMS_COUNT}" "${_PROMPT_COLOR_STATIC_RESET}"
        fi
      fi

      if ((itemCounterLength > _PROMPT_ITEMS_BOX_WIDTH - _PROMPT_ITEMS_BOX_SYMBOL_LENGTH)); then
        # case where we do not have the space to display the count
        itemCounterLength=0
        itemsCounter=""
      fi
    fi

    if [[ ${_PROMPT_ITEMS_BOX_REVERSE_MODE} == "true" ]]; then
      showAtLine=$((showCountAtTop == 1 ? _PROMPT_ITEMS_BOX_TOP + _PROMPT_ITEMS_BOX_HEIGHT - 1 : _PROMPT_ITEMS_BOX_TOP + _PROMPT_ITEMS_BOX_HEIGHT - 1 - _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS))
    else
      showAtLine=$((showCountAtTop == 1 ? _PROMPT_ITEMS_BOX_TOP : _PROMPT_ITEMS_BOX_TOP + _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS))
    fi

    toPrint+="${AC__CURSOR_MOVE__}${showAtLine};${_PROMPT_ITEMS_BOX_LEFT}${__AC__TO}${_PROMPT_COLOR_STATIC}${_PROMPT_ITEMS_BOX_SYMBOL_COUNTER}${AC__REPEAT__}$((_PROMPT_ITEMS_BOX_WIDTH - _PROMPT_ITEMS_BOX_SYMBOL_LENGTH - itemCounterLength))${__AC__LAST_CHAR}${_PROMPT_COLOR_STATIC_RESET}${itemsCounter}"
  fi

  printf '%s%s' "${toPrint}" "${AC__CURSOR_MOVE__}${GLOBAL_CURSOR_LINE};${GLOBAL_CURSOR_COLUMN}${__AC__TO}${AC__CURSOR_SHOW}"
}

# Clear the items box
function prompt_clearItemsBox() {
  if [[ ${_PROMPT_ITEMS_BOX_ENABLED} != "true" || ${_PROMPT_ITEMS_BOX_SHOWN} != "true" || _PROMPT_ITEMS_BOX_HEIGHT -le 0 ]]; then
    return 0
  fi

  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED} ]]; then
    if "${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED}" "${_PROMPT_ITEMS_BOX_TOP}" "${_PROMPT_ITEMS_BOX_LEFT}" "${_PROMPT_ITEMS_BOX_WIDTH}" "${_PROMPT_ITEMS_BOX_HEIGHT}"; then
      return 0
    fi
  fi

  interactive::clearBox "${_PROMPT_ITEMS_BOX_TOP}" "${_PROMPT_ITEMS_BOX_LEFT}" "${_PROMPT_ITEMS_BOX_WIDTH}" "${_PROMPT_ITEMS_BOX_HEIGHT}"

  _PROMPT_ITEMS_BOX_SHOWN=false
}

# ## prompt::getItemDisplayedString (private)
#
# Truncate a string to a given number of visible characters.
# Adds an ellipsis at the end if the string is truncated.
#
# This function will truncate a string without taking into account
# the ANSI escape sequences for text formatting (i.e. the `\e[*m` format).
#
# - $_PROMPT_ITEMS_BOX_ITEM_DISPLAYED: **string** _as string_:
#       the string to truncate
# - $_PROMPT_ITEMS_BOX_ITEM_WIDTH: **visible characters** _as int_:
#       the number of visible characters
# - $_PROMPT_ITEMS_BOX_FILTER_STRING: **search string** _as string_:
#       the string to search for in the string
#
# Returns:
#
# - `RETURNED_VALUE`: the truncated string
#
# ```bash
# prompt::getItemDisplayedString "This is a long string that will be displayed in the screen." 20
# echo "${RETURNED_VALUE}"
# ```
function prompt::getItemDisplayedString() {
  local -i stringLength=${#_PROMPT_ITEMS_BOX_ITEM_DISPLAYED}
  if [[ -z ${_PROMPT_ITEMS_BOX_FILTER_STRING} && ${stringLength} -le ${_PROMPT_ITEMS_BOX_ITEM_WIDTH} ]]; then
    # no filter string, no need to truncate
    return 0
  fi

  local itemDisplayed="" itemChunk itemChunkPiece
  local -i searchStringIndex=0 itemDisplayedLength=0
  local searchStringCharacter="${_PROMPT_ITEMS_BOX_FILTER_STRING:0:1}"

  while ((${#_PROMPT_ITEMS_BOX_ITEM_DISPLAYED} > 0)); do
    # take the first chunk that does not contain an escape character
    itemChunk="${_PROMPT_ITEMS_BOX_ITEM_DISPLAYED%%$'\e'*}"

    if ((itemDisplayedLength + ${#itemChunk} > _PROMPT_ITEMS_BOX_ITEM_WIDTH)); then
      # we reached the desired size
      itemChunk="${itemChunk:0:$((_PROMPT_ITEMS_BOX_ITEM_WIDTH - 1 - itemDisplayedLength))}…"
      _PROMPT_ITEMS_BOX_ITEM_DISPLAYED=""
    else
      # otherwise we will continue in the next loop
      _PROMPT_ITEMS_BOX_ITEM_DISPLAYED="${_PROMPT_ITEMS_BOX_ITEM_DISPLAYED:${#itemChunk}}"
      itemDisplayedLength+=${#itemChunk}
    fi

    if [[ -n ${itemChunk} ]]; then
      # colorize the search string in this chunk
      while [[ -n ${searchStringCharacter} && ${itemChunk} == *"${searchStringCharacter}"* ]]; do
        itemChunkPiece="${itemChunk%%["${searchStringCharacter^}${searchStringCharacter,}"]*}"
        itemDisplayed+="${itemChunkPiece}${_PROMPT_COLOR_LETTER_HIGHLIGHT}${itemChunk:${#itemChunkPiece}:1}${_PROMPT_COLOR_LETTER_HIGHLIGHT_RESET}"
        itemChunk="${itemChunk:${#itemChunkPiece}+1}"
        searchStringIndex+=1
        searchStringCharacter="${_PROMPT_ITEMS_BOX_FILTER_STRING:searchStringIndex:1}"
      done

      itemDisplayed+="${itemChunk}"
    fi

    while [[ ${_PROMPT_ITEMS_BOX_ITEM_DISPLAYED} == $'\e'* ]]; do
      # case where we have an escape sequence at the beginning of the string
      # we only consider escape sequences for text formatting, they end with m
      itemChunk="${_PROMPT_ITEMS_BOX_ITEM_DISPLAYED%%"m"*}m"
      itemDisplayed+="${itemChunk}"
      _PROMPT_ITEMS_BOX_ITEM_DISPLAYED="${_PROMPT_ITEMS_BOX_ITEM_DISPLAYED:${#itemChunk}}"
    done
  done

  _PROMPT_ITEMS_BOX_ITEM_DISPLAYED="${itemDisplayed}"
}

# A function to show an error message
function prompt_showError() {
  local message="${1:-}"

  # clear the autocompletion box / existing error box if any
  prompt_clearItemsBox
  prompt_clearErrorBox

  string::wrapText "${message}" $((_PROMPT_WIDTH - ${#_PROMPT_ERROR_BOX_SYMBOL}))
  local IFS=$'\n'
  local text="${RETURNED_VALUE}"
  local -i errorLinesNeeded=0
  for _ in ${text}; do
    errorLinesNeeded+=1
  done

  # compute the height of the box where we can display error messages
  # This box should fit within the autocomplete width
  interactive::getBestAutocompleteBox "${_PROMPT_START_LINE}" "${_PROMPT_START_COLUMN}" "${errorLinesNeeded}" "${_PROMPT_WIDTH}" "${_PROMPT_ITEMS_BOX_MAX_HEIGHT}" "${_PROMPT_ITEMS_BOX_FORCE_BELOW}" "${_PROMPT_ENABLE_PROMPT}"
  _PROMPT_ERROR_BOX_TOP="${RETURNED_VALUE}"
  _PROMPT_ERROR_BOX_LEFT="${RETURNED_VALUE2}"
  _PROMPT_ERROR_BOX_WIDTH="${RETURNED_VALUE3}"
  _PROMPT_ERROR_BOX_HEIGHT="${RETURNED_VALUE4}"

  if ((_PROMPT_ERROR_BOX_HEIGHT <= 0)); then
    return 0
  fi

  local toPrint="${AC__CURSOR_HIDE}"
  local line
  local -i lineNumber=0
  for line in ${text}; do
    toPrint+="${AC__CURSOR_MOVE__}$((_PROMPT_ERROR_BOX_TOP + lineNumber));${_PROMPT_ERROR_BOX_LEFT}${__AC__TO}${_PROMPT_COLOR_VALIDATION_ERROR}${_PROMPT_ERROR_BOX_SYMBOL}${line}${_PROMPT_COLOR_VALIDATION_ERROR_RESET}"
    lineNumber+=1
    if ((lineNumber >= _PROMPT_ERROR_BOX_HEIGHT)); then
      break
    fi
  done
  printf '%s%s' "${toPrint}" "${AC__CURSOR_MOVE__}${GLOBAL_CURSOR_LINE};${GLOBAL_CURSOR_COLUMN}${__AC__TO}${AC__CURSOR_SHOW}"

  _PROMPT_ERROR_BOX_SHOWN=true
}

# Clear the autocompletion box
function prompt_clearErrorBox() {
  if [[ ${_PROMPT_ERROR_BOX_SHOWN} != "true" ]]; then
    return 0
  fi

  if [[ -n ${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED} ]]; then
    if "${_PROMPT_CALLBACK_FUNCTION_ON_BOX_CLOSED}" "${_PROMPT_ERROR_BOX_TOP}" "${_PROMPT_ERROR_BOX_LEFT}" "${_PROMPT_ERROR_BOX_WIDTH}" "${_PROMPT_ERROR_BOX_HEIGHT}"; then
      return 0
    fi
  fi

  interactive::clearBox "${_PROMPT_ERROR_BOX_TOP}" "${_PROMPT_ERROR_BOX_LEFT}" "${_PROMPT_ERROR_BOX_WIDTH}" "${_PROMPT_ERROR_BOX_HEIGHT}"

  _PROMPT_ERROR_BOX_SHOWN=false
}

# Modifies the selected item index and adjust the start index if necessary.
#
# - $1: **delta** _as integer_:
#       The delta to apply to the current index.
#
# Returns:
#
# - `_OPTION_FILTERED_ITEMS_SELECTED_INDEX`: The new index.
# - `_OPTION_FILTERED_ITEMS_START_INDEX`: The new start index if needed.
#
# ```bash
# prompt_changeSelectedItemIndex 1
# ```
function prompt_changeSelectedItemIndex() {
  local delta="${1:-0}"

  # if we have no items, we do nothing
  if [[ ${#_PROMPT_FILTERED_ITEMS[@]} -eq 0 ]]; then
    _PROMPT_FILTERED_ITEMS_SELECTED_INDEX=-1
    return 0
  fi

  # change the delta sign if we are in the reverse mode
  if [[ ${_PROMPT_ITEMS_BOX_REVERSE_MODE:-} == "true" ]]; then
    delta=$((delta * -1))
  fi

  local -i newIndex

  # compute the new index
  # cycle through if it was already at the end/beginning
  if ((_PROMPT_FILTERED_ITEMS_SELECTED_INDEX <= 0 && delta < 0)); then
    newIndex=$((${#_PROMPT_FILTERED_ITEMS[@]} - 1))
  elif ((_PROMPT_FILTERED_ITEMS_SELECTED_INDEX >= ${#_PROMPT_FILTERED_ITEMS[@]} - 1 && delta > 0)); then
    newIndex=0
  else
    newIndex=$((_PROMPT_FILTERED_ITEMS_SELECTED_INDEX + delta))
    if ((newIndex < 0)); then
      newIndex=0
    elif ((newIndex >= ${#_PROMPT_FILTERED_ITEMS[@]})); then
      newIndex=$((${#_PROMPT_FILTERED_ITEMS[@]} - 1))
    fi
  fi

  # now we need to adjust the start index if needed
  # to make sure that the new index is visible on the screen
  if ((newIndex < _PROMPT_FILTERED_ITEMS_START_INDEX)); then
    _PROMPT_FILTERED_ITEMS_START_INDEX=${newIndex}
  elif ((newIndex > _PROMPT_FILTERED_ITEMS_START_INDEX + _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS - 1)); then
    _PROMPT_FILTERED_ITEMS_START_INDEX=$((newIndex - _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS + 1))
  fi
  # also to make sure that we use all the space available on screen
  if ((_PROMPT_FILTERED_ITEMS_START_INDEX + _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS > ${#_PROMPT_FILTERED_ITEMS[@]})); then
    _PROMPT_FILTERED_ITEMS_START_INDEX=$((${#_PROMPT_FILTERED_ITEMS[@]} - _PROMPT_ITEMS_BOX_NB_DISPLAYED_ITEMS))
    if ((_PROMPT_FILTERED_ITEMS_START_INDEX < 0)); then
      _PROMPT_FILTERED_ITEMS_START_INDEX=0
    fi
  fi

  _PROMPT_FILTERED_ITEMS_SELECTED_INDEX=${newIndex}
}

# Modifies the cursor index in the user string.
# Makes sure that the index is within the string boundaries.
#
# - $1: **delta** _as integer_:
#       The delta to apply to the current cursor index.
#
# Returns:
#
# - `_OPTION_STRING_INDEX`: The new index.
#
# ```bash
# prompt_changePromptCursorIndex 1
# ```
function prompt_changePromptCursorIndex() {
  local delta="${1:-0}"

  _PROMPT_STRING_INDEX=$((_PROMPT_STRING_INDEX + delta))

  if ((_PROMPT_STRING_INDEX < 0)); then
    _PROMPT_STRING_INDEX=0
  elif ((_PROMPT_STRING_INDEX > ${#_PROMPT_STRING})); then
    _PROMPT_STRING_INDEX=${#_PROMPT_STRING}
  fi
}

# Insert a text at the cursor position.
#
# - $1: **text** _as string_:
#       The text to insert.
#
# ```bash
# prompt_insertTextAtCurrentIndex "text to insert"
# ```
function prompt_insertTextAtCurrentIndex() {
  if ((_PROMPT_STRING_INDEX > 0)); then
    if ((_PROMPT_STRING_INDEX >= ${#_PROMPT_STRING})); then
      _PROMPT_STRING="${_PROMPT_STRING}${1}"
    else
      _PROMPT_STRING="${_PROMPT_STRING:0:_PROMPT_STRING_INDEX}${1}${_PROMPT_STRING:_PROMPT_STRING_INDEX}"
    fi
  else
    _PROMPT_STRING="${1}${_PROMPT_STRING}"
  fi
  prompt_changePromptCursorIndex ${#1}
}

# Change the prompt text, replacing the whole line or the word under the cursor
# by the currently selected item in the items box.
#
# If no item is selected, nothing is done.
#
# ```bash
# prompt_autocompleteWithSelectedItem
# ```
function prompt_autocompleteWithSelectedItem() {
  if [[ ${_PROMPT_ITEMS_BOX_SHOWN} != "true" ]]; then
    return 0
  fi

  # get the current selected item
  prompt_getCurrentInitialItemsIndex
  if [[ ${RETURNED_VALUE} == "-1" ]]; then
    return 0
  fi

  local selectedItem="${_PROMPT_ORIGINAL_ITEMS[${RETURNED_VALUE}]}"

  # get the current word
  prompt_setCurrentWord

  if [[ -z ${_PROMPT_CURRENT_WORD} ]]; then
    # not current autocompleting a word, we insert at caret position
    prompt_insertTextAtCurrentIndex "${selectedItem}"
  else
    # we replace the current word with the autocompleted one
    local -i beginIndexToReplace=$((_PROMPT_STRING_INDEX - ${#_PROMPT_CURRENT_WORD}))
    if ((beginIndexToReplace > 0)); then
      _PROMPT_STRING="${_PROMPT_STRING:0:beginIndexToReplace}${selectedItem}${_PROMPT_STRING:_PROMPT_STRING_INDEX}"
    else
      _PROMPT_STRING="${selectedItem}${_PROMPT_STRING:_PROMPT_STRING_INDEX}"
    fi
    _PROMPT_STRING_INDEX=$((beginIndexToReplace + ${#selectedItem}))
  fi

  prompt_clearItemsBox
  prompt_onTextChanged
}

# Get the index delta to move to the beginning of the word (or previous).
function prompt_getIndexDeltaToBeginningOfWord() {
  # move to beginning of the previous word
  local -i index=${_PROMPT_STRING_INDEX}
  index+=-1
  while [[ ${index} -gt 0 && ${_PROMPT_STRING:index:1} == [[:space:]] ]]; do
    index+=-1
  done
  while [[ ${index} -gt 0 && ${_PROMPT_STRING:index:1} == [^[:space:]] ]]; do
    if [[ ${index} -ge 1 && ${_PROMPT_STRING:index-1:1} == [[:space:]] ]]; then
      break
    fi
    index=$((index - 1))
  done
  RETURNED_VALUE=$(((index >= 0 ? index : 0) - _PROMPT_STRING_INDEX))
}

# Get the index delta to move to the end of the word (or next).
function prompt_getIndexDeltaToEndOfWord() {
  # move to the end of the word
  local -i index=${_PROMPT_STRING_INDEX}
  index+=1
  while [[ ${index} -lt ${#_PROMPT_STRING} && ${_PROMPT_STRING:index:1} == [[:space:]] ]]; do
    index+=1
  done
  while [[ ${index} -lt ${#_PROMPT_STRING} && ${_PROMPT_STRING:index:1} == [^[:space:]] ]]; do
    index=$((index + 1))
  done
  RETURNED_VALUE=$(((index <= ${#_PROMPT_STRING} ? index : ${#_PROMPT_STRING}) - _PROMPT_STRING_INDEX))
}

# Returns the index of the item in the original array (if any, or -1).
# It returns in the RETURNED_VALUE variable.
function prompt_getCurrentInitialItemsIndex() {
  if [[ ${_PROMPT_ITEMS_BOX_SHOWN} == "true" ]] && ((_PROMPT_FILTERED_ITEMS_SELECTED_INDEX >= 0 && _PROMPT_FILTERED_ITEMS_SELECTED_INDEX < ${#_PROMPT_FILTERED_ITEMS[@]})); then
    if ((${#_PROMPT_FILTERED_ITEMS_CORRESPONDENCES[@]} > 0)); then
      RETURNED_VALUE=${_PROMPT_FILTERED_ITEMS_CORRESPONDENCES[${_PROMPT_FILTERED_ITEMS_SELECTED_INDEX}]}
    else
      RETURNED_VALUE=${_PROMPT_FILTERED_ITEMS_SELECTED_INDEX}
    fi
    return 0
  fi
  RETURNED_VALUE=-1
}

# ## prompt_getDisplayedPromptString
#
# This function return a string that can be printed in a terminal in order to display a text
# and position the cursor at a given index in the input text.
#
# If the string is too long to fit in the screen, it will be truncated and ellipsis will be displayed
# at the beginning and/or at the end of the string.
#
# The cursor will be displayed under the character at the given index of the input text and
# it makes sure that the cursor is always visible in the screen.
#
# This function is useful to display a long prompt on a single line.
#
# An example:
#
# ```text
# _PROMPT_STRING_SCREEN_WIDTH=10
# _PROMPT_STRING_INDEX=20
# _PROMPT_STRING="This is a long string that will be displayed in the screen."
# #                                ^ input index 20
# prompt_getDisplayedPromptString 20 10
# # output: "…g string…"
# #                  ^ screen cursor (at index 8)
# ```
#
# - $_PROMPT_STRING: **input string** _as string_:
#       the string to display
# - $_PROMPT_STRING_INDEX: **input index** _as int_:
#       the index of the character (in the input string) that should be under the cursor
# - $_PROMPT_STRING_SCREEN_WIDTH: **screen width** _as int_:
#       the width of the screen
#
# Returns:
#
# - `RETURNED_VALUE`: the string to display in the screen
# - `RETURNED_VALUE2`: the index at which to position the cursor on screen
#
# ```bash
# prompt_getDisplayedPromptString "This is a long string that will be displayed in the screen." 20 10
# ```
function prompt_getDisplayedPromptString() {
  local -i inputLength=${#_PROMPT_STRING}
  local -i screenIndex

  # compute where we will display the cursor in the display
  if ((_PROMPT_STRING_INDEX >= _PROMPT_STRING_SCREEN_WIDTH)); then
    if ((_PROMPT_STRING_INDEX >= inputLength - 1)); then
      # we display it in the last position if it is at the end of the string
      screenIndex=$((_PROMPT_STRING_SCREEN_WIDTH - 1))
    else
      # we display at the second last position if it is not at the end
      screenIndex=$((_PROMPT_STRING_SCREEN_WIDTH - 2))
    fi
  else
    if ((inputLength > _PROMPT_STRING_SCREEN_WIDTH && inputLength - _PROMPT_STRING_INDEX == 2)); then
      screenIndex=$((_PROMPT_STRING_SCREEN_WIDTH - 2))
    else
      if ((inputLength > _PROMPT_STRING_SCREEN_WIDTH && _PROMPT_STRING_SCREEN_WIDTH - _PROMPT_STRING_INDEX == 1)); then
        # if within the display but at the last character and we will need to display ellipsis...
        screenIndex=$((_PROMPT_STRING_SCREEN_WIDTH - 2))
      else
        # if it is already within the display, we display it at the right position
        screenIndex=${_PROMPT_STRING_INDEX}
      fi
    fi
  fi

  local -i screenLeftLength=$((screenIndex))
  local -i realLeftLength=$((_PROMPT_STRING_INDEX))

  local screenString=""

  # compute what to display at the left of the character under the caret (if any)
  if ((screenLeftLength > 0)); then
    if ((realLeftLength > screenLeftLength)); then
      # we can't display the whole left string, so we display ellipsis
      if ((screenLeftLength > 1)); then
        screenString+="…${_PROMPT_STRING:realLeftLength-screenLeftLength+1:screenLeftLength-1}"
      else
        screenString+="…"
      fi
    else
      screenString+="${_PROMPT_STRING:realLeftLength-screenLeftLength:screenLeftLength}"
    fi
  fi

  # compute the character to display under the caret (if any)
  if ((inputLength > 0 && _PROMPT_STRING_INDEX <= inputLength)); then
    screenString+="${_PROMPT_STRING:_PROMPT_STRING_INDEX:1}"
  fi

  # compute what to display at the right of the character under the caret (if any)
  local -i screenRightLength=$((_PROMPT_STRING_SCREEN_WIDTH - screenIndex - 1))
  local -i realRightLength=$((inputLength - _PROMPT_STRING_INDEX - 1))

  if ((screenRightLength > 0)); then
    if ((realRightLength > screenRightLength)); then
      # we can't display the whole right string, so we display ellipsis
      if ((screenRightLength > 1)); then
        screenString+="${_PROMPT_STRING:inputLength-realRightLength:screenRightLength-1}…"
      else
        screenString+="…"
      fi
    else
      screenString+="${_PROMPT_STRING:inputLength-realRightLength:screenRightLength}"
    fi
  fi

  RETURNED_VALUE="${screenString}"
  RETURNED_VALUE2=${screenIndex}
}

# we will redefine array::fuzzyFilterSort to a new function that uses global variables
# this is to avoid copying parameters to the function and hopefully be faster
function prompt_fuzzyFilterSort() { :; }
function prompt_reExportFuzzyFilterFunction() {
  unset -f prompt_fuzzyFilterSort &>/dev/null || :
  local functionToReExport=array::fuzzyFilterSort
  if [[ ${_PROMPT_ITEMS_BOX_FILTER_WITHOUT_SORTING:-false} == "true" ]]; then
    functionToReExport=array::fuzzyFilter
  fi
  core::reExportFuncToUseGlobalVars "${functionToReExport}" prompt_fuzzyFilterSort _PROMPT_ITEMS_BOX_FILTER_STRING _PROMPT_ORIGINAL_ITEMS
  RETURNED_VALUE="${RETURNED_VALUE//RETURNED_ARRAY2/_PROMPT_FILTERED_ITEMS_CORRESPONDENCES}"
  RETURNED_VALUE="${RETURNED_VALUE//RETURNED_ARRAY/_PROMPT_FILTERED_ITEMS}"
  eval "${RETURNED_VALUE}"
}
