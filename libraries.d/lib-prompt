#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-ansi-codes
source ansi-codes

# shellcheck source=lib-interactive
source interactive

# shellcheck source=lib-array
source array

# ## prompt::autocompletion
#
# Displays an autocompletion input starting at a given location. Allows
# the user to type a text in the given row between a starting column and
# ending column (included). Longer text are shifted to fit between
# the two columns.
#
# This component is a replacement for the `read -e` command, which allows
# to limit the input to a single line and to provide autocompletion.
#
# The autocompletion box can be hidden, or displayed below/above the input text
# depending on the space available on the screen.
#
# The user can type character to filter down a list of suggestions,
# navigate up and down between suggestions, insert a suggestion using
# TAB or ENTER, press ESC to close the autocompletion box, and ALT+ENTER to
# submit the input (or just ENTER when the box is closed).
#
# The autocompletion box will position itself depending on the screen size
# and the starting position of the text.
#
# The multiple options allows to use this function to ask for any user input
# as long as it is on a single line.
#
# You can define several callback functions that are called on different events:
#
# - `autocompletionOnTextUpdate`: Called when the text is updated (after each key press).
#
# - $1: **start line** _as int_:
#       The line/row at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $2: **start column** _as int_:
#       The column at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $3: **stop column** _as int_:
#       The column at which to stop showing the autocompleted text.
#       Longer texts get shifted to display the end of the user input.
# - $4: **array name** _as string_:
#       The items to display (name of a global array which contains the items).
#       If left empty, the autocompletion box will not be displayed. Useful to turn this into a simple prompt.
# - $5: initial text _as string_:
#       (optional) The initial string, which corresponds to the text already entered
#       by the user at the moment the autocompletion box shows up.
#       Allows to pre-filter the autocompletion.
#       (defaults to empty)
# - $6: max lines _as int_:
#       optional) The maximum number of lines/rows to use for the autocompletion box.
#       (defaults to a maximized auto-computed value depending on the items and screen size)
# - $7: force box below _as bool_:
#       (optional) If true, the box is forced to be displayed below the input text.
#       Otherwise it will depend on the space required and space available below/above.
#       (defaults to false)
# - $8: show prompt _as bool_:
#       (optional) If true, the prompt is displayed. If false, the prompt is hidden.
#       Useful to turn this into a simple multiple choice list.
#       (defaults to true)
# - $9: force show count _as bool_:
#       (optional) If true, the count of items is always displayed.
#       If false, the count is only displayed when we can'y display all the items at once.
#       (defaults to false)
# - $10: show left cursors _as bool_:
#       (optional) If true, the left cursors are displayed (> for prompt and the > for selected item).
#       Useful to display the most simple auto-completion when false.
#       (defaults to true)
# - $11: filters from n chars _as int_:
#       (optional) The minimum number of characters to type before starting to filter the items.
#       By default, the list is shown full and the user can start typing to filter.
#       Put a value superior to 0 to make it behave like a standard autocompletion.
#       When non-zero, the user can CTRL+SPACE to show the full list.
#       (defaults to 0)
# - $12: accept any value _as bool_:
#       (optional) If true, the left cursors are displayed (> for prompt and the > for selected item).
#       Useful to display the most simple auto-completion when false.
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0: The user pressed ENTER to validate the text.
#   - 1: The user pressed ESC to close the text box.
# - `RETURNED_VALUE`: The entered value (or empty).
# - `RETURNED_VALUE2`: The string displayed on the screen between the 2 columns at the
#                      moment when the autocompletion was closed.
#
# ```bash
# prompt::autocompletion "Select an item" item_array_name "onItemSelected" "Details"
# ```
function prompt::autocompletion() {
  _PROMPT_START_LINE="${1}"
  _PROMPT_START_COLUMN="${2}"
  _PROMPT_STOP_COLUMN="${3}"

  local -i maxItemLength=0
  if [[ -n "${4:-}" ]]; then
    local -n originalItems="${4}"
    _PROMPT_ORIGINAL_ITEMS=("${originalItems[@]}")
    local item
    for item in "${_PROMPT_ORIGINAL_ITEMS[@]}"; do
      if ((${#item} > maxItemLength)); then
        maxItemLength=${#item}
      fi
    done
  else
    _PROMPT_ORIGINAL_ITEMS=()
  fi
  _PROMPT_ORIGINAL_ITEMS_COUNT=${#_PROMPT_ORIGINAL_ITEMS[@]}
  _PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX=-1
  _PROMPT_FILTERED_ITEMS=()
  _PROMPT_FILTERED_ITEMS_CORRESPONDENCES=()
  _PROMPT_FILTERED_ITEMS_START_INDEX=0
  _PROMPT_FILTERED_ITEMS_SELECTED_INDEX=0

  _PROMPT_STRING="${5:-}"
  _PROMPT_STRING_INDEX=${#_PROMPT_STRING}
  _PROMPT_WIDTH=$((_PROMPT_STOP_COLUMN - _PROMPT_START_COLUMN + 1))
  _PROMPT_CURSOR_COLUMN=$((_PROMPT_START_COLUMN + _PROMPT_STRING_INDEX))
  _PROMPT_KILLED_STRING=""

  _PROMPT_SHOW_PROMPT="${8:-true}"
  _PROMPT_AUTOCOMPLETE_WHOLE_LINE="true"
  _PROMPT_TAB_OPENS_AUTOCOMPLETION_BOX="true"
  _PROMPT_AUTOCOMPLETION_BOX_ALLOW_FILTERING="${_PROMPT_SHOW_PROMPT}"

  _PROMPT_AUTOCOMPLETION_BOX_FORCE_SHOW_COUNT="${9:-false}"

  _PROMPT_SHOW_SYMBOL="${10:-true}"
  _PROMPT_FILTERS_FROM_N_CHARS="${11:-0}"

  # check if we display the autocompletion box, and the initial state of the box (shown or hidden)
  if ((_PROMPT_ORIGINAL_ITEMS_COUNT > 0)); then
    _PROMPT_AUTOCOMPLETION_BOX_ENABLED=true
    if ((${#_PROMPT_STRING} >= _PROMPT_FILTERS_FROM_N_CHARS)); then
      _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=true
    else
      _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
    fi
  else
    _PROMPT_AUTOCOMPLETION_BOX_ENABLED=false
    _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
  fi

  _PROMPT_ACCEPT_ANY_VALUE="${12:-true}"
  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_ENABLED} != "true" ]]; then
    # if we don't show the box, we necessarily accept any value
    _PROMPT_ACCEPT_ANY_VALUE=true
  elif [[ ${_PROMPT_SHOW_PROMPT} != "true" ]]; then
    # if don't show the prompt, we don't accept any value
    _PROMPT_ACCEPT_ANY_VALUE=false
  fi

  # set up colors
  if [[ ${VALET_CONFIG_ENABLE_COLORS:-} == "true" ]]; then
    _PROMPT_COLOR_STRING="${VALET_CONFIG_PROMPT_COLOR_STRING:-"${AC__FG_MAGENTA}"}"
    _PROMPT_COLOR_STRING_RESET="${VALET_CONFIG_PROMPT_COLOR_STRING_RESET:-"${AC__FG_RESET}"}"
    _PROMPT_COLOR_STATIC="${VALET_CONFIG_PROMPT_COLOR_STATIC:-"${AC__FG_BRIGHT_BLACK}"}"
    _PROMPT_COLOR_STATIC_RESET="${VALET_CONFIG_PROMPT_COLOR_STATIC_RESET:-"${AC__FG_RESET}"}"
    _PROMPT_COLOR_LETTER_HIGHLIGHT="${VALET_CONFIG_PROMPT_COLOR_LETTER_HIGHLIGHT:-"${AC__TEXT_INVERSE}${AC__FG_MAGENTA}"}"
    _PROMPT_COLOR_LETTER_HIGHLIGHT_RESET="${VALET_CONFIG_PROMPT_COLOR_LETTER_HIGHLIGHT_RESET:-"${AC__TEXT_NO_INVERSE}${AC__FG_RESET}"}"
    _PROMPT_COLOR_SELECTED_ITEM="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM:-"${AC__BG_BLACK}${AC__FG_WHITE}"}"
    _PROMPT_COLOR_SELECTED_ITEM_RESET="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM_RESET:-"${AC__BG_RESET}${AC__FG_RESET}"}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM_SYMBOL:-"${AC__BG_BLACK}${AC__FG_MAGENTA}"}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET="${VALET_CONFIG_PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET:-"${AC__BG_RESET}${AC__FG_RESET}"}"
    _PROMPT_COLOR_UNSELECTED_ITEM="${VALET_CONFIG_PROMPT_COLOR_UNSELECTED_ITEM:-""}"
    _PROMPT_COLOR_UNSELECTED_ITEM_RESET="${VALET_CONFIG_PROMPT_COLOR_UNSELECTED_ITEM_RESET:-""}"
    _PROMPT_COLOR_COUNT="${VALET_CONFIG_PROMPT_COLOR_COUNT:-"${AC__FG_YELLOW}"}"
    _PROMPT_COLOR_COUNT_RESET="${VALET_CONFIG_PROMPT_COLOR_COUNT_RESET:-"${AC__FG_RESET}"}"
    _PROMPT_COLOR_VALIDATION_ERROR="${VALET_CONFIG_PROMPT_COLOR_VALIDATION_ERROR:-"${AC__FG_RED}"}"
    _PROMPT_COLOR_VALIDATION_ERROR_RESET="${VALET_CONFIG_PROMPT_COLOR_VALIDATION_ERROR_RESET:-"${AC__FG_RESET}"}"
  else
    _PROMPT_COLOR_STRING=""
    _PROMPT_COLOR_STRING_RESET=""
    _PROMPT_COLOR_STATIC=""
    _PROMPT_COLOR_STATIC_RESET=""
    _PROMPT_COLOR_LETTER_HIGHLIGHT="${AC__TEXT_UNDERLINE}"
    _PROMPT_COLOR_LETTER_HIGHLIGHT_RESET="${AC__TEXT_NO_UNDERLINE}"
    _PROMPT_COLOR_SELECTED_ITEM="${AC__TEXT_INVERSE}"
    _PROMPT_COLOR_SELECTED_ITEM_RESET="${AC__TEXT_NO_INVERSE}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL="${AC__TEXT_INVERSE}"
    _PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET="${AC__TEXT_NO_INVERSE}"
    _PROMPT_COLOR_UNSELECTED_ITEM=""
    _PROMPT_COLOR_UNSELECTED_ITEM_RESET=""
    _PROMPT_COLOR_COUNT=""
    _PROMPT_COLOR_COUNT_RESET=""
    _PROMPT_COLOR_VALIDATION_ERROR="${AC__TEXT_INVERSE}"
    _PROMPT_COLOR_VALIDATION_ERROR_RESET="${AC__TEXT_NO_INVERSE}"
  fi

  # set up the left symbols (> for prompt and the > for selected item)
  if [[ ${_PROMPT_SHOW_SYMBOL} == "true" ]]; then
    _PROMPT_SYMBOL="${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-">"} "
    _PROMPT_SYMBOL_LENGTH=2
    _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_SELECTED_ITEM="${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-"◆"} "
    _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_UNSELECTED_ITEM="░ "
    _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_LENGTH=2
    maxItemLength+=2
    _PROMPT_STRING_WIDTH=$((_PROMPT_WIDTH - 2))
  else
    _PROMPT_SYMBOL=""
    _PROMPT_SYMBOL_LENGTH=0
    _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_SELECTED_ITEM=""
    _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_UNSELECTED_ITEM=""
    _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_LENGTH=0
  fi

  system::exportTerminalSize
  prompt_getAutocompletionBoxSize "${6:-}" "${7:-}" "${_PROMPT_START_LINE}" "${_PROMPT_START_COLUMN}" "${_PROMPT_ORIGINAL_ITEMS_COUNT}" "${maxItemLength}" "${_PROMPT_SHOW_PROMPT}"

  if ((_PROMPT_AUTOCOMPLETION_BOX_HEIGHT <= 0)); then
    _PROMPT_AUTOCOMPLETION_BOX_ENABLED=false
    _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
  fi

  _PROMPT_CLOSE_INTERACTIVE_SESSION=false
  _PROMPT_CANCELLED=false

  if command -v autocompletionOnTextUpdate &>/dev/null; then
    _PROMPT_ON_TEXT_UPDATE_ENABLED="true"
  else
    _PROMPT_ON_TEXT_UPDATE_ENABLED="false"
  fi

  # save the original traps so we can restore them later
  local originalTraps
  io::invoke trap -p SIGWINCH SIGINT SIGQUIT
  originalTraps="${RETURNED_VALUE}"

  # interrupting closes the interactive session
  trap '_PROMPT_CLOSE_INTERACTIVE_SESSION=true; _PROMPT_CANCELLED=true;' SIGINT SIGQUIT

  # before starting to wait for inputs, we clear up the key pressed
  interactive::clearKeyPressed
  # setup the terminal to be ready for readline
  interactive::sttyInit
  # define the callback function called when a special key is pressed
  # shellcheck disable=SC2317
  function interactiveOnKeyBindingPress() { prompt_onKeyPressed "${1}" ""; }
  # rebind some keys to call the callback function interactiveOnKeyBindingPress
  interactive::rebindKeymap

  prompt_drawPrompt
  prompt_drawAutocompletionBox

  # main loop
  while true; do
    if interactive::waitForKeyPress -t 0.2; then
      prompt_onKeyPressed "${LAST_KEY_PRESSED}" "${LAST_KEY_PRESSED}"
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 || ${_PROMPT_CLOSE_INTERACTIVE_SESSION} == "true" ]]; then break; fi
  done

  # clean up
  prompt_clearAutocompletionBox
  prompt_clearPrompt

  interactive::sttyRestore

  # restore the initial traps
  eval "${originalTraps}"

  # clean up
  unset -f autocompletionOnTextUpdate interactiveOnKeyBindingPress 2>/dev/null || :

  if [[ ${_PROMPT_CANCELLED:-} == "true" ]]; then
    return 1
  else
    RETURNED_VALUE="${_PROMPT_STRING}"
    if ((_PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX >= 0)); then
      RETURNED_VALUE2="${_PROMPT_ORIGINAL_ITEMS[${_PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX}]}"
    else
      RETURNED_VALUE2=""
    fi
    # shellcheck disable=SC2034
    RETURNED_VALUE3=${_PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX}
  fi

  return 0
}

# Called when a key is pressed.
#
# - $1: **key** _as string_:
#       The key that was pressed, including special keys (CTRL+, ALT+, TAB, etc...).
# - $2: **char sent** _as string_:
#       The last character that was sent by the terminal, if any
#       (can be empty when key is not empty).
#
function prompt_onKeyPressed() {
  case "${1}" in

  # autocompletion boc
  PAGE_UP)
    prompt_changeSelectedItemIndex -10
    prompt_drawAutocompletionBox
    ;;
  PAGE_DOWN)
    prompt_changeSelectedItemIndex 10
    prompt_drawAutocompletionBox
    ;;
  HOME | CTRL+UP)
    prompt_changeSelectedItemIndex -99999
    prompt_drawAutocompletionBox
    ;;
  END | CTRL+DOWN)
    prompt_changeSelectedItemIndex 99999
    prompt_drawAutocompletionBox
    ;;
  UP)
    prompt_changeSelectedItemIndex -1
    prompt_drawAutocompletionBox
    ;;
  DOWN)
    prompt_changeSelectedItemIndex 1
    prompt_drawAutocompletionBox
    ;;

  # validate or exit
  $'\n' | CTRL+M | CTRL+J | NEWLINE)
    # in autocompletion mode we can only validate if we autocompletion is closed, otherwise it autocompletes
    if [[ ${_PROMPT_AUTOCOMPLETION_BOX_VISIBLE} == "true" && ${_PROMPT_ACCEPT_ANY_VALUE} == "true" ]]; then
      prompt_autocompleteWithSelectedItem
      prompt_drawPrompt
      prompt_drawAutocompletionBox
      return 0
    fi

    # if we selected index is within the range of the filtered items
    # we can return the corresponding index in the original items
    prompt_getCurrentInitialItemsIndex
    if [[ ${RETURNED_VALUE} == "-1" ]]; then
      if [[ ${_PROMPT_ACCEPT_ANY_VALUE} != "true" ]]; then
        # make enter have no effect if we are not on a valid item and we don't accept any value
        prompt_showValidationMessage "No item matching your query!"
        return 0
      fi
      _PROMPT_ORIGINAL_ITEMS_SELECTED_INDEX=${RETURNED_VALUE}
    fi
    if [[ ${_PROMPT_ACCEPT_ANY_VALUE} == "true" && ${_PROMPT_STRING} == "" ]]; then
      # make enter have no effect if we accept any value but we have an empty string
      prompt_showValidationMessage "Please enter a value!"
      return 0
    fi
    _PROMPT_CLOSE_INTERACTIVE_SESSION=true
    return 0
    ;;
  TAB | CTRL+I)
    # autocompletes if the box is shown, otherwise it opens the box (if allowed)
    if [[ ${_PROMPT_AUTOCOMPLETION_BOX_VISIBLE} == "true" ]]; then
      prompt_autocompleteWithSelectedItem
      prompt_drawPrompt
      prompt_drawAutocompletionBox
    elif [[ ${_PROMPT_TAB_OPENS_AUTOCOMPLETION_BOX} == "true" ]]; then
      _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=true
      prompt_drawAutocompletionBox
    fi
    ;;
  ESC)
    # interrupt the prompt session or close the autocompletion box
    if [[ ${_PROMPT_ACCEPT_ANY_VALUE} == "true" ]]; then
      if [[ ${_PROMPT_AUTOCOMPLETION_BOX_VISIBLE} == "true" ]]; then
        _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
        prompt_drawAutocompletionBox
        return 0
      fi
    else
      _PROMPT_CLOSE_INTERACTIVE_SESSION=true
      _PROMPT_CANCELLED=true
    fi
    ;;
  CTRL+Q)
    _PROMPT_CLOSE_INTERACTIVE_SESSION=true
    _PROMPT_CANCELLED=true
    prompt_showValidationMessage "Cancelling..."
    ;;

  # move the cursor
  CTRL+A)
    prompt_changePromptCursorIndex -9999999
    prompt_drawPrompt
    ;;
  CTRL+E)
    prompt_changePromptCursorIndex 9999999
    prompt_drawPrompt
    ;;
  LEFT | CTRL+B)
    prompt_changePromptCursorIndex -1
    prompt_drawPrompt
    ;;
  RIGHT | CTRL+F)
    prompt_changePromptCursorIndex 1
    prompt_drawPrompt
    ;;
  CTRL+LEFT)
    # move to beginning of the previous word
    prompt_moveCursorToBeginningOfWord
    prompt_drawPrompt
    ;;
  CTRL+RIGHT)
    prompt_moveCursorToEndOfWord
    prompt_drawPrompt
    ;;

  # modify the text
  CTRL+K)
    # kill the line from cursor to the end
    _PROMPT_KILLED_STRING="${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
    if ((_PROMPT_STRING_INDEX > 0)); then
      _PROMPT_STRING="${_PROMPT_STRING:0:${_PROMPT_STRING_INDEX}}"
    else
      _PROMPT_STRING=""
    fi
    prompt_drawPrompt
    prompt_drawAutocompletionBox
    ;;
  CTRL+Y)
    # yank the killed string at cursor position
    if [[ -n ${_PROMPT_KILLED_STRING:-} ]]; then
      prompt_insertTextAtCurrentIndex "${_PROMPT_KILLED_STRING}"
      prompt_drawPrompt
      prompt_drawAutocompletionBox
    fi
    ;;
  DEL | CTRL+D)
    # delete the character under the cursor
    local tempUserString
    if ((_PROMPT_STRING_INDEX > 0)); then
      tempUserString="${_PROMPT_STRING:0:${_PROMPT_STRING_INDEX}}"
    else
      tempUserString=""
    fi
    if ((_PROMPT_STRING_INDEX < ${#_PROMPT_STRING} - 1)); then
      tempUserString+="${_PROMPT_STRING:$((_PROMPT_STRING_INDEX + 1))}"
    fi
    _PROMPT_STRING="${tempUserString}"
    prompt_drawPrompt
    prompt_drawAutocompletionBox
    ;;
  BACKSPACE | CTRL+H)
    # delete the character before the cursor
    if ((_PROMPT_STRING_INDEX > 0)); then
      if ((_PROMPT_STRING_INDEX > 1)); then
        _PROMPT_STRING="${_PROMPT_STRING:0:$((_PROMPT_STRING_INDEX - 1))}${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      else
        _PROMPT_STRING="${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      fi
    fi
    prompt_changePromptCursorIndex -1
    prompt_drawPrompt
    prompt_drawAutocompletionBox
    ;;
  CTRL+DEL)
    # delete all chars from the cursor to the end of (this or next) word
    local -i oldIndex=${_PROMPT_STRING_INDEX}
    prompt_moveCursorToEndOfWord
    if ((_PROMPT_STRING_INDEX > oldIndex)); then
      _PROMPT_KILLED_STRING="${_PROMPT_STRING:${oldIndex}:$((_PROMPT_STRING_INDEX - oldIndex))}"
      if ((oldIndex > 0)); then
        _PROMPT_STRING="${_PROMPT_STRING:0:${oldIndex}}${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      else
        _PROMPT_STRING="${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      fi
      _PROMPT_STRING_INDEX=${oldIndex}
    fi
    prompt_drawPrompt
    prompt_drawAutocompletionBox
    ;;
  CTRL+BACKSPACE | CTRL+W)
    # delete all chars before the cursor until reaching a space
    local -i oldIndex=${_PROMPT_STRING_INDEX}
    prompt_moveCursorToBeginningOfWord
    if ((oldIndex > _PROMPT_STRING_INDEX)); then
      _PROMPT_KILLED_STRING="${_PROMPT_STRING:${_PROMPT_STRING_INDEX}:$((oldIndex - _PROMPT_STRING_INDEX))}"
      if ((_PROMPT_STRING_INDEX > 0)); then
        _PROMPT_STRING="${_PROMPT_STRING:0:${_PROMPT_STRING_INDEX}}${_PROMPT_STRING:${oldIndex}}"
      else
        _PROMPT_STRING="${_PROMPT_STRING:${oldIndex}}"
      fi
    fi
    prompt_drawPrompt
    prompt_drawAutocompletionBox
    ;;
  *)
    # Case of keys that are supposed to only affect the search string
    # insert the character at the cursor position
    if [[ -n ${2} ]]; then
      prompt_insertTextAtCurrentIndex "${2}"

      # check if we now need to show the autocompletion box
      if [[ ${_PROMPT_AUTOCOMPLETE_WHOLE_LINE} == "true" ]]; then
        if ((${#_PROMPT_STRING} >= _PROMPT_FILTERS_FROM_N_CHARS)); then
          _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=true
        else
          _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
        fi
      else
        # count the number of characters that are not spaces before the cursor
        local -i count=0
        while [[ ${count} -lt ${_PROMPT_FILTERS_FROM_N_CHARS} && $((_PROMPT_STRING_INDEX - count - 1)) -gt 0 && ${_PROMPT_STRING:$((_PROMPT_STRING_INDEX - count - 1)):1} =~ [^[:space:]] ]]; do
          count+=1
        done
        if ((count >= _PROMPT_FILTERS_FROM_N_CHARS)); then
          _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=true
        else
          _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
        fi
      fi

      prompt_drawPrompt
      prompt_drawAutocompletionBox
    fi
    ;;
  esac
}

# Draw the prompt line
function prompt_drawPrompt() {
  if [[ ${_PROMPT_SHOW_PROMPT} != "true" ]]; then
    return 0
  fi

  prompt_getDisplayedPromptString
  _PROMPT_CURSOR_COLUMN=$((_PROMPT_START_COLUMN + _PROMPT_SYMBOL_LENGTH + RETURNED_VALUE2))

  printf '%s' "${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}$((_PROMPT_START_LINE));$((_PROMPT_START_COLUMN))${__AC__TO}${AC__ERASE__}$((_PROMPT_WIDTH))${__AC_CHARS}"$'\r'"${_PROMPT_COLOR_STATIC}${_PROMPT_SYMBOL}${_PROMPT_COLOR_STATIC_RESET}${_PROMPT_COLOR_STRING}${RETURNED_VALUE}${_PROMPT_COLOR_STRING_RESET}${AC__CURSOR_MOVE__}$((_PROMPT_START_LINE));$((_PROMPT_CURSOR_COLUMN))${__AC__TO}${AC__CURSOR_SHOW}"

  if [[ ${_PROMPT_ON_TEXT_UPDATE_ENABLED} == "true" ]]; then
    autocompletionOnTextUpdate
  fi
}

# Clear the prompt line
function prompt_clearPrompt() {
  if [[ ${_PROMPT_SHOW_PROMPT} != "true" ]]; then
    return 0
  fi

  printf '%s' "${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}$((_PROMPT_START_LINE));$((_PROMPT_START_COLUMN))${__AC__TO}${AC__ERASE__}$((_PROMPT_WIDTH))${__AC_CHARS}${AC__CURSOR_SHOW}"
}

# Draw the autocompletion box
function prompt_drawAutocompletionBox() {
  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_ENABLED} != "true" ]]; then
    return 0
  fi

  # clear the autocompletion box
  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_VISIBLE} != "true" ]]; then
    prompt_clearAutocompletionBox
    return 0
  fi

  local toPrint="${AC__CURSOR_HIDE}"

  # Compute filtered items
  local filterString="${_PROMPT_STRING}"
  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_ALLOW_FILTERING} == "true" && -n ${filterString} ]]; then

    array::fuzzyFilterSort "${filterString}" _PROMPT_ORIGINAL_ITEMS "${_PROMPT_COLOR_LETTER_HIGHLIGHT}" "${_PROMPT_COLOR_LETTER_HIGHLIGHT_RESET}" "$((_PROMPT_AUTOCOMPLETION_BOX_WIDTH - _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_LENGTH))"
    _PROMPT_FILTERED_ITEMS=("${RETURNED_ARRAY[@]}")
    _PROMPT_FILTERED_ITEMS_CORRESPONDENCES=("${RETURNED_ARRAY2[@]}")
  else
    # for each item longer than the width, cut and add ellipsis
    _PROMPT_FILTERED_ITEMS=()
    local line
    for line in "${_PROMPT_ORIGINAL_ITEMS[@]}"; do
      if ((${#line} > _PROMPT_AUTOCOMPLETION_BOX_WIDTH - _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_LENGTH)); then
        line="${line:0:$((_PROMPT_AUTOCOMPLETION_BOX_WIDTH - 1 - _PROMPT_AUTOCOMPLETION_BOX_SYMBOL_LENGTH))}…"
      fi
      _PROMPT_FILTERED_ITEMS+=("${line}")
    done
    _PROMPT_FILTERED_ITEMS_CORRESPONDENCES=()
    for ((i = 0; i < _PROMPT_ORIGINAL_ITEMS_COUNT; i++)); do
      _PROMPT_FILTERED_ITEMS_CORRESPONDENCES+=("${i}")
    done
  fi

  # make sure to select an existing index regarding the newly filtered items +
  # make sure it is in the view
  prompt_changeSelectedItemIndex 0

  # draw the items
  local itemString
  local -i line
  local -i nbLines=${_PROMPT_AUTOCOMPLETION_BOX_HEIGHT}
  local showItemCount=false
  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_FORCE_SHOW_COUNT} == "true" || ${#_PROMPT_FILTERED_ITEMS[@]} -gt ${_PROMPT_AUTOCOMPLETION_BOX_HEIGHT} || ${#_PROMPT_FILTERED_ITEMS[@]} -ne ${_PROMPT_ORIGINAL_ITEMS_COUNT} ]]; then
    # we show the count if we do not display all the items
    showItemCount=true
    nbLines=$((nbLines - 1))
  fi
  for ((line = 0; line < nbLines; line++)); do
    index=$((_PROMPT_FILTERED_ITEMS_START_INDEX + line))
    if ((index >= ${#_PROMPT_FILTERED_ITEMS[@]})); then
      # erase the line
      toPrint+="${AC__CURSOR_MOVE__}$((_PROMPT_AUTOCOMPLETION_BOX_TOP + line));${_PROMPT_AUTOCOMPLETION_BOX_LEFT}${__AC__TO}${AC__ERASE__}$((_PROMPT_AUTOCOMPLETION_BOX_WIDTH))${__AC_CHARS}"
      continue
    fi
    if ((index == _PROMPT_FILTERED_ITEMS_SELECTED_INDEX)); then
      itemString="${_PROMPT_COLOR_SELECTED_ITEM_SYMBOL}${_PROMPT_AUTOCOMPLETION_BOX_SYMBOL_SELECTED_ITEM}${_PROMPT_COLOR_SELECTED_ITEM_SYMBOL_RESET}${_PROMPT_COLOR_SELECTED_ITEM}${_PROMPT_FILTERED_ITEMS[index]}${_PROMPT_COLOR_SELECTED_ITEM_RESET}"
    else
      itemString="${_PROMPT_COLOR_STATIC}${_PROMPT_AUTOCOMPLETION_BOX_SYMBOL_UNSELECTED_ITEM}${_PROMPT_COLOR_STATIC_RESET}${_PROMPT_COLOR_UNSELECTED_ITEM}${_PROMPT_FILTERED_ITEMS[index]}${_PROMPT_COLOR_UNSELECTED_ITEM_RESET}"
    fi
    toPrint+="${AC__CURSOR_MOVE__}$((_PROMPT_AUTOCOMPLETION_BOX_TOP + line));${_PROMPT_AUTOCOMPLETION_BOX_LEFT}${__AC__TO}${AC__ERASE__}$((_PROMPT_AUTOCOMPLETION_BOX_WIDTH))${__AC_CHARS}${itemString}"
  done

  # display the items count
  if [[ ${showItemCount} == "true" ]]; then
    local itemsCounter
    printf -v itemsCounter " %s%0${#_PROMPT_ORIGINAL_ITEMS_COUNT}i%s/%i%s " "${_PROMPT_COLOR_COUNT}" "${#_PROMPT_FILTERED_ITEMS[@]}" "${_PROMPT_COLOR_COUNT_RESET}${_PROMPT_COLOR_STATIC}" "${_PROMPT_ORIGINAL_ITEMS_COUNT}" "${_PROMPT_COLOR_STATIC_RESET}"
    local itemCounterLength=$((3 + ${#_PROMPT_ORIGINAL_ITEMS_COUNT} * 2))
    if ((itemCounterLength > _PROMPT_AUTOCOMPLETION_BOX_WIDTH - 2)); then
      itemCounterLength=0
      itemsCounter=""
    fi
    local -i lineAtWhichToDisplayCount=$((_PROMPT_AUTOCOMPLETION_BOX_TOP + ${#_PROMPT_FILTERED_ITEMS[@]}))
    toPrint+="${AC__CURSOR_MOVE__}$((${#_PROMPT_FILTERED_ITEMS[@]} > _PROMPT_AUTOCOMPLETION_BOX_HEIGHT - 1 ?   _PROMPT_AUTOCOMPLETION_BOX_TOP + _PROMPT_AUTOCOMPLETION_BOX_HEIGHT - 1 : lineAtWhichToDisplayCount));$((_PROMPT_AUTOCOMPLETION_BOX_LEFT))${__AC__TO}${_PROMPT_COLOR_STATIC}░─${_PROMPT_COLOR_STATIC_RESET}${AC__REPEAT__}$((_PROMPT_AUTOCOMPLETION_BOX_WIDTH - 2 - itemCounterLength))${__AC__LAST_CHAR}${itemsCounter}"
  fi

  printf '%s%s' "${toPrint}" "${AC__CURSOR_MOVE__}$((_PROMPT_START_LINE));$((_PROMPT_CURSOR_COLUMN))${__AC__TO}${AC__CURSOR_SHOW}"
}

# Clear the autocompletion box
function prompt_clearAutocompletionBox() {
  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_ENABLED} != "true" ]]; then
    return 0
  fi

  local toPrint="${AC__CURSOR_HIDE}"
  local lineNumber=0
  for ((lineNumber = _PROMPT_AUTOCOMPLETION_BOX_TOP; lineNumber < _PROMPT_AUTOCOMPLETION_BOX_TOP + _PROMPT_AUTOCOMPLETION_BOX_HEIGHT; lineNumber++)); do
    toPrint+="${AC__CURSOR_MOVE__}${lineNumber};${_PROMPT_AUTOCOMPLETION_BOX_LEFT}${__AC__TO}${AC__ERASE__}$((_PROMPT_AUTOCOMPLETION_BOX_WIDTH))${__AC_CHARS}"
  done
  printf '%s%s' "${toPrint}" "${AC__CURSOR_MOVE__}$((_PROMPT_START_LINE));$((_PROMPT_CURSOR_COLUMN))${__AC__TO}${AC__CURSOR_SHOW}"

  _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
}

# A function to show a validation message in the place of the autocompletion box.
function prompt_showValidationMessage() {
  local message="${1:-}"

  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_ENABLED} != "true" ]]; then
    return 0
  fi

  # clear the autocompletion box
  prompt_clearAutocompletionBox

  local toPrint="${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}${_PROMPT_AUTOCOMPLETION_BOX_TOP};${_PROMPT_AUTOCOMPLETION_BOX_LEFT}${__AC__TO}${_PROMPT_COLOR_VALIDATION_ERROR}${message}${_PROMPT_COLOR_VALIDATION_ERROR_RESET}"
  printf '%s%s' "${toPrint}" "${AC__CURSOR_MOVE__}$((_PROMPT_START_LINE));$((_PROMPT_CURSOR_COLUMN))${__AC__TO}${AC__CURSOR_SHOW}"
}

# Modifies the selected item index.
# Make it loop.
#
# - $1: **delta** _as integer_:
#       The delta to apply to the current index.
#
# Returns:
#
# - `_PROMPT_FILTERED_ITEMS_SELECTED_INDEX`: The new index.
# - `_PROMPT_FILTERED_ITEMS_START_INDEX`: The new start index if needed.
#
# ```bash
# prompt_changeSelectedItemIndex 1
# ```
function prompt_changeSelectedItemIndex() {
  local delta="${1:-0}"

  # if we have no items, we do nothing
  if [[ ${#_PROMPT_FILTERED_ITEMS[@]} -eq 0 ]]; then
    _PROMPT_FILTERED_ITEMS_SELECTED_INDEX=-1
    return 0
  fi

  # compute the new index (cycle through)
  local newIndex=$((_PROMPT_FILTERED_ITEMS_SELECTED_INDEX + delta))
  if ((newIndex < 0)); then
    newIndex=$((${#_PROMPT_FILTERED_ITEMS[@]} - 1))
  elif ((newIndex >= ${#_PROMPT_FILTERED_ITEMS[@]})); then
    newIndex=0
  fi

  # now we need to adjust the start index if needed
  # to make sure that the new index is visible on the screen
  if ((newIndex < _PROMPT_FILTERED_ITEMS_START_INDEX)); then
    _PROMPT_FILTERED_ITEMS_START_INDEX=${newIndex}
  elif ((newIndex > _PROMPT_FILTERED_ITEMS_START_INDEX + _PROMPT_AUTOCOMPLETION_BOX_HEIGHT - 1)); then
    _PROMPT_FILTERED_ITEMS_START_INDEX=$((newIndex - _PROMPT_AUTOCOMPLETION_BOX_HEIGHT + 1))
  fi

  _PROMPT_FILTERED_ITEMS_SELECTED_INDEX=${newIndex}
}

# Modifies the cursor index in the user string.
#
# - $1: **delta** _as integer_:
#       The delta to apply to the current cursor index.
#
# Returns:
#
# - `_PROMPT_STRING_INDEX`: The new index.
#
# ```bash
# prompt_changePromptCursorIndex 1
# ```
function prompt_changePromptCursorIndex() {
  local delta="${1:-0}"

  _PROMPT_STRING_INDEX=$((_PROMPT_STRING_INDEX + delta))

  if ((_PROMPT_STRING_INDEX < 0)); then
    _PROMPT_STRING_INDEX=0
  elif ((_PROMPT_STRING_INDEX > ${#_PROMPT_STRING})); then
    _PROMPT_STRING_INDEX=${#_PROMPT_STRING}
  fi
}

# Insert a text at the cursor position.
#
# - $1: **text** _as string_:
#       The text to insert.
function prompt_insertTextAtCurrentIndex() {
  if ((_PROMPT_STRING_INDEX > 0)); then
    _PROMPT_STRING="${_PROMPT_STRING:0:${_PROMPT_STRING_INDEX}}${1}${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
  else
    _PROMPT_STRING="${1}${_PROMPT_STRING}"
  fi
  prompt_changePromptCursorIndex ${#1}
}

# Change the prompt text, replacing the whole line or the word under the cursor.
function prompt_autocompleteWithSelectedItem() {
  if [[ ${_PROMPT_AUTOCOMPLETION_BOX_VISIBLE} != "true" ]]; then
    return 0
  fi
  # get the current selected item
  prompt_getCurrentInitialItemsIndex
  if [[ ${RETURNED_VALUE} == "-1" ]]; then
    return 0
  fi
  local selectedItem="${_PROMPT_ORIGINAL_ITEMS[${RETURNED_VALUE}]}"

  if [[ ${_PROMPT_AUTOCOMPLETE_WHOLE_LINE} == true ]]; then
    _PROMPT_STRING="${selectedItem}"
    _PROMPT_STRING_INDEX=${#_PROMPT_STRING}
  else
    # replace the word under the cursor
    # if we are on space of end of line, we just add the selected item
    if [[ ${_PROMPT_STRING_INDEX} -eq ${#_PROMPT_STRING} || ${_PROMPT_STRING:${_PROMPT_STRING_INDEX}:1} =~ [[:space:]] ]]; then
      prompt_insertTextAtCurrentIndex "${selectedItem}"
    else
      local -i index=${_PROMPT_STRING_INDEX}
      while [[ ${index} -gt 0 && ${_PROMPT_STRING:index:1} =~ [^[:space:]] ]]; do
        index=$((index - 1))
      done
      if ((index > 0)); then
        _PROMPT_STRING="${selectedItem}${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      else
        _PROMPT_STRING="${_PROMPT_STRING:0:${index}}${selectedItem}${_PROMPT_STRING:${_PROMPT_STRING_INDEX}}"
      fi
      _PROMPT_STRING_INDEX=$((index + ${#selectedItem}))
    fi
  fi

  _PROMPT_AUTOCOMPLETION_BOX_VISIBLE=false
}

# Change the cursor position, move to the end of the word (or next).
function prompt_moveCursorToEndOfWord() {
  # move to the end of the word
  local -i index=${_PROMPT_STRING_INDEX}
  index+=1
  while [[ ${index} -lt ${#_PROMPT_STRING} && ${_PROMPT_STRING:index:1} =~ [[:space:]] ]]; do
    index+=1
  done
  while [[ ${index} -lt ${#_PROMPT_STRING} && ${_PROMPT_STRING:index:1} =~ [^[:space:]] ]]; do
    index=$((index + 1))
  done
  _PROMPT_STRING_INDEX=$((index <= ${#_PROMPT_STRING} ? index : ${#_PROMPT_STRING}))
}

# Change the cursor position, move to the beginning of the word (or previous).
function prompt_moveCursorToBeginningOfWord() {
  # move to beginning of the previous word
  local -i index=${_PROMPT_STRING_INDEX}
  index+=-1
  while [[ ${index} -gt 0 && ${_PROMPT_STRING:index:1} =~ [[:space:]] ]]; do
    index+=-1
  done
  while [[ ${index} -gt 0 && ${_PROMPT_STRING:index:1} =~ [^[:space:]] ]]; do
    if [[ ${index} -ge 1 && ${_PROMPT_STRING:$((index - 1)):1} =~ [[:space:]] ]]; then
      break
    fi
    index=$((index - 1))
  done
  _PROMPT_STRING_INDEX=$((index >= 0 ? index : 0))
}

# Returns the index of the item in the original array (if any, or -1).
# It returns in the RETURNED_VALUE variable.
function prompt_getCurrentInitialItemsIndex() {
  if ((_PROMPT_FILTERED_ITEMS_SELECTED_INDEX >= 0 && _PROMPT_FILTERED_ITEMS_SELECTED_INDEX < ${#_PROMPT_FILTERED_ITEMS_CORRESPONDENCES[@]})); then
    RETURNED_VALUE=${_PROMPT_FILTERED_ITEMS_CORRESPONDENCES[${_PROMPT_FILTERED_ITEMS_SELECTED_INDEX}]}
    return 0
  fi
  RETURNED_VALUE=-1
}

# Compute the size and position of the autocompletion box.
#
# Returns:
#
# - `_PROMPT_AUTOCOMPLETION_BOX_HEIGHT`: The height of the autocompletion box.
# - `_PROMPT_AUTOCOMPLETION_BOX_TOP`: The top position of the autocompletion box.
# - `_PROMPT_AUTOCOMPLETION_BOX_WIDTH`: The width of the autocompletion box.
# - `_PROMPT_AUTOCOMPLETION_BOX_LEFT`: The left position of the autocompletion box.
#
function prompt_getAutocompletionBoxSize() {
  local maxLines="${1:-9999}"
  local forceBelow="${2:-}"
  local startLine="${3}"
  local startColumn="${4}"
  local nbItems="${5}"
  local maxItemLength="${6}"
  local showPrompt="${7:-true}"

  local extraLine=1
  if [[ ${showPrompt} == "true" ]]; then
    extraLine=0
  fi

  local below=true
  local -i maxAvailableLines=$((GLOBAL_LINES - startLine + extraLine))
  if [[ ${forceBelow} != "true" ]]; then
    local maxAvailableLinesAbove=$((startLine - 1 + extraLine))
    if ((nbItems > maxAvailableLines && maxAvailableLinesAbove > maxAvailableLines)); then
      maxAvailableLines=${maxAvailableLinesAbove}
      below=false
    fi
  fi

  maxLines=$((maxLines >= maxAvailableLines ? maxAvailableLines : maxLines))
  _PROMPT_AUTOCOMPLETION_BOX_HEIGHT=$((nbItems >= maxLines ? maxLines : nbItems))
  if [[ ${below} == "true" ]]; then
    _PROMPT_AUTOCOMPLETION_BOX_TOP=$((startLine + 1 - extraLine))
  else
    _PROMPT_AUTOCOMPLETION_BOX_TOP=$((startLine - _PROMPT_AUTOCOMPLETION_BOX_HEIGHT + extraLine))
  fi

  _PROMPT_AUTOCOMPLETION_BOX_WIDTH=$((maxItemLength >= GLOBAL_COLUMNS ? GLOBAL_COLUMNS : maxItemLength))
  _PROMPT_AUTOCOMPLETION_BOX_LEFT=$((GLOBAL_COLUMNS - startColumn + 1 > _PROMPT_AUTOCOMPLETION_BOX_WIDTH ? startColumn : GLOBAL_COLUMNS - _PROMPT_AUTOCOMPLETION_BOX_WIDTH + 1))

  if ((_PROMPT_AUTOCOMPLETION_BOX_WIDTH < 1)); then
    _PROMPT_AUTOCOMPLETION_BOX_WIDTH=1
  fi
  if ((_PROMPT_AUTOCOMPLETION_BOX_HEIGHT < 0)); then
    _PROMPT_AUTOCOMPLETION_BOX_HEIGHT=0
  fi
}

# This method uses the following global variables:
#
# - _PROMPT_STRING
# - _PROMPT_STRING_INDEX
# - _PROMPT_STRING_WIDTH
#
# It returns the prompt string to display and the relative position
# of the cursor within this prompt string.
# It correctly cuts the user string and adds the necessary ellipsis
#
# - RETURNED_VALUE: the string to display
# - RETURNED_VALUE2: the position of the cursor within this string
function prompt_getDisplayedPromptString() {
  local -i initialPromptLength=${#_PROMPT_STRING}
  local -i cursorIndex

  # compute where we will display the cursor in the prompt
  if ((_PROMPT_STRING_INDEX >= _PROMPT_STRING_WIDTH)); then
    if ((_PROMPT_STRING_INDEX >= initialPromptLength - 1)); then
      # we display it in the last position if it is at the end of the string
      cursorIndex=$((_PROMPT_STRING_WIDTH - 1))
    else
      # we display at the second last position if it is not at the end
      cursorIndex=$((_PROMPT_STRING_WIDTH - 2))
    fi
  else
    if ((initialPromptLength > _PROMPT_STRING_WIDTH && initialPromptLength - _PROMPT_STRING_INDEX == 2)); then
      cursorIndex=$((_PROMPT_STRING_WIDTH - 2))
    else
      if ((initialPromptLength > _PROMPT_STRING_WIDTH && _PROMPT_STRING_WIDTH - _PROMPT_STRING_INDEX == 1)); then
        # if within the prompt but at the last character and we will need to display ellipsis...
        cursorIndex=$((_PROMPT_STRING_WIDTH - 2))
      else
        # if it is already within the prompt, we display it at the right position
        cursorIndex=${_PROMPT_STRING_INDEX}
      fi
    fi
  fi

  local -i displayedLeftLength=$((cursorIndex))
  local -i realLeftLength=$((_PROMPT_STRING_INDEX))

  local prompt=""

  # compute what to display at the left of the character under the caret (if any)
  if ((displayedLeftLength > 0)); then
    if ((realLeftLength > displayedLeftLength)); then
      # we can't display the whole left string, so we display ellipsis
      if ((displayedLeftLength > 1)); then
        prompt+="…${_PROMPT_STRING:$((realLeftLength - displayedLeftLength + 1)):$((displayedLeftLength - 1))}"
      else
        prompt+="…"
      fi
    else
      prompt+="${_PROMPT_STRING:$((realLeftLength - displayedLeftLength)):$((displayedLeftLength))}"
    fi
  fi

  # compute the character to display under the caret (if any)
  if ((initialPromptLength > 0 && _PROMPT_STRING_INDEX <= initialPromptLength)); then
    prompt+="${_PROMPT_STRING:$((_PROMPT_STRING_INDEX)):1}"
  fi

  # compute what to display at the right of the character under the caret (if any)
  local -i displayedRightLength=$((_PROMPT_STRING_WIDTH - cursorIndex - 1))
  local -i realRightLength=$((initialPromptLength - _PROMPT_STRING_INDEX - 1))

  if ((displayedRightLength > 0)); then
    if ((realRightLength > displayedRightLength)); then
      # we can't display the whole right string, so we display ellipsis
      if ((displayedRightLength > 1)); then
        prompt+="${_PROMPT_STRING:$((initialPromptLength - realRightLength)):$((displayedRightLength - 1))}…"
      else
        prompt+="…"
      fi
    else
      prompt+="${_PROMPT_STRING:$((initialPromptLength - realRightLength)):$((displayedRightLength))}"
    fi
  fi

  RETURNED_VALUE="${prompt}"
  RETURNED_VALUE2=${cursorIndex}
}
