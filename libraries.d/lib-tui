#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-terminal
source terminal

# shellcheck disable=SC2317
function tui::test() {
  printf '%s\n' "Press any key to see the returned code (press CTRL+C to quit)." 1>&"${GLOBAL_FD_TUI}"

  # define the callback function called when a special key is pressed
  function onKeyPress() {
    printf "You pressed (binding): ⌜%q⌝\n" "${1}" 1>&"${GLOBAL_FD_TUI}"
  }

  # define the callback function called when the screen needs to be redrawn
  function onRedrawRequired() {
    printf "The screen needs to be redrawn, terminal changed to: ⌜%s x %s⌝\n" "${GLOBAL_COLUMNS}" "${GLOBAL_LINES}" 1>&"${GLOBAL_FD_TUI}"
  }

  # define the callback function called on each loop iteration
  function onTick() {
    printf "%s\n" "1s has elapsed" 1>&"${GLOBAL_FD_TUI}"
  }

  _OPTION_ON_REDRAW_REQUIRED_CALLBACK=onRedrawRequired \
  _OPTION_ON_EACH_LOOP_ITERATION_CALLBACK=onTick \
  _OPTION_LOOP_DELAY=1.0 \
    tui::startMainLoop onKeyPress
}

function tui::startMainLoop() {
  local onKeyPressFunction="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local onEachLoopIterationFunction="${_OPTION_ON_EACH_LOOP_ITERATION_CALLBACK:-}"
  local onRedrawRequiredFunction="${_OPTION_ON_REDRAW_REQUIRED_CALLBACK:-}"
  local loopDelay="${_OPTION_LOOP_DELAY:-0.5}"
  local _TUI_KEY_BINDINGS_PREFIX=":"

  if ! declare -F "${onKeyPressFunction}" &>/dev/null; then
    core::fail "The on key press callback function ⌜${onKeyPressFunction}⌝ does not exist."
  fi
  if [[ -n ${onEachLoopIterationFunction} ]] && ! declare -F "${onEachLoopIterationFunction}" &>/dev/null; then
    core::fail "The on each loop iteration callback function ⌜${onEachLoopIterationFunction}⌝ does not exist."
  fi

  # setup the terminal to be ready for readline
  terminal::setRawMode
  # before starting to wait for inputs, we clear up the key pressed
  # terminal::clearKeyPressed
  terminal::rerouteLogs
  tui_startKeyPressListener

  # shellcheck disable=SC2034
  GLOBAL_WARN_ON_INTERRUPT_DISABLED=true
  GLOBAL_SCREEN_REDRAW_REQUIRED=false

  local -i nbCoprocRestart=0
  local IFS=" "

  # main loop
  while [[ -t ${GLOBAL_FD_TUI} ]]; do
    # call the on each loop iteration callback function if defined
    if [[ -n ${onEachLoopIterationFunction} ]] && ! "${onEachLoopIterationFunction}"; then
      log::debug "The on each loop iteration callback function ⌜${onEachLoopIterationFunction}⌝ returned non-zero exit code, stopping the main loop."
      break
    fi

    # call the on redraw required callback function if defined
    if [[ ${GLOBAL_SCREEN_REDRAW_REQUIRED} == "true" && -n ${onRedrawRequiredFunction} ]]; then
      "${onRedrawRequiredFunction}"
      GLOBAL_SCREEN_REDRAW_REQUIRED=false
    fi

    # restart coproc if it is not running
    if [[ ! -v _TUI_COPROC_KEY_PRESS_LISTENER_PID ]]; then
      if (( nbCoprocRestart > 3 )); then
        log::error "Key press listener coproc is failing to start, check the logs for errors."
        break
      fi
      log::warning "Key press listener coproc is not already running, re-starting it."
      tui_startKeyPressListener
      nbCoprocRestart+=1
    fi

    # read the key pressed from the key press listener coproc
    if { IFS=$'\0' read -t "${loopDelay}" -rd $'\0' -u "${_TUI_COPROC_KEY_PRESS_LISTENER[0]}" LAST_KEY_PRESSED; } 2>/dev/null; then
      if ! "${onKeyPressFunction}" "${LAST_KEY_PRESSED}"; then
        log::debug "The on key press callback function ⌜${onKeyPressFunction}⌝ returned non-zero exit code, stopping the main loop."
        break
      fi
    fi
  done

  unset -v GLOBAL_WARN_ON_INTERRUPT_DISABLED

  tui_stopKeyPressListener
  terminal::restoreLogs
  terminal::restoreSettings
}

function tui_startKeyPressListener() {
  # if the key press listener is not already running, we start it
  if [[ ! -v _TUI_COPROC_KEY_PRESS_LISTENER ]]; then  
    if [[ ! -v _TUI_USER_INPUT_FD ]]; then
      exec {_TUI_USER_INPUT_FD}<&0
    fi
    log::debug "Starting key press listener coproc."
    { coproc _TUI_COPROC_KEY_PRESS_LISTENER { tui_keyPressListener 2>&"${GLOBAL_FD_LOG}"; } } 2>/dev/null
    GLOBAL_BACKGROUND_PIDS+=("${_TUI_COPROC_KEY_PRESS_LISTENER_PID}")
  fi
}

function tui_stopKeyPressListener() {
  # if the key press listener is running, we stop it
  if [[ -v _TUI_COPROC_KEY_PRESS_LISTENER_PID ]]; then
    log::debug "Stopping key press listener coproc."
    local pid="${_TUI_COPROC_KEY_PRESS_LISTENER_PID}"
    kill "${pid}" &>/dev/null || :
    unset _TUI_COPROC_KEY_PRESS_LISTENER _TUI_COPROC_KEY_PRESS_LISTENER_PID

    # shellcheck source=lib-array
    source array
    array::remove GLOBAL_BACKGROUND_PIDS pid
  else
    log::debug "Key press listener coproc is not running."
  fi
}

function tui_keyPressListener() {
  # we are inside a coproc, register the correct traps
  trap::registerSubshell

  # rebind some keys to call the callback function
  terminal::rebindKeymap tui_keyPressListener_handleKeyBinding

  while [[ -t ${_TUI_USER_INPUT_FD} ]] && kill -0 "${GLOBAL_PROGRAM_MAIN_PID}" 2>/dev/null; do
    if terminal::waitForKeyPress -u "${_TUI_USER_INPUT_FD}"; then
      case ${LAST_KEY_PRESSED} in
      $'\r') printf "%s%s\0" "${_TUI_KEY_BINDINGS_PREFIX}" "ENTER" ;;
      $'\n') printf "%s%s\0" "${_TUI_KEY_BINDINGS_PREFIX}" "CTRL+ENTER" ;;
      $'\t') printf "%s%s\0" "${_TUI_KEY_BINDINGS_PREFIX}" "TAB" ;;
      *) printf "%s\0" "${LAST_KEY_PRESSED}" ;;
      esac
    fi
  done
}

function tui_keyPressListener_handleKeyBinding() {
  # make sure we see any error happening in this function, since it is
  # executed as a callback of the readline process and we redirected the stderr
  # to /dev/null to avoid a bug with readline (see tui_waitForKeyPress)
  # exec 2>&"${GLOBAL_FD_LOG}"
  printf "%s%s\0" "${_TUI_KEY_BINDINGS_PREFIX}" "${1}" 
}
