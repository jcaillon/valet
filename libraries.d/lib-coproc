#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-bash
source bash

# ## coproc::run
#
# This function runs commands in a coproc.
# It returns the file descriptors/PID of the coproc and defines functions to easily
# interact with the coproc.
#
# - $1: **coproc variable name** _as string_:
#       The variable name to use for the coproc.
#       It will be used to store the coproc file descriptors and PID.²
#       <coproc_variable_name>[0] will be the input pipe file descriptor,
#       <coproc_variable_name>[1] will be the output pipe file descriptor,
#       <coproc_variable_name>_PID will be the PID of the coproc.
# - $2: **init command to eval** _as string_:
#       The command (will be evaluated) to run at the start of the coproc.
#       Can return 1 to stop the coproc.
# - $3: **loop command to eval** _as string_:
#       The command (will be evaluated) to run in the coproc loop.
#       Can be set to "false" to not run any command in the loop (and just use init).
#       Can return 1 to break the loop.
# - $4: **on message command to eval** _as string_:
#       The command (will be evaluated) to run in the coproc loop when a message
#       is received from the main thread.
#       The command can expect to use the variable REPLY which contains
#       the message (string) received from the main thread.
#       The command can send messages to the main thread using the syntax
#       printf "%s\0" "message"
#       Can return 1 to break the loop.
# - $5: **end command to eval** _as string_:
#       The command (will be evaluated) to run at the end of the coproc.
# - ${_OPTION_WAIT_FOR_READINESS} _as bool_:
#       (optional) If true, the main thread will wait for the coproc to be ready
#       before returning from this function (readiness is achieved after executing
#       the init command in the coproc).
#       (defaults to false)
# - ${_OPTION_KEEP_ONLY_LAST_MESSAGE} _as bool_:
#       (optional) If true, the coproc will only keep the last message received
#       from the main thread to evaluate the on message command.
#       (defaults to false)
#
# Returns:
# 
# - ${REPLY}: The PID of the coproc.
#
# ```bash
# _OPTION_WAIT_FOR_READINESS=true coproc::run "_MY_COPROC" initCommand loopCommand onMessageCommand
# ```
function coproc::run() {
  local coprocVarName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local initCommand="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local loopCommand="${3?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local onMessageCommand="${4?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local endCommand="${5?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local waitForReadiness="${_OPTION_WAIT_FOR_READINESS:-false}"
  local keepOnlyLastMessage="${_OPTION_KEEP_ONLY_LAST_MESSAGE:-false}"

  if [[ -v "${coprocVarName}" ]]; then
    core::fail "The coproc ⌜${coprocVarName}⌝ is already running."
  fi

  log::debug "Starting coproc ⌜${coprocVarName}⌝ with command ⌜${initCommand}⌝ and loop ⌜${loopCommand}⌝."

  # Start the coproc
  eval "{ coproc ${coprocVarName} { coproc_program \"${initCommand}\" \"${loopCommand}\" \"${onMessageCommand}\" \"${endCommand}\" ${waitForReadiness} ${keepOnlyLastMessage} 2>&${GLOBAL_FD_LOG}; } } 2>/dev/null"

  # wait for pid variable to be set by bash (we should never enter the loop)
  local -i loopNumber=0
  while [[  ${loopNumber} -lt 500 && ! -v "${coprocVarName}_PID" ]]; do
    sleep 0.01
    loopNumber+=1
  done

  # get the PID (store it in another var because _PID gets deleted once the coproc ends)
  if ! eval "local pid=\${${coprocVarName}_PID}"; then
    core::fail "Failed to get the PID for coproc ⌜${coprocVarName}⌝."
  fi
  GLOBAL_BACKGROUND_PIDS+=("${pid}")

  # tell the coproc to resume (it is waiting for the main thread to retrieve its PID)
  coproc::sendMessage "${coprocVarName}" ":"

  # wait for readiness if requested
  if [[ ${waitForReadiness} == "true" ]]; then
    if ! kill -0 "${pid}" 2>/dev/null || ! coproc::receiveMessage "${coprocVarName}"; then
      core::fail "The coproc ⌜${coprocVarName}⌝ did not start correctly."
    elif [[ ${REPLY} != "ready" ]]; then
      core::fail "The coproc ⌜${coprocVarName}⌝ did not send the expected readiness message."
    else
      log::debug "The coproc ⌜${coprocVarName}⌝ is ready."
    fi
  fi

  REPLY="${pid}"
}

# The function that will run in the coproc.
function coproc_program() {
  local initCommand="${1}"
  local loopCommand="${2}"
  local onMessageCommand="${3}"
  local endCommand="${4}"
  local waitForReadiness="${5}"
  local keepOnlyLastMessage="${6}"

  # we are inside a coproc, register the correct traps
  trap::registerSubshell

  # wait for the main process to retrieve our PID
  if ! kill -0 "${GLOBAL_PROGRAM_MAIN_PID}" 2>/dev/null || ! IFS=$'\0' read -rd $'\0' REPLY; then
    log::debug "Main process is not running, exiting coproc."
    return 0
  fi 

  # Run the initialization command
  if ! eval "${initCommand}"; then
    log::debug "Initialization command returned non-zero status, exiting coproc."
    return 0
  fi

  if [[ ${waitForReadiness} == "true" ]]; then
    # Send a readiness message to the main thread
    printf "%s\0" "ready"
  fi

  while kill -0 "${GLOBAL_PROGRAM_MAIN_PID}" 2>/dev/null; do
    if ! eval "${loopCommand}"; then
      log::debug "Loop command return non-zero status, exiting coproc."
      break
    fi
    if [[ -n "${onMessageCommand}" ]]; then
      # Read messages from the main thread
      if IFS=$'\0' read -rd $'\0' REPLY; then

        # if we keep only the last message, we read until no more messages are available
        while [[ ${keepOnlyLastMessage} == "true" ]] && IFS=$'\0' read -rd $'\0' -t 0; do
          IFS=$'\0' read -rd $'\0' REPLY
        done

        # Execute the on message command with the received message
        if ! eval "${onMessageCommand}"; then
          log::debug "On message command returned non-zero status, exiting coproc."
          break
        fi
      fi
    fi
  done

  if ! eval "${endCommand}"; then
    log::debug "End command returned non-zero status."
  fi
}

# ## coproc::sendMessage
#
# This function sends a message to a given coproc.
#
# - $1: **coproc variable name** _as string_:
#       The variable name to use for the coproc.
# - $2: **message** _as string_:
#       The message to send to the coproc.
#
# Returns:
#
# - $?:
#   - 0 if the message was sent successfully.
#   - 1 if the coproc is not running or the message could not be sent.
#
# ```bash
# coproc::sendMessage "myCoproc" "Hello, coproc!"
# ```
function coproc::sendMessage() {
  local coprocVarName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  if [[ ! -v "${coprocVarName}" ]]; then
    return 1
  fi
  local -n coprocFd="${coprocVarName}[1]"
  
  if { printf '%s\0' "${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}" >&"${coprocFd}"; } 2>/dev/null; then
    return 0
  fi

  return 1
}

# ## coproc::receiveMessage
#
# This function receives a message from a given coproc.
#
# - $1: **coproc variable name** _as string_:
#       The variable name to use for the coproc.
#
# Returns:
#
# - $?:
#   - 0 if a message was received successfully.
#   - 1 if the coproc is not running or no message could be received.
# - ${REPLY}: The received message.
#
# ```bash
# if coproc::receiveMessage "myCoproc"; then
#   echo "Received message: ${REPLY}"
# fi
# ```
function coproc::receiveMessage() {
  local coprocVarName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  if [[ ! -v "${coprocVarName}" ]]; then
    return 1
  fi
  local -n coprocFd="${coprocVarName}[0]"

  if { IFS=$'\0' read -rd $'\0' -u "${coprocFd}" REPLY; } 2>/dev/null; then
    return 0
  fi

  return 1
}

# ## coproc::wait
#
# This function waits for a coproc to finish.
#
# - $1: **coproc variable name** _as string_:
#       The variable name to use for the coproc.
#
# Returns:
# - $?: The exit status of the coproc (or 0 if the coproc is not running).
#
# ```bash
# coproc::wait "myCoproc"
# ```
function coproc::wait() {
  local coprocVarName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  if [[ ! -v "${coprocVarName}_PID" ]]; then
    return 0
  fi

  local -n pid="${coprocVarName}_PID"
  
  if ! wait -f "${pid}"; then
    return "${PIPESTATUS[0]:-}"
  fi
}

# ## coproc::isRunning
#
# This function checks if a coproc is running.
#
# - $1: **coproc variable name** _as string_:
#       The variable name to use for the coproc.
#
# Returns:
#
# - $?: 
#   - 0 if the coproc is running
#   - 1 if it is not
#
# ```bash
# if coproc::isRunning "myCoproc"; then
#   echo "The coproc is running."
# fi
# ```
function coproc::isRunning() {
  local coprocVarName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  if [[ ! -v "${coprocVarName}_PID" ]]; then
    return 1
  fi

  local -n pid="${coprocVarName}_PID"

  if ! kill -0 "${pid}" 2>/dev/null; then
    return 1
  fi
}

# ## coproc::kill
#
# This function kills a coproc.
#
# - $1: **coproc variable name** _as string_:
#       The variable name to use for the coproc.
#
# ```bash
# coproc::kill "myCoproc"
# ```
function coproc::kill() {
  local coprocVarName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  if [[ ! -v "${coprocVarName}_PID" ]]; then
    return 0
  fi

  eval "local pid=\${${coprocVarName}_PID}"

  if kill "${pid}" &>/dev/null; then
    coproc_removePidFromBackgroundPids "${pid}"
    unset -v "${coprocVarName}" "${coprocVarName}_PID"
  fi
}

# Remove the coproc pid from GLOBAL_BACKGROUND_PIDS
function coproc_removePidFromBackgroundPids() {
  local -i pid="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  local index
  for index in "${!GLOBAL_BACKGROUND_PIDS[@]}"; do
    if [[ "${GLOBAL_BACKGROUND_PIDS[index]}" == "${pid}" ]]; then
      unset 'GLOBAL_BACKGROUND_PIDS[index]'
      break
    fi
  done
}