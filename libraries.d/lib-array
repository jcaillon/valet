#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## array::quicksort (private)
#
# Sorts an array using the quicksort algorithm (hoarse partition).
#
# This function is hard to use, check `array::sort` or `array::sortWithCriteria` instead
# (they also use this quicksort function behind the scene).
#
# This function uses callback functions to set the pivot, compare and swap elements.
#
# - $1: **low** _as integer_:
#       The index of the first element to sort.
# - $2: **high** _as integer_:
#       The index of the last element to sort.
#
# ```bash
# declare myArray=(z f b h a j)
# array::quicksort "array_sortCompareCallBack" "array_sortSwapCallBack" 0 2
# echo "${myArray[@]}"
# ```
#
# > This function is not meant to be used directly, use `array::sort` or `array::sortWithCriteria` instead.
function array::quicksort() {
  local -i low=${1}
  local -i high=${2}

  if ((low >= high)); then
    return 0
  fi

  local -i left=$((low - 1))
  local -i right=$((high + 1))

  # set the pivot value
  array_setPivotCallBack $((low + (high - low) / 2))

  while true; do
    left+=1
    right=$((right - 1))

    while array_isInferiorToPivotCallBack ${left}; do # left < pivot
      left+=1
    done
    while array_isSuperiorToPivotCallBack ${right}; do # right > pivot
      right=$((right - 1))
    done

    if ((left >= right)); then
      break
    fi

    # swap left and right
    array_swapCallBack ${left} ${right}
  done

  array::quicksort ${low} ${right}
  array::quicksort $((right + 1)) ${high}
}

# ## array::sort
#
# Sorts an array using the > bash operator (lexicographic order).
#
# - $1: **array name** _as string_:
#       The variable name of the array to sort  (it will be sorted in place).
#
# ```bash
# declare myArray=(z f b h a j)
# array::sort myArray
# echo "${myArray[*]}"
# ```
#
# > - This function uses a quicksort algorithm (hoarse partition).
# > - The sorting is not stable (the order of equal elements is not preserved).
# > - It is not appropriate for large array, use the `sort` binary for such cases.
function array::sort() {
  local arrayName=${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}
  local -n array=${arrayName}

  local _tmp _pivot
  local setPivot="_pivot=\"\${${arrayName}[\${1}]}\""
  local isInferiorToPivot="[[ \${${arrayName}[\${1}]} < \"\${_pivot}\" ]]"
  local isSuperiorToPivot="[[ \${${arrayName}[\${1}]} > \"\${_pivot}\" ]]"
  local swap="
  _tmp=\"\${${arrayName}[\${1}]}\"
  ${arrayName}[\${1}]=\"\${${arrayName}[\${2}]}\"
  ${arrayName}[\${2}]=\"\${_tmp}\"
  "

  local IFS=" "
  array::quicksort 0 $((${#array[@]} - 1))
}

# ## array_setPivotCallBack (private)
#
# Set the pivot value.
#
# - $1: **index** _as integer_:
#       The index of the pivot element.
function array_setPivotCallBack() {
  eval "${setPivot}"
}

# ## array_isInferiorToPivotCallBack (private)
#
# Check if the element at the given index is inferior (strictly) to the pivot.
#
# - $1: **index** _as integer_:
#       The index of the element to check against the pivot.
function array_isInferiorToPivotCallBack() {
  eval "${isInferiorToPivot}"
}

# ## array_isSuperiorToPivotCallBack (private)
#
# Check if the element at the given index is superior (strictly) to the pivot.
#
# - $1: **index** _as integer_:
#       The index of the element to check against the pivot.
function array_isSuperiorToPivotCallBack() {
  eval "${isSuperiorToPivot}"
}

# ## array_swapCallBack (private)
#
# Swap two elements.
#
# - $1: **first index** _as integer_:
#       The index of the first element to swap.
# - $2: **second index** _as integer_:
#       The index of the second element to swap.
# shellcheck disable=SC2034
function array_swapCallBack() {
  eval "${swap}"
}

# ## array::sortWithCriteria
#
# Sorts an array using multiple criteria.
# Excepts multiple arrays. The first array is the one to sort.
# The other arrays are used as criteria. Criteria are used in the order they are given.
# Each criteria array must have the same size as the array to sort.
# Each criteria array must containing integers representing the order of the elements.
# We first sort using the first criteria (from smallest to biggest), then the second, etc.
#
# - $1: **array name** _as string_:
#       The name of the array to sort (it will be sorted in place).
# - $@: **criteria array names** _as string_:
#       The names of the arrays to use as criteria.
#       Each array must have the same size as the array to sort and contain only numbers.
#
# Returns:
#
# - ${RETURNED_ARRAY[@]}: An array that contains the corresponding indexes of the sorted array in the original array
#
# ```bash
# declare myArray=( "a" "b" "c" )
# declare criteria1=( 3 2 2 )
# declare criteria2=( 1 3 2 )
# array::sortWithCriteria myArray criteria1 criteria2
# echo "${myArray[@]}"
# # c b a
# echo "${RETURNED_ARRAY[@]}"
# # 3 2 1
# ```
#
# > - This function uses a quicksort algorithm (hoarse partition).
# > - The sorting is not stable (the order of equal elements is not preserved).
# > - It is not appropriate for large array, use the `sort` binary for such cases.
function array::sortWithCriteria() {
  local arrayName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -n array="${arrayName}"
  shift
  local -a criteriaArrayNames=("${@}")

  # an array of indices
  eval "RETURNED_ARRAY=( {0..$((${#array[@]} - 1))} )"

  local name _tmpValue
  local -i arrayNumber=0 _tmp
  local -a -i _pivot
  local setPivot="_pivot=();"
  local isInferiorToPivot="" isSuperiorToPivot=""
  for name in "${criteriaArrayNames[@]}"; do
    setPivot+="
      _pivot+=(\${${name}[RETURNED_ARRAY[\${1}]]})
    "
    isInferiorToPivot+="
      if (( ${name}[\${RETURNED_ARRAY[\${1}]}] < _pivot[${arrayNumber}] )); then
        return 0
      elif (( ${name}[\${RETURNED_ARRAY[\${1}]}] > _pivot[${arrayNumber}] )); then
        return 1
      fi
    "
    isSuperiorToPivot+="
      if (( ${name}[\${RETURNED_ARRAY[\${1}]}] > _pivot[${arrayNumber}] )); then
        return 0
      elif (( ${name}[\${RETURNED_ARRAY[\${1}]}] < _pivot[${arrayNumber}] )); then
        return 1
      fi
    "
    arrayNumber+=1
  done
  isInferiorToPivot+="return 1"
  isSuperiorToPivot+="return 1"
  local swap="
  _tmp=\"\${RETURNED_ARRAY[\${1}]}\"
  RETURNED_ARRAY[\${1}]=\"\${RETURNED_ARRAY[\${2}]}\"
  RETURNED_ARRAY[\${2}]=\"\${_tmp}\"

  _tmpValue=\"\${array[\${1}]}\"
  array[\${1}]=\"\${array[\${2}]}\"
  array[\${2}]=\"\${_tmpValue}\"
  "

  local IFS=" "
  array::quicksort 0 $((${#array[@]} - 1))
}

# ## array::appendIfNotPresent
#
# Add a value to an array if it is not already present.
#
# - $1: **array name** _as string_:
#       The variable name of the array.
# - $2: **value variable name** _as any_:
#       The variable name containing the value to add.
#
# Returns:
#
# - $?:
#   - 0 if the value was added
#   - 1 if it was already present
#
# ```bash
# declare myArray=( "a" "b" )
# declare myValue="b"
# array::appendIfNotPresent myArray myValue
# printf '%s\n' "${myArray[@]}"
# ```
function array::appendIfNotPresent() {
  local -n array=${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}
  local -n valueToAdd="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  # add value to array if not present, check in a loop
  local -i present=0
  local item
  for item in "${array[@]}"; do
    if [[ ${item} == "${valueToAdd}" ]]; then
      present=1
      break
    fi
  done
  if ((present == 0)); then
    array+=("${valueToAdd}")
  fi
  return ${present}
}

# ## array::checkIfPresent
#
# Check if a value is in an array.
# It uses pure bash.
#
# - $1: **array name** _as string_:
#       The variable name of the array.
# - $2: **value variable name** _as any_:
#       The variable name containing the value to check.
#
# Returns:
#
# - $?: 0 if the value is in the array, 1 otherwise.
#
# ```bash
# declare myArray=( "a" "b" )
# declare myValue="b"
# if array::checkIfPresent myArray myValue; then "b is in the array"; fi
# ```
function array::checkIfPresent() {
  # shellcheck disable=SC2178
  local -n array="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -n value="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  local item
  for item in "${array[@]}"; do
    if [[ ${item} == "${value}" ]]; then
      return 0
    fi
  done
  return 1
}

# ## array::makeArraysSameSize
#
# This function makes sure that all the arrays have the same size.
# It will add empty strings to the arrays that are too short.
#
# - $@: **array names** _as string_:
#       The variable names of each array to transform.
#
# ```bash
# array::makeArraysSameSize "array1" "array2" "array3"
# ```
function array::makeArraysSameSize() {
  local array
  local -i length
  local -a lengths
  local -i maxLength=0

  # compute max length among all arrays
  for array in "$@"; do
    if [[ ! -v "${array}" ]]; then
      eval "${array}=()"
    fi
    eval "length=\${#${array}[@]}" || length=0
    lengths+=("${length}")
    if [[ length -gt maxLength ]]; then
      maxLength=length
    fi
  done

  for length in "${lengths[@]}"; do
    while [[ length -lt maxLength ]]; do
      eval "${1}+=(\"\")"
      length+=1
    done
    shift
  done
}
