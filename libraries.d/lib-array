#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## array::quicksort (private)
#
# Sorts an array using the quicksort algorithm.
#
# This function is hard to use, check `array::sort` or `array::sortWithCriteria` instead
# (they also use this quicksort function behind the scene).
#
# This function uses callback functions to compare and swap elements.
#
# - $1: **compare callback** _as string_:
#       The name of the function to use to compare elements at given indexes.
#       The function must return 0 if the first element is greater than the second.
#       It will receive two arguments: the index of the first element and the index of the second element.
# - $2: **swap callback** _as string_:
#       The name of the function to use to swap elements at given indexes.
#       It will receive two arguments: the index of the first element and the index of the second element.
# - $3: **low** _as integer_:
#       The index of the first element to sort.
# - $4: **high** _as integer_:
#       The index of the last element to sort.
#
# ```bash
# declare myArray=(z f b h a j)
# array::quicksort "array_sortCompareCallBack" "array_sortSwapCallBack" 0 2
# echo "${myArray[@]}"
# ```
#
# > This function is not meant to be used directly, use `array::sort` or `array::sortWithCriteria` instead.
function array::quicksort() {
  local compareCallBack="${1}"
  local swapCallBack="${2}"
  local -i low=${3}
  local -i high=${4}

  if ((low >= high)); then
    return 0
  fi

  local -i pivotIndex=$((low))
  local -i ii=${low}
  local -i jj=${high}
  while ((ii <= jj)); do
    while ${compareCallBack} ${pivotIndex} ${ii}; do # pivot > ii
      ii+=1
    done
    while ${compareCallBack} ${jj} ${pivotIndex}; do  # jj > pivot
      jj=$((jj - 1))
    done
    if ((ii <= jj)); then
      ${swapCallBack} ${ii} ${jj}
      ii+=1
      jj=$((jj - 1))
    fi
  done

  if ((low < jj)); then
    array::quicksort "${compareCallBack}" "${swapCallBack}" ${low} ${jj}
  fi
  if ((ii < high)); then
    array::quicksort "${compareCallBack}" "${swapCallBack}" ${ii} ${high}
  fi
}

# ## array::sort
#
# Sorts an array using the > bash operator (lexicographic order).
#
# - $1: **array name** _as string_:
#       The variable name of the array to sort  (it will be sorted in place).
#
# ```bash
# declare myArray=(z f b h a j)
# array::sort myArray
# echo "${myArray[*]}"
# ```
#
# > - This function uses a quicksort algorithm.
# > - It is not appropriate for large array, use the `sort` binary for such cases.
function array::sort() {
  local arrayName=${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}
  local -n array=${arrayName}

  local _ARRAY_SWAP_COMMAND="
  tmp=\"\${${arrayName}[first]}\"
  ${arrayName}[first]=\"\${${arrayName}[second]}\"
  ${arrayName}[second]=\"\${tmp}\"
  "
  local _ARRAY_COMPARE_COMMAND="
  if [[ \${${arrayName}[first]} > \"\${${arrayName}[second]}\" ]]; then
    return 0
  fi
  "

  local IFS=" "
  array::quicksort "array_sortCompareCallBack" "array_sortSwapCallBack" 0 $(( ${#array[@]} - 1 ))
}

# ## array_sortSwapCallBack (private)
#
# Swap two elements.
#
# - $1: **first index** _as integer_:
#       The index of the first element to swap.
# - $2: **second index** _as integer_:
#       The index of the second element to swap.
# shellcheck disable=SC2034
function array_sortSwapCallBack() {
  local -i first="${1}"
  local -i second="${2}"
  local tmp
  eval "${_ARRAY_SWAP_COMMAND}"
}

# ## array_sortMultiIntegerCriteriaCompareCallBack (private)
#
# Compare two elements.
#
# - $1: **first index** _as integer_:
#       The index of the first element to compare.
# - $2: **second index** _as integer_:
#       The index of the second element to compare.
#
# Returns:
#
# - $?:0 if the first element is greater than the second, 1 otherwise.
# shellcheck disable=SC2034
function array_sortCompareCallBack() {
  local -i first="${1}"
  local -i second="${2}"
  eval "${_ARRAY_COMPARE_COMMAND}"
  return 1
}

# ## array::sortWithCriteria
#
# Sorts an array using multiple criteria.
# Excepts multiple arrays. The first array is the one to sort.
# The other arrays are used as criteria. Criteria are used in the order they are given.
# Each criteria array must have the same size as the array to sort.
# Each criteria array must containing integers representing the order of the elements.
# We first sort using the first criteria (from smallest to biggest), then the second, etc.
#
# - $1: **array name** _as string_:
#       The name of the array to sort (it will be sorted in place).
# - $@: **criteria array names** _as string_:
#       The names of the arrays to use as criteria.
#       Each array must have the same size as the array to sort and contain only numbers.
#
# Returns:
#
# - ${RETURNED_ARRAY}: An array that contains the corresponding indexes of the sorted array in the original array
#
# ```bash
# declare myArray=( "a" "b" "c" )
# declare criteria1=( 3 2 2 )
# declare criteria2=( 1 3 2 )
# array::sortWithCriteria myArray criteria1 criteria2
# echo "${myArray[@]}"
# # c b a
# echo "${RETURNED_ARRAY[@]}"
# # 3 2 1
# ```
#
# > - This function uses a quicksort algorithm.
# > - It is not appropriate for large array, use the `sort` binary for such cases.
function array::sortWithCriteria() {
  local arrayName="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -n array="${arrayName}"
  shift
  local -a criteriaArrayNames=("${@}")

  # an array of indices
  eval "RETURNED_ARRAY=( {0..$((${#array[@]} - 1))} )"

  # prepare the commands to compare and swap the elements
  local _ARRAY_COMPARE_COMMAND=""
  local _ARRAY_SWAP_COMMAND="
    tmp=\"\${${arrayName}[first]}\"
    ${arrayName}[first]=\"\${${arrayName}[second]}\"
    ${arrayName}[second]=\"\${tmp}\"
    tmp=\"\${RETURNED_ARRAY[first]}\"
    RETURNED_ARRAY[first]=\"\${RETURNED_ARRAY[second]}\"
    RETURNED_ARRAY[second]=\"\${tmp}\"
  "
  local name
  for name in "${criteriaArrayNames[@]}"; do
    _ARRAY_SWAP_COMMAND="${_ARRAY_SWAP_COMMAND}
    tmp=\"\${${name}[first]}\"
    ${name}[first]=\"\${${name}[second]}\"
    ${name}[second]=\"\${tmp}\"
    "
    _ARRAY_COMPARE_COMMAND="${_ARRAY_COMPARE_COMMAND}
      if (( ${name}[first] < ${name}[second] )); then
        return 1
      elif (( ${name}[first] > ${name}[second] )); then
        return 0
      fi
    "
  done

  local IFS=" "
  array::quicksort "array_sortCompareCallBack" "array_sortSwapCallBack" 0 $(( ${#array[@]} - 1 ))
}

# ## array::appendIfNotPresent
#
# Add a value to an array if it is not already present.
#
# - $1: **array name** _as string_:
#       The variable name of the array.
# - $2: **value variable name** _as any_:
#       The variable name containing the value to add.
#
# Returns:
#
# - $?:
#   - 0 if the value was added
#   - 1 if it was already present
#
# ```bash
# declare myArray=( "a" "b" )
# declare myValue="b"
# array::appendIfNotPresent myArray myValue
# printf '%s\n' "${myArray[@]}"
# ```
function array::appendIfNotPresent() {
  local -n array=${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}
  local -n valueToAdd="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  # add value to array if not present, check in a loop
  local -i present=0
  local item
  for item in "${array[@]}"; do
    if [[ ${item} == "${valueToAdd}" ]]; then
      present=1
      break
    fi
  done
  if (( present == 0 )); then
    array+=("${valueToAdd}")
  fi
  return ${present}
}

# ## array::checkIfPresent
#
# Check if a value is in an array.
# It uses pure bash.
#
# - $1: **array name** _as string_:
#       The variable name of the array.
# - $2: **value variable name** _as any_:
#       The variable name containing the value to check.
#
# Returns:
#
# - $?: 0 if the value is in the array, 1 otherwise.
#
# ```bash
# declare myArray=( "a" "b" )
# declare myValue="b"
# if array::checkIfPresent myArray myValue; then "b is in the array"; fi
# ```
function array::checkIfPresent() {
  # shellcheck disable=SC2178
  local -n array="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -n value="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"

  local item
  for item in "${array[@]}"; do
    if [[ ${item} == "${value}" ]]; then
      return 0
    fi
  done
  return 1
}

# ## array::makeArraysSameSize
#
# This function makes sure that all the arrays have the same size.
# It will add empty strings to the arrays that are too short.
#
# - $@: **array names** _as string_:
#       The variable names of each array to transform.
#
# ```bash
# array::makeArraysSameSize "array1" "array2" "array3"
# ```
function array::makeArraysSameSize() {
  local array
  local -i length
  local -a lengths
  local -i maxLength=0

  # compute max length among all arrays
  for array in "$@"; do
    if [[ ! -v "${array}" ]]; then
      eval "${array}=()"
    fi
    eval "length=\${#${array}[@]}" || length=0
    lengths+=("${length}")
    if [[ length -gt maxLength ]]; then
      maxLength=length
    fi
  done

  for length in "${lengths[@]}"; do
    while [[ length -lt maxLength ]]; do
      eval "${1}+=(\"\")"
      length+=1
    done
    shift
  done
}

# ## array::fuzzyFilterSortFileWithGrepAndGawk
#
# Allows to fuzzy sort a file against a given searched string.
# Outputs a file containing only the lines matching the searched string.
# The array is sorted by (in order):
#
# - the index of the first matched character in the line
# - the distance between the first and last matched characters in the line
#
# Will also output a file containing the indexes of the matched lines in the original file.
#
# - $1: **file to filer** _as string_:
#       The input file to filter.
# - $2: **search string** _as string_:
#       The variable name containing the search string to match.
# - $3: **output filtered file** _as string_:
#       The output file containing the filtered lines.
# - $4: **output correspondences file** _as string_:
#       The output file containing the indexes of the matched lines in the original file.
#
# ```bash
# array::fuzzyFilterSortFileWithGrepAndGawk file.txt filtered.txt correspondences.txt
# ```
#
# > This is not a pure bash function! Use `array::fuzzyFilterSort` for pure bash alternative.
# > This function is useful for very large arrays.
function array::fuzzyFilterSortFileWithGrepAndGawk() {
  local fileToFilter="${1}"
  local -n searchString="${2}"
  local outputFilteredFile="${3}"
  local outputCorrespondencesFile="${4}"

  if [[ -z ${_ARRAY_TEMP_FILTER_FILE:-} ]]; then
    # shellcheck source=lib-fs
    source fs
    _OPTION_PATH_ONLY=true fs::createTempFile
    _ARRAY_TEMP_FILTER_FILE="${RETURNED_VALUE}"
    _OPTION_PATH_ONLY=true fs::createTempFile
    _ARRAY_TEMP_FILTERED_FILE="${RETURNED_VALUE}"
  fi

  # prepare the regex for the searchString
  # the -> '([^t]*)(t[^h]*h[^e]*e)'
  local searchStringRegex="([^${searchString:0:1}]*)(${searchString:0:1}"
  local -i index
  for ((index = 1; index < ${#searchString}; index++)); do
    searchStringRegex+="[^${searchString:index:1}]*${searchString:index:1}"
  done
  searchStringRegex+=")"

  # we use grep to pre-filter the lines.
  # We could do everything in gawk but it would be slower for hugh files.
  grep --ignore-case --line-number "${searchStringRegex//[()]/}" "${fileToFilter}" >"${_ARRAY_TEMP_FILTER_FILE}"
  searchStringRegex="${searchStringRegex}(.?)"
  gawk "
    BEGIN {
      # Ignore case when matching the searchString
      IGNORECASE = 1;
    }
    {
      # Store each line and its key for sorting (each line is prefixed by 'line_number:' from grep)
      if (match(\$0, /^[0-9]+:${searchStringRegex}/, m)) {
        idx = idx + 1;
        lines[idx] = \$0
        lineNumber = substr(\$0, 0, index(\$0, \":\") - 1)
        if (length(m[3]) == 0 && length(m[0]) == (length(lineNumber) + 1 + ${#searchString})) {
          # exact match should always be first
          keys[idx] = lineNumber
        } else {
          # Store the keys for sorting (size of the first match, size of the second match, original line number)
          keys[idx] = sprintf(\"%d%04d%04d\", length(m[1]), length(m[2]), lineNumber)
        }
      }
    }
    END {
      # Sort the lines
      nbLines = length(lines)
      quickSort(keys, lines, 1, nbLines)

      # Output the sorted lines in one file, and the correspondences in another
      for (i = 1; i <= nbLines; i++) {
        semiColonIndex = index(lines[i], \":\");
        idx = substr(lines[i], 0, semiColonIndex - 1) - 1;
        print substr(lines[i], semiColonIndex + 1) >> \"${_ARRAY_TEMP_FILTERED_FILE}\"
        print idx >> \"${outputCorrespondencesFile}\"
      }
    }
    function quickSort(keys, lines, left, right) {
      if (left >= right) return

      # Choose pivot, random element between left and right
      pivot = keys[left] + 0

      # Partition
      ii = left
      jj = right
      while (ii <= jj) {
        while (keys[ii] + 0 < pivot + 0) ii++
        while (pivot < keys[jj] + 0) jj--
        if (ii <= jj) {
          tempKey = keys[ii]
          tempLine = lines[ii]
          keys[ii] = keys[jj]
          lines[ii] = lines[jj]
          keys[jj] = tempKey
          lines[jj] = tempLine
          ii++
          jj--
        }
      }
      # Recursive calls
      if (left < jj) quickSort(keys, lines, left, jj)
      if (ii < right) quickSort(keys, lines, ii, right)
    }
  " "${_ARRAY_TEMP_FILTER_FILE}"
  mv "${_ARRAY_TEMP_FILTERED_FILE}" "${outputFilteredFile}"
}