#!/usr/bin/env bash
# shellcheck disable=SC2034
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## esc-codes::*
#
# ANSI codes for text attributes, colors, cursor control, and other common escape sequences.
# These codes can be used to format text in the terminal.
#
# These codes were selected because they are widely supported by terminals and they
# probably will cover all use cases. It is also advised to stick to the 4-bit colors
# which allows your application to adopt the color scheme of the terminal.
#
# They are defined as variables and not as functions. Please check the content of the esc-codes to learn more:
# <https://github.com/jcaillon/valet/blob/latest/libraries.d/esc-codes>
#
# References:
#
# - https://jvns.ca/blog/2025/03/07/escape-code-standards/
# - https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
# - https://en.wikipedia.org/wiki/ANSI_escape_code
# - https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
# - https://paulbourke.net/dataformats/ascii/
# - https://www.aivosto.com/articles/control-characters.html
# - https://github.com/tmux/tmux/blob/master/tools/ansicode.txt
# - https://vt100.net/docs/vt102-ug/chapter5.html
# - https://vt100.net/docs/vt100-ug/chapter3.html#S3.3
# - https://github.com/tmux/tmux/blob/882fb4d295deb3e4b803eb444915763305114e4f/tools/ansicode.txt
#
# Ascii graphics:
#
# - https://gist.github.com/dsample/79a97f38bf956f37a0f99ace9df367b9
# - https://en.wikipedia.org/wiki/List_of_Unicode_characters#Box_Drawing
# - https://en.wikipedia.org/wiki/List_of_Unicode_characters#Block_Elements
#
# An interesting read: https://sw.kovidgoyal.net/kitty/keyboard-protocol/
#
# > While it could be very handy to define a function for each of these instructions,
# > it would also be slower to execute (function overhead + multiple printf calls).

#===============================================================
# >>> SGR: Text attributes
#===============================================================
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters

ESC__TEXT_BOLD=$'\e[1m'
ESC__TEXT_NO_BOLD=$'\e[21m'
ESC__TEXT_FAINT=$'\e[2m'
ESC__TEXT_NO_FAINT=$'\e[22m'
ESC__TEXT_ITALIC=$'\e[3m'
ESC__TEXT_NO_ITALIC=$'\e[23m'
ESC__TEXT_UNDERLINE=$'\e[4m'
ESC__TEXT_NO_UNDERLINE=$'\e[24m'
ESC__TEXT_BLINK=$'\e[5m'
ESC__TEXT_NO_BLINK=$'\e[25m'
ESC__TEXT_INVERSE=$'\e[7m'
ESC__TEXT_NO_INVERSE=$'\e[27m'
ESC__TEXT_STRIKE=$'\e[9m'
ESC__TEXT_NO_STRIKE=$'\e[29m'

if [[ ${VALET_CONFIG_DISABLE_TEXT_ATTRIBUTES:-} == "true" ]]; then
  # we reset all the text variables to a blank string
  _ESC_VARS="${!ESC__TEXT_*}"
  eval "${_ESC_VARS// /"=''; "}=''"
  unset -v _ESC_VARS
fi

ESC__TEXT_RESET=$'\e[0m'

#===============================================================
# >>> SGR: Colors
#===============================================================
# https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit
ESC__COLOR_RESET=$'\e[49m'$'\e[39m'
ESC__FG_RESET=$'\e[39m'
ESC__BG_RESET=$'\e[49m'

# Text colors
ESC__FG_BLACK=$'\e[30m'
ESC__FG_BRIGHT_BLACK=$'\e[90m'
ESC__FG_RED=$'\e[31m'
ESC__FG_BRIGHT_RED=$'\e[91m'
ESC__FG_GREEN=$'\e[32m'
ESC__FG_BRIGHT_GREEN=$'\e[92m'
ESC__FG_YELLOW=$'\e[33m'
ESC__FG_BRIGHT_YELLOW=$'\e[93m'
ESC__FG_BLUE=$'\e[34m'
ESC__FG_BRIGHT_BLUE=$'\e[94m'
ESC__FG_MAGENTA=$'\e[35m'
ESC__FG_BRIGHT_MAGENTA=$'\e[95m'
ESC__FG_CYAN=$'\e[36m'
ESC__FG_BRIGHT_CYAN=$'\e[96m'
ESC__FG_WHITE=$'\e[37m'
ESC__FG_BRIGHT_WHITE=$'\e[97m'

# background colors
ESC__BG_BLACK=$'\e[40m'
ESC__BG_BRIGHT_BLACK=$'\e[100m'
ESC__BG_RED=$'\e[41m'
ESC__BG_BRIGHT_RED=$'\e[101m'
ESC__BG_GREEN=$'\e[42m'
ESC__BG_BRIGHT_GREEN=$'\e[102m'
ESC__BG_YELLOW=$'\e[43m'
ESC__BG_BRIGHT_YELLOW=$'\e[103m'
ESC__BG_BLUE=$'\e[44m'
ESC__BG_BRIGHT_BLUE=$'\e[104m'
ESC__BG_MAGENTA=$'\e[45m'
ESC__BG_BRIGHT_MAGENTA=$'\e[105m'
ESC__BG_CYAN=$'\e[46m'
ESC__BG_BRIGHT_CYAN=$'\e[106m'
ESC__BG_WHITE=$'\e[47m'
ESC__BG_BRIGHT_WHITE=$'\e[107m'

# https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
# "${ESC__FG_COLOR__}2${__ESC__END_COLOR}"
ESC__FG_COLOR__=$'\e[38;5;'
# "${ESC__BG_COLOR}2${__ESC__END_COLOR}"
ESC__BG_COLOR__=$'\e[48;5;'
__ESC__END_COLOR=$'m'

# https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit
# "${ESC__FG_COLOR_24b__}255;255;255${__ESC__END_COLOR}"
ESC__FG_COLOR_24b__=$'\e[38;2;'
# "${ESC__BG_COLOR_24b}255;255;255${__ESC__END_COLOR}"
ESC__BG_COLOR_24b__=$'\e[48;2;'

if [[ ${VALET_CONFIG_ENABLE_COLORS:-} != "true" ]]; then
  # we reset all the color variables to a blank string
  _ESC_VARS="${!ESC__FG_*} ${!ESC__BG_*} __ESC__END_COLOR ESC__COLOR_RESET"
  eval "${_ESC_VARS// /"=''; "}=''"
  unset -v _ESC_VARS
  if [[ ${VALET_CONFIG_DISABLE_TEXT_ATTRIBUTES:-} == "true" ]]; then
    ESC__TEXT_RESET=""
  fi
fi

#===============================================================
# >>> CSI: Cursor control
#===============================================================
# https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences
#
# Cursor at 1;1 is the top left corner of the screen.

# cursor movement
ESC__CURSOR_MOVE__=$'\e['
# "${ESC__CURSOR_MOVE__}2${__ESC__UP}"
__ESC__UP=$'A'
# "${ESC__CURSOR_MOVE__}2${__ESC__DOWN}"
__ESC__DOWN=$'B'
# "${ESC__CURSOR_MOVE__}2${__ESC__RIGHT}"
__ESC__RIGHT=$'C'
# "${ESC__CURSOR_MOVE__}2${__ESC__LEFT}"
__ESC__LEFT=$'D'
# Moves cursor to beginning of the line n lines down. If the active position is at the bottom margin, a scroll up is performed. "${ESC__CURSOR_MOVE__}1${__ESC__START_OF_LINE_DOWN}"
__ESC__START_OF_LINE_DOWN=$'E'
# Moves cursor to beginning of the line n lines up. If the active position is at the bottom margin, a scroll up is performed. "${ESC__CURSOR_MOVE__}1${__ESC__START_OF_LINE_UP}"
__ESC__START_OF_LINE_UP=$'F'
# Move the cursor to the given column (1 based). "${ESC__CURSOR_MOVE__}2${__ESC__COLUMN}"
__ESC__COLUMN=$'G'
# Move the cursor to given position. "${ESC__CURSOR_MOVE__}1;1${__ESC__TO}" (row;col)
__ESC__TO=$'H'

# Reports the cursor position to the application as (as ESC[n;mR), where n is the line and m is the column.
ESC__REQUEST_CURSOR_POSITION=$'\e[6n'

# About ESC__ERASE*: try not to use them to clear characters that you will immediately rewrite
#                   because it will cause flickering, use it to actually get empty space.
# erase in display or line
# clear from cursor to end of screen
ESC__ERASE_LINES_BELOW=$'\e[0J'
# clear from cursor to beginning of the screen
ESC__ERASE_LINES_ABOVE=$'\e[1J'
# clear entire screen
ESC__ERASE_SCREEN=$'\e[2J'
# clear from cursor to the end of the line
ESC__ERASE_CHARS_RIGHT=$'\e[0K'
# clear from cursor to the beginning of the line
ESC__ERASE_CHARS_LEFT=$'\e[1K'
# clear entire line
ESC__ERASE_LINE=$'\e[2K'
# Erase a set number of characters "${ESC__ERASE__}2${__ECS__CHARS}"
ESC__ERASE__=$'\e['
__ECS__CHARS=$'X'

# Repeat last displayed (visible only) character n times "${ESC__REPEAT__}2${__ESC__LAST_CHAR}"
ESC__REPEAT__=$'\e['
__ESC__LAST_CHAR=$'b'

#===============================================================
# >>> General ASCII Codes
#===============================================================

# $'\a': bell
# $'\r': return carriage, moves the cursor to the first column.
# $'\n': new line, moves to next line, scrolls the display up if at bottom of the screen.
#        Usually does not move horizontally, though programs should not rely on this.
# $'\t': tab, moves the cursor right to next multiple of 8.
# $'\b': backspace, moves the cursor left (but may "backwards wrap" if cursor is at start of line).

#===============================================================
# >>> Other Common Private Modes
#===============================================================

# Hides the cursor.
ESC__CURSOR_HIDE=$'\e[?25l'
# Shows the cursor (forcibly show it).
ESC__CURSOR_SHOW_FORCE=$'\e[?25h'
# Shows the cursor (or not, if we are not in exported mode).
ESC__CURSOR_SHOW=""
if [[ ${GLOBAL_SOURCED_FOR_PROMPT:-} == "true" ]]; then
  ESC__CURSOR_SHOW=$'\e[?25h'
fi

# Switch to the alternate screen buffer.
ESC__ENABLE_ALTERNATE_BUFFER_SCREEN=$'\e[?1049h'
# Switch back from the alternate screen buffer.
ESC__DISABLE_ALTERNATE_BUFFER_SCREEN=$'\e[?1049l'

# enable bracketed paste mode
ESC__ENABLE_BRACKETED_PASTE=$'\e[?2004h'
# disable bracketed paste mode
ESC__DISABLE_BRACKETED_PASTE=$'\e[?2004l'

# enable mouse button report (normal mode + extended SGR mode)
# https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking
ESC__ENABLE_MOUSE_BUTTON_TRACKING=$'\e[?1000h'$'\e[?1006h'
# disable mouse tracking
ESC__DISABLE_MOUSE_BUTTON_TRACKING=$'\e[?1006l'$'\e[?1000l'

# enable mouse any event report (any event mode + extended SGR mode)
ESC__ENABLE_MOUSE_ANY_EVENT_TRACKING=$'\e[?1003h'$'\e[?1006h'
# disable mouse any event report
ESC__DISABLE_MOUSE_ANY_EVENT_TRACKING=$'\e[?1006l'$'\e[?1003l'

if [[ ${VALET_CONFIG_DISABLE_ESC_CODES:-} == "true" ]]; then
  # we reset all the color variables to a blank string
  _ESC_VARS="${!ESC__*} ${!__ESC__*}"
  eval "${_ESC_VARS// /"=''; "}=''"
  unset -v _ESC_VARS
fi