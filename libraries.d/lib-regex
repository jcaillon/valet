#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## regex::getFirstGroup
#
# Matches a string against a regex and returns the first captured group of the first match.
#
# - $1: **string variable name** _as string_:
#       The variable name containing the string to match.
# - $2: **regex** _as string_:
#       The regex to use for the match.
#
# Returns:
#
# - ${REPLY}: The first capture group in the matched string.
#                      Empty if no match.
#
# ```bash
# MY_STRING="name: julien"
# regex::getFirstGroup MY_STRING "name:(.*)"
# echo "${REPLY}"
# ```
#
# > Regex wiki: https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions
function regex::getFirstGroup() {
  local -n stringInWhichToMatch="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  # Usage: regex "string" "regex"
  if [[ ${stringInWhichToMatch} =~ ${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."} ]]; then
    REPLY="${BASH_REMATCH[1]:-}"
  else
    # shellcheck disable=SC2034
    REPLY=""
  fi
}

# ## regex::replace
#
# Replaces strings within a string using a regex.
#
# - $1: **string variable name** _as string_:
#       The variable name containing the string in which to do replacements.
#       Replacement is done in place.
# - $2: **regex** _as string_:
#       The regex to use for the match.
# - $3: **replacement** _as string_:
#       The replacement string.
#       Use \x to refer to the x-th capture group.
#       Use \c to refer to replacement counter.
# - $4: max count _as int_:
#       (optional) Can be set using the variable `_OPTION_MAX_COUNT`.
#       The number of replacements to do.
#       (default to -1, which is unlimited)
# - $5: only matches _as bool_:
#       (optional) Can be set using the variable `_OPTION_ONLY_MATCHES`.
#       Instead of replacing with the regex, we keep only the matches.
#       This can be used to extract information from a string.
#       (default to false)
#
# Returns:
#
# - ${REPLY}: The string with replacements.
#
# ```bash
# MY_STRING="name: julien"
# regex::replace MY_STRING "name: (.*)" "\1"
# echo "${REPLY}"
# ```
#
# > Regex wiki: https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions
function regex::replace() {
  local -n stringInWhichToReplace="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local regex="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local -i maxCount="${4:-${_OPTION_MAX_COUNT:-"-1"}}"
  local onlyMatches="${5:-${_OPTION_ONLY_MATCHES:-"false"}}"
  if (( maxCount == 0 )); then
    if [[ ${onlyMatches} == "true" ]]; then
      REPLY=""
    else
      REPLY="${stringInWhichToReplace}"
    fi
    return 0
  fi

  local usePlaceHolders=false actualReplacement
  if [[ ${3?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."} == *"\\"* ]]; then
    usePlaceHolders=true
    local replacement="${3}"
  else
    actualReplacement="${3}"
  fi

  REPLY=""
  local IFS="" stringBeforeMatch
  local -i count=0 currentCharIndex=0

  while [[ ${stringInWhichToReplace:currentCharIndex} =~ ${regex} ]]; do
    stringBeforeMatch="${stringInWhichToReplace:currentCharIndex}"
    stringBeforeMatch="${stringBeforeMatch%%"${BASH_REMATCH[0]}"*}"
    currentCharIndex=$(( currentCharIndex + ${#stringBeforeMatch} + ${#BASH_REMATCH[0]} ))

    if [[ ${usePlaceHolders} == "true" ]]; then
      actualReplacement="${replacement//"\c"/"${count}"}"
      for (( i = 0; i < ${#BASH_REMATCH[@]}; i++ )); do
        actualReplacement=${actualReplacement//"\\${i}"/"${BASH_REMATCH[i]}"}
      done
    fi

    if [[ ${onlyMatches} == "true" ]]; then
      REPLY+="${actualReplacement}"
    else
      REPLY+="${stringBeforeMatch}${actualReplacement}"
    fi

    count+=1
    if (( maxCount != -1 && count >= maxCount )); then
      break
    fi
  done
  if [[ ${onlyMatches} != "true" ]]; then
    REPLY+="${stringInWhichToReplace:currentCharIndex}"
  fi
}

# ## regex::getMatches
#
# Returns an array containing all the matched for a regex in a string.
#
# - $1: **string variable name** _as string_:
#       The variable name containing the string to match.
# - $2: **regex** _as string_:
#       The regex to use for the match.
# - $3: replacement _as string_:
#       (optional) Can be set using the variable `_OPTION_REPLACEMENT`.
#       The replacement string to use on each match.
#       Use \x to refer to the x-th capture group.
#       Use \c to refer to replacement counter.
#       (default to "", which means no changes will be done on the matches)
# - $4: max count _as int_:
#       (optional) Can be set using the variable `_OPTION_MAX_COUNT`.
#       The number of matches to return.
#       (default to -1, which is unlimited)
#
# Returns:
#
# - ${REPLY_ARRAY[@]}: An array containing all the matches.
#
# ```bash
# MY_STRING="name: julien, name: john"
# regex::getMatches MY_STRING "name: (.*)"
# for match in "${REPLY_ARRAY[@]}"; do
#   echo "${match}"
# done
# ```
#
# > Regex wiki: https://en.wikibooks.org/wiki/Regular_Expressions/POSIX-Extended_Regular_Expressions
function regex::getMatches() {
  local -n stringInWhichToMatch="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local regex="${2?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  local replacement="${3:-${_OPTION_REPLACEMENT:-""}}"
  local -i maxCount="${4:-${_OPTION_MAX_COUNT:-"-1"}}"

  REPLY_ARRAY=()

  if (( maxCount == 0 )); then
    return 0
  fi

  local useReplacement=false usePlaceHolders=false actualReplacement
  if (( ${#replacement} > 0 )); then
    useReplacement=true
    if [[ ${replacement} == *"\\"* ]]; then
      usePlaceHolders=true
    else
      actualReplacement="${replacement}"
    fi
  fi

  local IFS="" stringBeforeMatch
  local -i count=0 currentCharIndex=0

  while [[ ${stringInWhichToMatch:currentCharIndex} =~ ${regex} ]]; do
    stringBeforeMatch="${stringInWhichToMatch:currentCharIndex}"
    stringBeforeMatch="${stringBeforeMatch%%"${BASH_REMATCH[0]}"*}"
    currentCharIndex=$(( currentCharIndex + ${#stringBeforeMatch} + ${#BASH_REMATCH[0]} ))

    if [[ ${useReplacement} == "true" ]]; then
      if [[ ${usePlaceHolders} == "true" ]]; then
        actualReplacement="${replacement//"\c"/"${count}"}"
        for (( i = 0; i < ${#BASH_REMATCH[@]}; i++ )); do
          actualReplacement=${actualReplacement//"\\${i}"/"${BASH_REMATCH[i]}"}
        done
      fi
      REPLY_ARRAY+=("${actualReplacement}")
    else
      REPLY_ARRAY+=("${BASH_REMATCH[0]}")
    fi

    count+=1
    if (( maxCount != -1 && count >= maxCount )); then
      break
    fi
  done
}

# ## regex::escapeRegexSpecialChars
#
# Escapes special characters in a string to be used as a regex.
#
# - $1: **string to escape** _as string_:
#       The string to escape.
#
# Returns:
#
# - ${REPLY}: The escaped string.
#
# ```bash
# regex::escapeRegexSpecialChars "a.(b)"
# echo "${REPLY}"
# ```
function regex::escapeRegexSpecialChars() {
  REPLY="${1?"The function ⌜${FUNCNAME:-?}⌝ requires more than $# arguments."}"
  REPLY=${REPLY//\\/\\\\}
  REPLY=${REPLY//\//\\\/}
  REPLY=${REPLY//\./\\\.}
  REPLY=${REPLY//\*/\\\*}
  REPLY=${REPLY//\+/\\\+}
  REPLY=${REPLY//\?/\\?}
  REPLY=${REPLY//\(/\\\(}
  REPLY=${REPLY//\)/\\\)}
  REPLY=${REPLY//\[/\\\[}
  REPLY=${REPLY//\]/\\\]}
  REPLY=${REPLY//\{/\\\{}
  REPLY=${REPLY//\}/\\\}}
  REPLY=${REPLY//\^/\\^}
  REPLY=${REPLY//\$/\\\$}
  REPLY=${REPLY//\|/\\|}
}

