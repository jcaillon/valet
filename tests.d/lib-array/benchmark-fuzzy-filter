#!/usr/bin/env bash
set -Eeu -o pipefail

#===============================================================
# >>> Source main functions
#===============================================================
# shellcheck source=../../libraries.d/core
source "libraries.d/core"

# shellcheck source=../../libraries.d/lib-benchmark
source benchmark
# shellcheck source=../../libraries.d/lib-array
source array

#===============================================================
# >>> Run the main function
#===============================================================

function array::fuzzyFilterSort2() {
  local pattern="${1}"
  local -n array="${2}"

  # nothing to filter
  if [[ -z ${pattern} || ${#array[@]} -eq 0 ]]; then
    RETURNED_ARRAY=("${array[@]}")
    eval "RETURNED_ARRAY2=( {0..$((${#array[@]} - 1))} )"
    return 0
  fi

  # prepare the regex for the pattern
  # the -> '([^t]*)(t[^h]*h[^e]*e)'
  local patternRegex="^([^${pattern:0:1}]*)(${pattern:0:1}"
  local -i index
  for ((index = 1; index < ${#pattern}; index++)); do
    patternRegex+="[^${pattern:index:1}]*${pattern:index:1}"
  done
  patternRegex+=")"
  local -i patternLength=${#pattern}

  # will contain a key that allows to sort the items, it is a combination of the length before the pattern,
  # the length of the matched pattern and the initial position of the item
  _ARRAY_FUZZY_FILTER_KEYS=()
  # will contain the original indexes corresponding to the sorted array
  RETURNED_ARRAY2=()

  for ((index = 0; index < ${#array[@]}; index++)); do
    if [[ ${array[index]} =~ ${patternRegex} ]]; then
      if ((${#BASH_REMATCH[3]} == 0 && patternLength == ${#BASH_REMATCH[0]})); then
        _ARRAY_FUZZY_FILTER_KEYS+=($((index)))
      else
        _ARRAY_FUZZY_FILTER_KEYS+=($((${#BASH_REMATCH[1]} * 10000000 + ${#BASH_REMATCH[2]} * 10000 + index)))
      fi
      RETURNED_ARRAY2+=($((index)))
    fi
  done

  # we have a special quicksort implementation here that only compare numbers
  # and uses global arrays to go faster
  if ! command -v array::fuzzyFilterSortQuicksort2 &>/dev/null; then
    function array::fuzzyFilterSortQuicksort2() {
      local -i low=${1}
      local -i high=${2}
      if ((low >= high)); then
        return 0
      fi

      local pivot=${_ARRAY_FUZZY_FILTER_KEYS[low]}

      local -i ii=${low}
      local -i jj=${high}
      local tmpKey tempValue
      while ((ii <= jj)); do
        while ((_ARRAY_FUZZY_FILTER_KEYS[ii] < pivot)); do
          ii+=1
        done
        while ((_ARRAY_FUZZY_FILTER_KEYS[jj] > pivot)); do
          jj=$((jj - 1))
        done
        if ((ii <= jj)); then
          tmpKey=${_ARRAY_FUZZY_FILTER_KEYS[ii]}
          tempValue=${RETURNED_ARRAY2[ii]}
          _ARRAY_FUZZY_FILTER_KEYS[ii]=${_ARRAY_FUZZY_FILTER_KEYS[jj]}
          RETURNED_ARRAY2[ii]=${RETURNED_ARRAY2[jj]}
          _ARRAY_FUZZY_FILTER_KEYS[jj]=${tmpKey}
          RETURNED_ARRAY2[jj]=${tempValue}
          ii+=1
          jj=$((jj - 1))
        fi
      done
      # recursion
      if ((low < jj)); then
        array::fuzzyFilterSortQuicksort2 "${low}" "${jj}"
      fi
      if ((ii < high)); then
        array::fuzzyFilterSortQuicksort2 "${ii}" "${high}"
      fi
    }
  fi
  array::fuzzyFilterSortQuicksort2 0 $((${#_ARRAY_FUZZY_FILTER_KEYS[@]} - 1))

  # will contain the matched lines, sorted
  RETURNED_ARRAY=()
  for ((index = 0; index < ${#RETURNED_ARRAY2[@]}; index++)); do
    RETURNED_ARRAY+=("${array[RETURNED_ARRAY2[index]]}")
  done
  unset -v _ARRAY_FUZZY_FILTER_KEYS
}

function baseline() {
  array::fuzzyFilterSort ea VALUES_ORIGINAL
}

function newImplementation1() {
  array::fuzzyFilterSort2 ea VALUES_ORIGINAL
}

# shellcheck disable=SC2034
mapfile -t VALUES_ORIGINAL <tests.d/1006-lib-array/sort-test-values

shopt -s nocasematch

# assert both implementations are the same
echo "Running the baseline..."
baseline && BASELINE_ARRAY=("${RETURNED_ARRAY[@]}") && BASELINE_ARRAY2=("${RETURNED_ARRAY2[@]}")
echo "Running the new implementation..."
newImplementation1 && NEW_ARRAY=("${RETURNED_ARRAY[@]}") && NEW_ARRAY2=("${RETURNED_ARRAY2[@]}")
if [[ ${BASELINE_ARRAY[*]} != "${NEW_ARRAY[*]}" || ${BASELINE_ARRAY2[*]} != "${NEW_ARRAY2[*]}" ]]; then
  echo "The results are different!"
  echo "BASELINE_ARRAY: ${BASELINE_ARRAY[*]}"
  echo "NEW_ARRAY: ${NEW_ARRAY[*]}"
  echo
  echo "BASELINE_ARRAY2: ${BASELINE_ARRAY2[*]}"
  echo "NEW_ARRAY2: ${NEW_ARRAY2[*]}"

  IFS=$'\n'
  echo "${BASELINE_ARRAY[*]}" >file5
  echo "${NEW_ARRAY[*]}" >file6
  exit 1
else
  echo "The results are the same!"
fi

# IFS=$'\n'
# baseline
# echo "${VALUES[*]}" >file5
# newImplementation1
# echo "${VALUES[*]}" >file6

benchmark::run baseline newImplementation1
