#!/usr/bin/env bash
set -Eeu -o pipefail

# This is a test that is executed either in GitHub Actions or locally which tests the
# installation of Valet and its extensions, as well as the update.

# Run locally from valet directory:
# ./tests.d/self-install/test

# We expect this script to run in a Docker container, with curl installed
# and a 'me' user with sudo privileges.

# We start this script as root.

function main() {
  if [[ -z ${RUNNING_IN_DOCKER:-} ]]; then
    # we are running this locally
    if command -v docker &> /dev/null; then
      echo "Running the test in a container."
      # To build the image:
      # - cd tests.d/self-install/docker-valet-test
      # - docker build -t noyacode/minideb-bash5.0 .
      # Then to run it:
      # - docker run --rm -it -v .:/app -w /app -e RUNNING_IN_DOCKER=true --entrypoint /bin/bash noyacode/minideb-bash5.0
      docker run --rm -it -v .:/app -w /app -e RUNNING_IN_DOCKER=true --entrypoint /bin/bash noyacode/minideb-bash5.0 -c -o errexit -o nounset -o pipefail "chmod +x ./tests.d/self-install/test; ./tests.d/self-install/test"
      return 0
    fi
    echo "Need docker to run this test."
    exit 1
  fi

  # we are running the following test on a container
  BRANCH_NAME="${BRANCH_NAME:-main}"
  export BRANCH_NAME



  echo "================================================"
  echo "Installing Valet: --unattended --use-branch --version ${BRANCH_NAME}."
  echo "================================================"

  export VALET_VERBOSE=true
  chmod +x ./commands.d/self-install.sh
  ./commands.d/self-install.sh --unattended --use-branch --version "${BRANCH_NAME}"

  echo "Shim content:"
  cat /usr/local/bin/valet

  echo "================================================"
  echo "Built commands:"
  echo "================================================"
  # shellcheck disable=SC1090
  source ~/.local/share/valet/commands
  local IFS=$'\n'
  echo "${CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY[*]}"
  # check if CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY contains "showcase"
  if [[ ! ${CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY[*]} =~ "showcase" ]]; then
    echo "Command 'showcase' not found."
    exit 1
  fi
  # shellcheck disable=SC2086
  unset -v ${!CMD_*}

  export VALET_VERBOSE=false



  echo "================================================"
  echo "Install extension: extension-1 using git."
  echo "================================================"

  export VALET_DISABLE_PROGRESS_BARS=true
  valet self extend https://github.com/jcaillon/valet --version extension-1 --name extension-1

  echo "================================================"
  echo "Install extension: extension-2 using tarball."
  echo "================================================"

  mv /usr/bin/git /usr/bin/git2
  echo y | valet self extend https://github.com/jcaillon/valet.git --version extension-2 --name extension-2
  mv /usr/bin/git2 /usr/bin/git

  echo "================================================"
  echo "Install extension: extension-3 using git, skip setup."
  echo "================================================"

  valet self extend https://github.com/jcaillon/valet --version extension-3 --name extension-3 --skip-setup

  echo "================================================"
  echo "Built commands:"
  echo "================================================"
  # shellcheck disable=SC1090
  source ~/.local/share/valet/commands
  echo "${CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY[*]}"
  # check if CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY contains "showcase"
  if [[ ! ${CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY[*]} =~ "extension" ]]; then
    echo "Command 'extension' not found."
    exit 1
  fi
  # shellcheck disable=SC2086
  unset -v ${!CMD_*}

  echo "================================================"
  echo "Update extension: nothing to do."
  echo "================================================"

  valet self update --only-extensions

  echo "================================================"
  echo "Update extension: 1 & 2 updated."
  echo "================================================"

  # reset extension-3 to the previous commit
  pushd ~/.valet.d/extension-3 &>/dev/null
  git reset --hard HEAD^
  popd &>/dev/null
  # remove sha1 in extension-2
  rm -f ~/.valet.d/extension-2/.sha1

  echo "yyy" | valet self update




  echo "================================================"
  echo "Create extension: test-extension1."
  echo "================================================"

  valet self extend test-extension1

  echo "================================================"
  echo "Setup extension directory: test-extension2."
  echo "================================================"

  mkdir -p ~/.valet.d/test-extension2
  pushd ~/.valet.d/test-extension2 &>/dev/null
  valet self extend .
  popd &>/dev/null



  echo "================================================"
  echo "Updating Valet: --skip-extensions."
  echo "================================================"

  valet self update --skip-extensions

  echo "================================================"
  echo "Updating Valet: no args (nothing to do)."
  echo "================================================"

  valet self update

  echo "================================================"
  echo "Updating Valet: after modifying the current version (update from latest release)."
  echo "================================================"

  echo "Previous version:"
  valet --version
  echo "0.0.0" > /opt/valet/version
  #echo "y" | valet self update

  echo "Latest release version:"
  valet --version

  echo "================================================"
  echo "Updating Valet: rerunning the install script."
  echo "================================================"

  echo "yynnn" | bash -c "$(curl -fsSL "https://raw.githubusercontent.com/jcaillon/valet/${BRANCH_NAME}/commands.d/self-install.sh")" -s --use-branch --version "${BRANCH_NAME}"

  echo "Version after a force install:"
  valet --version

  echo "================================================"
  echo "Uninstalling Valet."
  echo "================================================"

  bash -c 'eval "$(valet self uninstall --script 2>/dev/null)"'
  which valet || echo "No valet command found."
  [[ -d /opt/valet ]] || echo "Valet directory removed."


  echo "================================================"
  echo "Installing Valet: --unattended --use-branch --version ${BRANCH_NAME} --installation-directory /valet --no-shim --no-showcase."
  echo "================================================"

  ./commands.d/self-install.sh --unattended --use-branch --version "${BRANCH_NAME}" --installation-directory /valet --no-shim --no-showcase

  echo "================================================"
  echo "Uninstalling Valet."
  echo "================================================"

  bash -c 'eval "$(valet self uninstall --script 2>/dev/null)"'




  echo "================================================"
  echo "Installing Valet as me: --use-branch --version ${BRANCH_NAME}."
  echo "================================================"

  # shellcheck disable=SC2016
  runuser -l me -c '
  bash -c "export VALET_VERSION='"${BRANCH_NAME}"';
  export VALET_UNATTENDED=true;
  export VALET_USE_BRANCH=true;
  export VALET_SINGLE_USER_INSTALLATION=true;
  function zsh() { :; };
  function tcsh() { :; };
  function csh() { :; };
  function xonsh() { :; };
  function fish() { :; };
  function ksh() { :; };
  function nu() { :; };
  $(curl -fsSL "https://raw.githubusercontent.com/jcaillon/valet/'"${BRANCH_NAME}"'/commands.d/self-install.sh")"
  '

  echo "================================================"
  echo "Uninstalling Valet."
  echo "================================================"

  bash -c 'eval "$(valet self uninstall --script 2>/dev/null)"'



  echo "================================================"
  echo "Installing Valet: --use-branch --version ${BRANCH_NAME} --unattended --single-user-installation --no-showcase."
  echo "================================================"

  bash -c "$(curl -fsSL "https://raw.githubusercontent.com/jcaillon/valet/${BRANCH_NAME}/commands.d/self-install.sh")" -s --use-branch --version "${BRANCH_NAME}" --unattended --single-user-installation --no-showcase
  export PATH="/root/.local/valet:${PATH}"

  echo "================================================"
  echo "Built commands:"
  echo "================================================"
  # shellcheck disable=SC1090
  source ~/.local/share/valet/commands
  echo "${CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY[*]}"
  # shellcheck disable=SC2086
  unset -v ${!CMD_*}

}

main

echo "Self install test passed."
