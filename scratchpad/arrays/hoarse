function quicksort(A, low, high)
    if low < high then
        // Partition the array and get the pivot index
        p = partition(A, low, high)

        // Recursively sort the sub-arrays
        quicksort(A, low, p)
        quicksort(A, p + 1, high)

function partition(A, low, high)
    // Choose a pivot (middle element)
    pivot = A[low + (high - low) / 2]

    // Initialize indices
    i = low - 1
    j = high + 1

    while true do
        // Move i forward until we find an element >= pivot
        do
            i = i + 1
        while A[i] < pivot

        // Move j backward until we find an element <= pivot
        do
            j = j - 1
        while A[j] > pivot

        // If indices crossed, return j as the partition point
        if i >= j then
            return j

        // Swap elements at i and j
        swap(A[i], A[j])

// Initial call
quicksort(A, 0, length(A) - 1)