{
// Documentation generated for the version 0.28.3028 (2025-02-11).

"ansi-codes::*": {
  "prefix": "ansi-codes::*",
  "description": "ANSI codes for text attributes, colors, cursor control, and other common escape sequences...",
  "scope": "",
  "body": [ "ansi-codes::*$0" ]
},

"ansi-codes::*#withdoc": {
  "prefix": "ansi-codes::*#withdoc",
  "description": "ANSI codes for text attributes, colors, cursor control, and other common escape sequences...",
  "scope": "",
  "body": [ "# ANSI codes for text attributes, colors, cursor control, and other common escape sequences\nansi-codes::*$0" ]
},

"array::appendIfNotPresent": {
  "prefix": "array::appendIfNotPresent",
  "description": "Add a value to an array if it is not already present...",
  "scope": "",
  "body": [ "array::appendIfNotPresent$0" ]
},

"array::appendIfNotPresent#withdoc": {
  "prefix": "array::appendIfNotPresent#withdoc",
  "description": "Add a value to an array if it is not already present...",
  "scope": "",
  "body": [ "# Add a value to an array if it is not already present\narray::appendIfNotPresent$0" ]
},

"array::checkIfPresent": {
  "prefix": "array::checkIfPresent",
  "description": "Check if a value is in an array...",
  "scope": "",
  "body": [ "array::checkIfPresent$0" ]
},

"array::checkIfPresent#withdoc": {
  "prefix": "array::checkIfPresent#withdoc",
  "description": "Check if a value is in an array...",
  "scope": "",
  "body": [ "# Check if a value is in an array\narray::checkIfPresent$0" ]
},

"array::fuzzyFilterSort": {
  "prefix": "array::fuzzyFilterSort",
  "description": "Allows to fuzzy sort an array against a given searched string...",
  "scope": "",
  "body": [ "array::fuzzyFilterSort$0" ]
},

"array::fuzzyFilterSort#withdoc": {
  "prefix": "array::fuzzyFilterSort#withdoc",
  "description": "Allows to fuzzy sort an array against a given searched string...",
  "scope": "",
  "body": [ "# Allows to fuzzy sort an array against a given searched string\narray::fuzzyFilterSort$0" ]
},

"array::fuzzyFilterSortFileWithGrepAndGawk": {
  "prefix": "array::fuzzyFilterSortFileWithGrepAndGawk",
  "description": "Allows to fuzzy sort a file against a given searched string...",
  "scope": "",
  "body": [ "array::fuzzyFilterSortFileWithGrepAndGawk$0" ]
},

"array::fuzzyFilterSortFileWithGrepAndGawk#withdoc": {
  "prefix": "array::fuzzyFilterSortFileWithGrepAndGawk#withdoc",
  "description": "Allows to fuzzy sort a file against a given searched string...",
  "scope": "",
  "body": [ "# Allows to fuzzy sort a file against a given searched string\narray::fuzzyFilterSortFileWithGrepAndGawk$0" ]
},

"array::makeArraysSameSize": {
  "prefix": "array::makeArraysSameSize",
  "description": "This function makes sure that all the arrays have the same size...",
  "scope": "",
  "body": [ "array::makeArraysSameSize$0" ]
},

"array::makeArraysSameSize#withdoc": {
  "prefix": "array::makeArraysSameSize#withdoc",
  "description": "This function makes sure that all the arrays have the same size...",
  "scope": "",
  "body": [ "# This function makes sure that all the arrays have the same size\narray::makeArraysSameSize$0" ]
},

"array::sort": {
  "prefix": "array::sort",
  "description": "Sorts an array using the > bash operator (lexicographic order)...",
  "scope": "",
  "body": [ "array::sort$0" ]
},

"array::sort#withdoc": {
  "prefix": "array::sort#withdoc",
  "description": "Sorts an array using the > bash operator (lexicographic order)...",
  "scope": "",
  "body": [ "# Sorts an array using the > bash operator (lexicographic order)\narray::sort$0" ]
},

"array::sortWithCriteria": {
  "prefix": "array::sortWithCriteria",
  "description": "Sorts an array using multiple criteria...",
  "scope": "",
  "body": [ "array::sortWithCriteria$0" ]
},

"array::sortWithCriteria#withdoc": {
  "prefix": "array::sortWithCriteria#withdoc",
  "description": "Sorts an array using multiple criteria...",
  "scope": "",
  "body": [ "# Sorts an array using multiple criteria\narray::sortWithCriteria$0" ]
},

"bash::countArgs": {
  "prefix": "bash::countArgs",
  "description": "Returns the number of arguments passed...",
  "scope": "",
  "body": [ "bash::countArgs$0" ]
},

"bash::countArgs#withdoc": {
  "prefix": "bash::countArgs#withdoc",
  "description": "Returns the number of arguments passed...",
  "scope": "",
  "body": [ "# Returns the number of arguments passed\nbash::countArgs$0" ]
},

"bash::countJobs": {
  "prefix": "bash::countJobs",
  "description": "This function counts the number of jobs currently running in the background...",
  "scope": "",
  "body": [ "bash::countJobs$0" ]
},

"bash::countJobs#withdoc": {
  "prefix": "bash::countJobs#withdoc",
  "description": "This function counts the number of jobs currently running in the background...",
  "scope": "",
  "body": [ "# This function counts the number of jobs currently running in the background\nbash::countJobs$0" ]
},

"bash::getFunctionDefinitionWithGlobalVars": {
  "prefix": "bash::getFunctionDefinitionWithGlobalVars",
  "description": "This function can be used to get the definition of an existing function, rename it, and replace the use of positional parameters by global variables...",
  "scope": "",
  "body": [ "bash::getFunctionDefinitionWithGlobalVars$0" ]
},

"bash::getFunctionDefinitionWithGlobalVars#withdoc": {
  "prefix": "bash::getFunctionDefinitionWithGlobalVars#withdoc",
  "description": "This function can be used to get the definition of an existing function, rename it, and replace the use of positional parameters by global variables...",
  "scope": "",
  "body": [ "# This function can be used to get the definition of an existing function, rename it, and replace the use of positional parameters by global variables\nbash::getFunctionDefinitionWithGlobalVars$0" ]
},

"bash::getMissingCommands": {
  "prefix": "bash::getMissingCommands",
  "description": "This function returns the list of not existing commands for the given names...",
  "scope": "",
  "body": [ "bash::getMissingCommands$0" ]
},

"bash::getMissingCommands#withdoc": {
  "prefix": "bash::getMissingCommands#withdoc",
  "description": "This function returns the list of not existing commands for the given names...",
  "scope": "",
  "body": [ "# This function returns the list of not existing commands for the given names\nbash::getMissingCommands$0" ]
},

"bash::getMissingVariables": {
  "prefix": "bash::getMissingVariables",
  "description": "This function returns the list of undeclared variables for the given names...",
  "scope": "",
  "body": [ "bash::getMissingVariables$0" ]
},

"bash::getMissingVariables#withdoc": {
  "prefix": "bash::getMissingVariables#withdoc",
  "description": "This function returns the list of undeclared variables for the given names...",
  "scope": "",
  "body": [ "# This function returns the list of undeclared variables for the given names\nbash::getMissingVariables$0" ]
},

"bash::injectCodeInFunction": {
  "prefix": "bash::injectCodeInFunction",
  "description": "This function injects code at the beginning or the end of a function and returns the modified function to be evaluated...",
  "scope": "",
  "body": [ "bash::injectCodeInFunction$0" ]
},

"bash::injectCodeInFunction#withdoc": {
  "prefix": "bash::injectCodeInFunction#withdoc",
  "description": "This function injects code at the beginning or the end of a function and returns the modified function to be evaluated...",
  "scope": "",
  "body": [ "# This function injects code at the beginning or the end of a function and returns the modified function to be evaluated\nbash::injectCodeInFunction$0" ]
},

"bash::isCommand": {
  "prefix": "bash::isCommand",
  "description": "Check if the given command exists...",
  "scope": "",
  "body": [ "bash::isCommand$0" ]
},

"bash::isCommand#withdoc": {
  "prefix": "bash::isCommand#withdoc",
  "description": "Check if the given command exists...",
  "scope": "",
  "body": [ "# Check if the given command exists\nbash::isCommand$0" ]
},

"bash::readStdIn": {
  "prefix": "bash::readStdIn",
  "description": "Read the content of the standard input...",
  "scope": "",
  "body": [ "bash::readStdIn$0" ]
},

"bash::readStdIn#withdoc": {
  "prefix": "bash::readStdIn#withdoc",
  "description": "Read the content of the standard input...",
  "scope": "",
  "body": [ "# Read the content of the standard input\nbash::readStdIn$0" ]
},

"bash::runInParallel": {
  "prefix": "bash::runInParallel",
  "description": "This function runs a list of commands in parallel with a maximum number of parallel jobs...",
  "scope": "",
  "body": [ "bash::runInParallel$0" ]
},

"bash::runInParallel#withdoc": {
  "prefix": "bash::runInParallel#withdoc",
  "description": "This function runs a list of commands in parallel with a maximum number of parallel jobs...",
  "scope": "",
  "body": [ "# This function runs a list of commands in parallel with a maximum number of parallel jobs\nbash::runInParallel$0" ]
},

"bash::sleep": {
  "prefix": "bash::sleep",
  "description": "Sleep for the given amount of time...",
  "scope": "",
  "body": [ "bash::sleep$0" ]
},

"bash::sleep#withdoc": {
  "prefix": "bash::sleep#withdoc",
  "description": "Sleep for the given amount of time...",
  "scope": "",
  "body": [ "# Sleep for the given amount of time\nbash::sleep$0" ]
},

"benchmark::run": {
  "prefix": "benchmark::run",
  "description": "This function runs a benchmark on given functions...",
  "scope": "",
  "body": [ "benchmark::run$0" ]
},

"benchmark::run#withdoc": {
  "prefix": "benchmark::run#withdoc",
  "description": "This function runs a benchmark on given functions...",
  "scope": "",
  "body": [ "# This function runs a benchmark on given functions\nbenchmark::run$0" ]
},

"command::checkParsedResults": {
  "prefix": "command::checkParsedResults",
  "description": "A convenience function to check the parsing results and fails with an error message if there are parsing errors...",
  "scope": "",
  "body": [ "command::checkParsedResults$0" ]
},

"command::checkParsedResults#withdoc": {
  "prefix": "command::checkParsedResults#withdoc",
  "description": "A convenience function to check the parsing results and fails with an error message if there are parsing errors...",
  "scope": "",
  "body": [ "# A convenience function to check the parsing results and fails with an error message if there are parsing errors\ncommand::checkParsedResults$0" ]
},

"command::parseArguments": {
  "prefix": "command::parseArguments",
  "description": "Parse the arguments and options of a function and return a string that can be evaluated to set the variables...",
  "scope": "",
  "body": [ "command::parseArguments$0" ]
},

"command::parseArguments#withdoc": {
  "prefix": "command::parseArguments#withdoc",
  "description": "Parse the arguments and options of a function and return a string that can be evaluated to set the variables...",
  "scope": "",
  "body": [ "# Parse the arguments and options of a function and return a string that can be evaluated to set the variables\ncommand::parseArguments$0" ]
},

"command::showHelp": {
  "prefix": "command::showHelp",
  "description": "Show the help for the current function...",
  "scope": "",
  "body": [ "command::showHelp$0" ]
},

"command::showHelp#withdoc": {
  "prefix": "command::showHelp#withdoc",
  "description": "Show the help for the current function...",
  "scope": "",
  "body": [ "# Show the help for the current function\ncommand::showHelp$0" ]
},

"command::sourceFunction": {
  "prefix": "command::sourceFunction",
  "description": "Source the file associated with a command function...",
  "scope": "",
  "body": [ "command::sourceFunction$0" ]
},

"command::sourceFunction#withdoc": {
  "prefix": "command::sourceFunction#withdoc",
  "description": "Source the file associated with a command function...",
  "scope": "",
  "body": [ "# Source the file associated with a command function\ncommand::sourceFunction$0" ]
},

"core::fail": {
  "prefix": "core::fail",
  "description": "Displays an error message and then exit the program with error...",
  "scope": "",
  "body": [ "core::fail$0" ]
},

"core::fail#withdoc": {
  "prefix": "core::fail#withdoc",
  "description": "Displays an error message and then exit the program with error...",
  "scope": "",
  "body": [ "# Displays an error message and then exit the program with error\ncore::fail$0" ]
},

"core::failWithCode": {
  "prefix": "core::failWithCode",
  "description": "Displays an error message and then exit the program with error...",
  "scope": "",
  "body": [ "core::failWithCode$0" ]
},

"core::failWithCode#withdoc": {
  "prefix": "core::failWithCode#withdoc",
  "description": "Displays an error message and then exit the program with error...",
  "scope": "",
  "body": [ "# Displays an error message and then exit the program with error\ncore::failWithCode$0" ]
},

"core::getConfigurationDirectory": {
  "prefix": "core::getConfigurationDirectory",
  "description": "Returns the path to the valet configuration directory...",
  "scope": "",
  "body": [ "core::getConfigurationDirectory$0" ]
},

"core::getConfigurationDirectory#withdoc": {
  "prefix": "core::getConfigurationDirectory#withdoc",
  "description": "Returns the path to the valet configuration directory...",
  "scope": "",
  "body": [ "# Returns the path to the valet configuration directory\ncore::getConfigurationDirectory$0" ]
},

"core::getLocalStateDirectory": {
  "prefix": "core::getLocalStateDirectory",
  "description": "Returns the path to the valet local state directory...",
  "scope": "",
  "body": [ "core::getLocalStateDirectory$0" ]
},

"core::getLocalStateDirectory#withdoc": {
  "prefix": "core::getLocalStateDirectory#withdoc",
  "description": "Returns the path to the valet local state directory...",
  "scope": "",
  "body": [ "# Returns the path to the valet local state directory\ncore::getLocalStateDirectory$0" ]
},

"core::getUserDirectory": {
  "prefix": "core::getUserDirectory",
  "description": "Returns the path to the valet user directory...",
  "scope": "",
  "body": [ "core::getUserDirectory$0" ]
},

"core::getUserDirectory#withdoc": {
  "prefix": "core::getUserDirectory#withdoc",
  "description": "Returns the path to the valet user directory...",
  "scope": "",
  "body": [ "# Returns the path to the valet user directory\ncore::getUserDirectory$0" ]
},

"core::getVersion": {
  "prefix": "core::getVersion",
  "description": "Returns the version of Valet...",
  "scope": "",
  "body": [ "core::getVersion$0" ]
},

"core::getVersion#withdoc": {
  "prefix": "core::getVersion#withdoc",
  "description": "Returns the version of Valet...",
  "scope": "",
  "body": [ "# Returns the version of Valet\ncore::getVersion$0" ]
},

"curl::download": {
  "prefix": "curl::download",
  "description": "This function is a wrapper around curl to save a request result in a file...",
  "scope": "",
  "body": [ "curl::download$0" ]
},

"curl::download#withdoc": {
  "prefix": "curl::download#withdoc",
  "description": "This function is a wrapper around curl to save a request result in a file...",
  "scope": "",
  "body": [ "# This function is a wrapper around curl to save a request result in a file\ncurl::download$0" ]
},

"curl::request": {
  "prefix": "curl::request",
  "description": "This function is a wrapper around curl to save the content of a request in a variable...",
  "scope": "",
  "body": [ "curl::request$0" ]
},

"curl::request#withdoc": {
  "prefix": "curl::request#withdoc",
  "description": "This function is a wrapper around curl to save the content of a request in a variable...",
  "scope": "",
  "body": [ "# This function is a wrapper around curl to save the content of a request in a variable\ncurl::request$0" ]
},

"exe::captureOutput": {
  "prefix": "exe::captureOutput",
  "description": "Capture the output of a command...",
  "scope": "",
  "body": [ "exe::captureOutput$0" ]
},

"exe::captureOutput#withdoc": {
  "prefix": "exe::captureOutput#withdoc",
  "description": "Capture the output of a command...",
  "scope": "",
  "body": [ "# Capture the output of a command\nexe::captureOutput$0" ]
},

"exe::invoke": {
  "prefix": "exe::invoke",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "exe::invoke$0" ]
},

"exe::invoke#withdoc": {
  "prefix": "exe::invoke#withdoc",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "# This function call an executable and its arguments\nexe::invoke$0" ]
},

"exe::invoke2": {
  "prefix": "exe::invoke2",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "exe::invoke2$0" ]
},

"exe::invoke2#withdoc": {
  "prefix": "exe::invoke2#withdoc",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "# This function call an executable and its arguments\nexe::invoke2$0" ]
},

"exe::invoke2piped": {
  "prefix": "exe::invoke2piped",
  "description": "This function call an executable and its arguments and input a given string as stdin...",
  "scope": "",
  "body": [ "exe::invoke2piped$0" ]
},

"exe::invoke2piped#withdoc": {
  "prefix": "exe::invoke2piped#withdoc",
  "description": "This function call an executable and its arguments and input a given string as stdin...",
  "scope": "",
  "body": [ "# This function call an executable and its arguments and input a given string as stdin\nexe::invoke2piped$0" ]
},

"exe::invoke5": {
  "prefix": "exe::invoke5",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "exe::invoke5$0" ]
},

"exe::invoke5#withdoc": {
  "prefix": "exe::invoke5#withdoc",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "# This function call an executable and its arguments\nexe::invoke5$0" ]
},

"exe::invokef2": {
  "prefix": "exe::invokef2",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "exe::invokef2$0" ]
},

"exe::invokef2#withdoc": {
  "prefix": "exe::invokef2#withdoc",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "# This function call an executable and its arguments\nexe::invokef2$0" ]
},

"exe::invokef2piped": {
  "prefix": "exe::invokef2piped",
  "description": "This function call an executable and its arguments and input a given string as stdin...",
  "scope": "",
  "body": [ "exe::invokef2piped$0" ]
},

"exe::invokef2piped#withdoc": {
  "prefix": "exe::invokef2piped#withdoc",
  "description": "This function call an executable and its arguments and input a given string as stdin...",
  "scope": "",
  "body": [ "# This function call an executable and its arguments and input a given string as stdin\nexe::invokef2piped$0" ]
},

"exe::invokef5": {
  "prefix": "exe::invokef5",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "exe::invokef5$0" ]
},

"exe::invokef5#withdoc": {
  "prefix": "exe::invokef5#withdoc",
  "description": "This function call an executable and its arguments...",
  "scope": "",
  "body": [ "# This function call an executable and its arguments\nexe::invokef5$0" ]
},

"extension1::doNothing": {
  "prefix": "extension1::doNothing",
  "description": "...",
  "scope": "",
  "body": [ "extension1::doNothing$0" ]
},

"extension1::doNothing#withdoc": {
  "prefix": "extension1::doNothing#withdoc",
  "description": "...",
  "scope": "",
  "body": [ "# \nextension1::doNothing$0" ]
},

"extension2::doNothing": {
  "prefix": "extension2::doNothing",
  "description": "...",
  "scope": "",
  "body": [ "extension2::doNothing$0" ]
},

"extension2::doNothing#withdoc": {
  "prefix": "extension2::doNothing#withdoc",
  "description": "...",
  "scope": "",
  "body": [ "# \nextension2::doNothing$0" ]
},

"extension3::doNothing": {
  "prefix": "extension3::doNothing",
  "description": "...",
  "scope": "",
  "body": [ "extension3::doNothing$0" ]
},

"extension3::doNothing#withdoc": {
  "prefix": "extension3::doNothing#withdoc",
  "description": "...",
  "scope": "",
  "body": [ "# \nextension3::doNothing$0" ]
},

"fs::cat": {
  "prefix": "fs::cat",
  "description": "Print the content of a file to stdout...",
  "scope": "",
  "body": [ "fs::cat$0" ]
},

"fs::cat#withdoc": {
  "prefix": "fs::cat#withdoc",
  "description": "Print the content of a file to stdout...",
  "scope": "",
  "body": [ "# Print the content of a file to stdout\nfs::cat$0" ]
},

"fs::cleanTempFiles": {
  "prefix": "fs::cleanTempFiles",
  "description": "Removes all the temporary files and directories that were created by the fs::createTempFile and fs::createTempDirectory functions...",
  "scope": "",
  "body": [ "fs::cleanTempFiles$0" ]
},

"fs::cleanTempFiles#withdoc": {
  "prefix": "fs::cleanTempFiles#withdoc",
  "description": "Removes all the temporary files and directories that were created by the fs::createTempFile and fs::createTempDirectory functions...",
  "scope": "",
  "body": [ "# Removes all the temporary files and directories that were created by the fs::createTempFile and fs::createTempDirectory functions\nfs::cleanTempFiles$0" ]
},

"fs::createDirectoryIfNeeded": {
  "prefix": "fs::createDirectoryIfNeeded",
  "description": "Create the directory tree if needed...",
  "scope": "",
  "body": [ "fs::createDirectoryIfNeeded$0" ]
},

"fs::createDirectoryIfNeeded#withdoc": {
  "prefix": "fs::createDirectoryIfNeeded#withdoc",
  "description": "Create the directory tree if needed...",
  "scope": "",
  "body": [ "# Create the directory tree if needed\nfs::createDirectoryIfNeeded$0" ]
},

"fs::createFilePathIfNeeded": {
  "prefix": "fs::createFilePathIfNeeded",
  "description": "Make sure that the given file path exists...",
  "scope": "",
  "body": [ "fs::createFilePathIfNeeded$0" ]
},

"fs::createFilePathIfNeeded#withdoc": {
  "prefix": "fs::createFilePathIfNeeded#withdoc",
  "description": "Make sure that the given file path exists...",
  "scope": "",
  "body": [ "# Make sure that the given file path exists\nfs::createFilePathIfNeeded$0" ]
},

"fs::createLink": {
  "prefix": "fs::createLink",
  "description": "Create a soft or hard link (original ← link)...",
  "scope": "",
  "body": [ "fs::createLink$0" ]
},

"fs::createLink#withdoc": {
  "prefix": "fs::createLink#withdoc",
  "description": "Create a soft or hard link (original ← link)...",
  "scope": "",
  "body": [ "# Create a soft or hard link (original ← link)\nfs::createLink$0" ]
},

"fs::createTempDirectory": {
  "prefix": "fs::createTempDirectory",
  "description": "Creates a temporary directory...",
  "scope": "",
  "body": [ "fs::createTempDirectory$0" ]
},

"fs::createTempDirectory#withdoc": {
  "prefix": "fs::createTempDirectory#withdoc",
  "description": "Creates a temporary directory...",
  "scope": "",
  "body": [ "# Creates a temporary directory\nfs::createTempDirectory$0" ]
},

"fs::createTempFile": {
  "prefix": "fs::createTempFile",
  "description": "Creates a temporary file and return its path...",
  "scope": "",
  "body": [ "fs::createTempFile$0" ]
},

"fs::createTempFile#withdoc": {
  "prefix": "fs::createTempFile#withdoc",
  "description": "Creates a temporary file and return its path...",
  "scope": "",
  "body": [ "# Creates a temporary file and return its path\nfs::createTempFile$0" ]
},

"fs::getFileLineCount": {
  "prefix": "fs::getFileLineCount",
  "description": "Get the number of lines in a file...",
  "scope": "",
  "body": [ "fs::getFileLineCount$0" ]
},

"fs::getFileLineCount#withdoc": {
  "prefix": "fs::getFileLineCount#withdoc",
  "description": "Get the number of lines in a file...",
  "scope": "",
  "body": [ "# Get the number of lines in a file\nfs::getFileLineCount$0" ]
},

"fs::head": {
  "prefix": "fs::head",
  "description": "Print the first lines of a file to stdout...",
  "scope": "",
  "body": [ "fs::head$0" ]
},

"fs::head#withdoc": {
  "prefix": "fs::head#withdoc",
  "description": "Print the first lines of a file to stdout...",
  "scope": "",
  "body": [ "# Print the first lines of a file to stdout\nfs::head$0" ]
},

"fs::isDirectoryWritable": {
  "prefix": "fs::isDirectoryWritable",
  "description": "Check if the directory is writable...",
  "scope": "",
  "body": [ "fs::isDirectoryWritable$0" ]
},

"fs::isDirectoryWritable#withdoc": {
  "prefix": "fs::isDirectoryWritable#withdoc",
  "description": "Check if the directory is writable...",
  "scope": "",
  "body": [ "# Check if the directory is writable\nfs::isDirectoryWritable$0" ]
},

"fs::listDirectories": {
  "prefix": "fs::listDirectories",
  "description": "List all the directories in the given directory...",
  "scope": "",
  "body": [ "fs::listDirectories$0" ]
},

"fs::listDirectories#withdoc": {
  "prefix": "fs::listDirectories#withdoc",
  "description": "List all the directories in the given directory...",
  "scope": "",
  "body": [ "# List all the directories in the given directory\nfs::listDirectories$0" ]
},

"fs::listFiles": {
  "prefix": "fs::listFiles",
  "description": "List all the files in the given directory...",
  "scope": "",
  "body": [ "fs::listFiles$0" ]
},

"fs::listFiles#withdoc": {
  "prefix": "fs::listFiles#withdoc",
  "description": "List all the files in the given directory...",
  "scope": "",
  "body": [ "# List all the files in the given directory\nfs::listFiles$0" ]
},

"fs::listPaths": {
  "prefix": "fs::listPaths",
  "description": "List all the paths in the given directory...",
  "scope": "",
  "body": [ "fs::listPaths$0" ]
},

"fs::listPaths#withdoc": {
  "prefix": "fs::listPaths#withdoc",
  "description": "List all the paths in the given directory...",
  "scope": "",
  "body": [ "# List all the paths in the given directory\nfs::listPaths$0" ]
},

"fs::readFile": {
  "prefix": "fs::readFile",
  "description": "Reads the content of a file and returns it in the global variable RETURNED_VALUE...",
  "scope": "",
  "body": [ "fs::readFile$0" ]
},

"fs::readFile#withdoc": {
  "prefix": "fs::readFile#withdoc",
  "description": "Reads the content of a file and returns it in the global variable RETURNED_VALUE...",
  "scope": "",
  "body": [ "# Reads the content of a file and returns it in the global variable RETURNED_VALUE\nfs::readFile$0" ]
},

"fs::tail": {
  "prefix": "fs::tail",
  "description": "Print the last lines of a file to stdout...",
  "scope": "",
  "body": [ "fs::tail$0" ]
},

"fs::tail#withdoc": {
  "prefix": "fs::tail#withdoc",
  "description": "Print the last lines of a file to stdout...",
  "scope": "",
  "body": [ "# Print the last lines of a file to stdout\nfs::tail$0" ]
},

"fs::toAbsolutePath": {
  "prefix": "fs::toAbsolutePath",
  "description": "This function returns the absolute path of a path...",
  "scope": "",
  "body": [ "fs::toAbsolutePath$0" ]
},

"fs::toAbsolutePath#withdoc": {
  "prefix": "fs::toAbsolutePath#withdoc",
  "description": "This function returns the absolute path of a path...",
  "scope": "",
  "body": [ "# This function returns the absolute path of a path\nfs::toAbsolutePath$0" ]
},

"interactive::askForConfirmation": {
  "prefix": "interactive::askForConfirmation",
  "description": "Ask the user to press the button to continue...",
  "scope": "",
  "body": [ "interactive::askForConfirmation$0" ]
},

"interactive::askForConfirmation#withdoc": {
  "prefix": "interactive::askForConfirmation#withdoc",
  "description": "Ask the user to press the button to continue...",
  "scope": "",
  "body": [ "# Ask the user to press the button to continue\ninteractive::askForConfirmation$0" ]
},

"interactive::askForConfirmationRaw": {
  "prefix": "interactive::askForConfirmationRaw",
  "description": "Ask the user to press the button to continue...",
  "scope": "",
  "body": [ "interactive::askForConfirmationRaw$0" ]
},

"interactive::askForConfirmationRaw#withdoc": {
  "prefix": "interactive::askForConfirmationRaw#withdoc",
  "description": "Ask the user to press the button to continue...",
  "scope": "",
  "body": [ "# Ask the user to press the button to continue\ninteractive::askForConfirmationRaw$0" ]
},

"interactive::displayAnswer": {
  "prefix": "interactive::displayAnswer",
  "description": "Displays an answer to a previous question...",
  "scope": "",
  "body": [ "interactive::displayAnswer$0" ]
},

"interactive::displayAnswer#withdoc": {
  "prefix": "interactive::displayAnswer#withdoc",
  "description": "Displays an answer to a previous question...",
  "scope": "",
  "body": [ "# Displays an answer to a previous question\ninteractive::displayAnswer$0" ]
},

"interactive::displayDialogBox": {
  "prefix": "interactive::displayDialogBox",
  "description": "Displays a dialog box with a speaker and a text...",
  "scope": "",
  "body": [ "interactive::displayDialogBox$0" ]
},

"interactive::displayDialogBox#withdoc": {
  "prefix": "interactive::displayDialogBox#withdoc",
  "description": "Displays a dialog box with a speaker and a text...",
  "scope": "",
  "body": [ "# Displays a dialog box with a speaker and a text\ninteractive::displayDialogBox$0" ]
},

"interactive::displayQuestion": {
  "prefix": "interactive::displayQuestion",
  "description": "Displays a question to the user...",
  "scope": "",
  "body": [ "interactive::displayQuestion$0" ]
},

"interactive::displayQuestion#withdoc": {
  "prefix": "interactive::displayQuestion#withdoc",
  "description": "Displays a question to the user...",
  "scope": "",
  "body": [ "# Displays a question to the user\ninteractive::displayQuestion$0" ]
},

"interactive::promptYesNo": {
  "prefix": "interactive::promptYesNo",
  "description": "Ask the user to yes or no...",
  "scope": "",
  "body": [ "interactive::promptYesNo$0" ]
},

"interactive::promptYesNo#withdoc": {
  "prefix": "interactive::promptYesNo#withdoc",
  "description": "Ask the user to yes or no...",
  "scope": "",
  "body": [ "# Ask the user to yes or no\ninteractive::promptYesNo$0" ]
},

"interactive::promptYesNoRaw": {
  "prefix": "interactive::promptYesNoRaw",
  "description": "Ask the user to yes or no...",
  "scope": "",
  "body": [ "interactive::promptYesNoRaw$0" ]
},

"interactive::promptYesNoRaw#withdoc": {
  "prefix": "interactive::promptYesNoRaw#withdoc",
  "description": "Ask the user to yes or no...",
  "scope": "",
  "body": [ "# Ask the user to yes or no\ninteractive::promptYesNoRaw$0" ]
},

"log::debug": {
  "prefix": "log::debug",
  "description": "Displays a debug message...",
  "scope": "",
  "body": [ "log::debug$0" ]
},

"log::debug#withdoc": {
  "prefix": "log::debug#withdoc",
  "description": "Displays a debug message...",
  "scope": "",
  "body": [ "# Displays a debug message\nlog::debug$0" ]
},

"log::error": {
  "prefix": "log::error",
  "description": "Displays an error message...",
  "scope": "",
  "body": [ "log::error$0" ]
},

"log::error#withdoc": {
  "prefix": "log::error#withdoc",
  "description": "Displays an error message...",
  "scope": "",
  "body": [ "# Displays an error message\nlog::error$0" ]
},

"log::errorTrace": {
  "prefix": "log::errorTrace",
  "description": "Displays an error trace message...",
  "scope": "",
  "body": [ "log::errorTrace$0" ]
},

"log::errorTrace#withdoc": {
  "prefix": "log::errorTrace#withdoc",
  "description": "Displays an error trace message...",
  "scope": "",
  "body": [ "# Displays an error trace message\nlog::errorTrace$0" ]
},

"log::getLevel": {
  "prefix": "log::getLevel",
  "description": "Get the current log level...",
  "scope": "",
  "body": [ "log::getLevel$0" ]
},

"log::getLevel#withdoc": {
  "prefix": "log::getLevel#withdoc",
  "description": "Get the current log level...",
  "scope": "",
  "body": [ "# Get the current log level\nlog::getLevel$0" ]
},

"log::info": {
  "prefix": "log::info",
  "description": "Displays an info message...",
  "scope": "",
  "body": [ "log::info$0" ]
},

"log::info#withdoc": {
  "prefix": "log::info#withdoc",
  "description": "Displays an info message...",
  "scope": "",
  "body": [ "# Displays an info message\nlog::info$0" ]
},

"log::isDebugEnabled": {
  "prefix": "log::isDebugEnabled",
  "description": "Check if the debug mode is enabled...",
  "scope": "",
  "body": [ "log::isDebugEnabled$0" ]
},

"log::isDebugEnabled#withdoc": {
  "prefix": "log::isDebugEnabled#withdoc",
  "description": "Check if the debug mode is enabled...",
  "scope": "",
  "body": [ "# Check if the debug mode is enabled\nlog::isDebugEnabled$0" ]
},

"log::isTraceEnabled": {
  "prefix": "log::isTraceEnabled",
  "description": "Check if the trace mode is enabled...",
  "scope": "",
  "body": [ "log::isTraceEnabled$0" ]
},

"log::isTraceEnabled#withdoc": {
  "prefix": "log::isTraceEnabled#withdoc",
  "description": "Check if the trace mode is enabled...",
  "scope": "",
  "body": [ "# Check if the trace mode is enabled\nlog::isTraceEnabled$0" ]
},

"log::printCallStack": {
  "prefix": "log::printCallStack",
  "description": "This function prints the current function stack in the logs...",
  "scope": "",
  "body": [ "log::printCallStack$0" ]
},

"log::printCallStack#withdoc": {
  "prefix": "log::printCallStack#withdoc",
  "description": "This function prints the current function stack in the logs...",
  "scope": "",
  "body": [ "# This function prints the current function stack in the logs\nlog::printCallStack$0" ]
},

"log::printFile": {
  "prefix": "log::printFile",
  "description": "Display a file content with line numbers in the logs...",
  "scope": "",
  "body": [ "log::printFile$0" ]
},

"log::printFile#withdoc": {
  "prefix": "log::printFile#withdoc",
  "description": "Display a file content with line numbers in the logs...",
  "scope": "",
  "body": [ "# Display a file content with line numbers in the logs\nlog::printFile$0" ]
},

"log::printFileString": {
  "prefix": "log::printFileString",
  "description": "Display a file content with line numbers in the logs...",
  "scope": "",
  "body": [ "log::printFileString$0" ]
},

"log::printFileString#withdoc": {
  "prefix": "log::printFileString#withdoc",
  "description": "Display a file content with line numbers in the logs...",
  "scope": "",
  "body": [ "# Display a file content with line numbers in the logs\nlog::printFileString$0" ]
},

"log::printRaw": {
  "prefix": "log::printRaw",
  "description": "Display something in the log stream...",
  "scope": "",
  "body": [ "log::printRaw$0" ]
},

"log::printRaw#withdoc": {
  "prefix": "log::printRaw#withdoc",
  "description": "Display something in the log stream...",
  "scope": "",
  "body": [ "# Display something in the log stream\nlog::printRaw$0" ]
},

"log::printString": {
  "prefix": "log::printString",
  "description": "Display a string in the log...",
  "scope": "",
  "body": [ "log::printString$0" ]
},

"log::printString#withdoc": {
  "prefix": "log::printString#withdoc",
  "description": "Display a string in the log...",
  "scope": "",
  "body": [ "# Display a string in the log\nlog::printString$0" ]
},

"log::setLevel": {
  "prefix": "log::setLevel",
  "description": "Set the log level...",
  "scope": "",
  "body": [ "log::setLevel$0" ]
},

"log::setLevel#withdoc": {
  "prefix": "log::setLevel#withdoc",
  "description": "Set the log level...",
  "scope": "",
  "body": [ "# Set the log level\nlog::setLevel$0" ]
},

"log::success": {
  "prefix": "log::success",
  "description": "Displays a success message...",
  "scope": "",
  "body": [ "log::success$0" ]
},

"log::success#withdoc": {
  "prefix": "log::success#withdoc",
  "description": "Displays a success message...",
  "scope": "",
  "body": [ "# Displays a success message\nlog::success$0" ]
},

"log::trace": {
  "prefix": "log::trace",
  "description": "Displays a trace message...",
  "scope": "",
  "body": [ "log::trace$0" ]
},

"log::trace#withdoc": {
  "prefix": "log::trace#withdoc",
  "description": "Displays a trace message...",
  "scope": "",
  "body": [ "# Displays a trace message\nlog::trace$0" ]
},

"log::warning": {
  "prefix": "log::warning",
  "description": "Displays a warning...",
  "scope": "",
  "body": [ "log::warning$0" ]
},

"log::warning#withdoc": {
  "prefix": "log::warning#withdoc",
  "description": "Displays a warning...",
  "scope": "",
  "body": [ "# Displays a warning\nlog::warning$0" ]
},

"profiler::disable": {
  "prefix": "profiler::disable",
  "description": "Disable the profiler if previously activated with profiler::enable...",
  "scope": "",
  "body": [ "profiler::disable$0" ]
},

"profiler::disable#withdoc": {
  "prefix": "profiler::disable#withdoc",
  "description": "Disable the profiler if previously activated with profiler::enable...",
  "scope": "",
  "body": [ "# Disable the profiler if previously activated with profiler::enable\nprofiler::disable$0" ]
},

"profiler::enable": {
  "prefix": "profiler::enable",
  "description": "Enables the profiler and start writing to the given file...",
  "scope": "",
  "body": [ "profiler::enable$0" ]
},

"profiler::enable#withdoc": {
  "prefix": "profiler::enable#withdoc",
  "description": "Enables the profiler and start writing to the given file...",
  "scope": "",
  "body": [ "# Enables the profiler and start writing to the given file\nprofiler::enable$0" ]
},

"progress::start": {
  "prefix": "progress::start",
  "description": "Shows a spinner / progress animation with configurable output including a progress bar...",
  "scope": "",
  "body": [ "progress::start$0" ]
},

"progress::start#withdoc": {
  "prefix": "progress::start#withdoc",
  "description": "Shows a spinner / progress animation with configurable output including a progress bar...",
  "scope": "",
  "body": [ "# Shows a spinner / progress animation with configurable output including a progress bar\nprogress::start$0" ]
},

"progress::stop": {
  "prefix": "progress::stop",
  "description": "Stop the progress bar...",
  "scope": "",
  "body": [ "progress::stop$0" ]
},

"progress::stop#withdoc": {
  "prefix": "progress::stop#withdoc",
  "description": "Stop the progress bar...",
  "scope": "",
  "body": [ "# Stop the progress bar\nprogress::stop$0" ]
},

"progress::update": {
  "prefix": "progress::update",
  "description": "Update the progress bar with a new percentage and message...",
  "scope": "",
  "body": [ "progress::update$0" ]
},

"progress::update#withdoc": {
  "prefix": "progress::update#withdoc",
  "description": "Update the progress bar with a new percentage and message...",
  "scope": "",
  "body": [ "# Update the progress bar with a new percentage and message\nprogress::update$0" ]
},

"regex::getFirstGroup": {
  "prefix": "regex::getFirstGroup",
  "description": "Matches a string against a regex and returns the first captured group of the matched string...",
  "scope": "",
  "body": [ "regex::getFirstGroup$0" ]
},

"regex::getFirstGroup#withdoc": {
  "prefix": "regex::getFirstGroup#withdoc",
  "description": "Matches a string against a regex and returns the first captured group of the matched string...",
  "scope": "",
  "body": [ "# Matches a string against a regex and returns the first captured group of the matched string\nregex::getFirstGroup$0" ]
},

"sfzf::show": {
  "prefix": "sfzf::show",
  "description": "Displays a menu where the user can search and select an item...",
  "scope": "",
  "body": [ "sfzf::show$0" ]
},

"sfzf::show#withdoc": {
  "prefix": "sfzf::show#withdoc",
  "description": "Displays a menu where the user can search and select an item...",
  "scope": "",
  "body": [ "# Displays a menu where the user can search and select an item\nsfzf::show$0" ]
},

"source": {
  "prefix": "source",
  "description": "Allows to source/include a library file or sources a file...",
  "scope": "",
  "body": [ "source$0" ]
},

"source#withdoc": {
  "prefix": "source#withdoc",
  "description": "Allows to source/include a library file or sources a file...",
  "scope": "",
  "body": [ "# Allows to source/include a library file or sources a file\nsource$0" ]
},

"string::convertCamelCaseToSnakeCase": {
  "prefix": "string::convertCamelCaseToSnakeCase",
  "description": "This function convert a camelCase string to a SNAKE_CASE string...",
  "scope": "",
  "body": [ "string::convertCamelCaseToSnakeCase$0" ]
},

"string::convertCamelCaseToSnakeCase#withdoc": {
  "prefix": "string::convertCamelCaseToSnakeCase#withdoc",
  "description": "This function convert a camelCase string to a SNAKE_CASE string...",
  "scope": "",
  "body": [ "# This function convert a camelCase string to a SNAKE_CASE string\nstring::convertCamelCaseToSnakeCase$0" ]
},

"string::convertKebabCaseToCamelCase": {
  "prefix": "string::convertKebabCaseToCamelCase",
  "description": "This function convert a kebab-case string to a camelCase string...",
  "scope": "",
  "body": [ "string::convertKebabCaseToCamelCase$0" ]
},

"string::convertKebabCaseToCamelCase#withdoc": {
  "prefix": "string::convertKebabCaseToCamelCase#withdoc",
  "description": "This function convert a kebab-case string to a camelCase string...",
  "scope": "",
  "body": [ "# This function convert a kebab-case string to a camelCase string\nstring::convertKebabCaseToCamelCase$0" ]
},

"string::convertKebabCaseToSnakeCase": {
  "prefix": "string::convertKebabCaseToSnakeCase",
  "description": "This function convert a kebab-case string to a SNAKE_CASE string...",
  "scope": "",
  "body": [ "string::convertKebabCaseToSnakeCase$0" ]
},

"string::convertKebabCaseToSnakeCase#withdoc": {
  "prefix": "string::convertKebabCaseToSnakeCase#withdoc",
  "description": "This function convert a kebab-case string to a SNAKE_CASE string...",
  "scope": "",
  "body": [ "# This function convert a kebab-case string to a SNAKE_CASE string\nstring::convertKebabCaseToSnakeCase$0" ]
},

"string::count": {
  "prefix": "string::count",
  "description": "Counts the number of occurrences of a substring in a string...",
  "scope": "",
  "body": [ "string::count$0" ]
},

"string::count#withdoc": {
  "prefix": "string::count#withdoc",
  "description": "Counts the number of occurrences of a substring in a string...",
  "scope": "",
  "body": [ "# Counts the number of occurrences of a substring in a string\nstring::count$0" ]
},

"string::doForEachLine": {
  "prefix": "string::doForEachLine",
  "description": "Execute a callback function for each item (e...",
  "scope": "",
  "body": [ "string::doForEachLine$0" ]
},

"string::doForEachLine#withdoc": {
  "prefix": "string::doForEachLine#withdoc",
  "description": "Execute a callback function for each item (e...",
  "scope": "",
  "body": [ "# Execute a callback function for each item (e\nstring::doForEachLine$0" ]
},

"string::extractBetween": {
  "prefix": "string::extractBetween",
  "description": "Extract the text between two strings within a string...",
  "scope": "",
  "body": [ "string::extractBetween$0" ]
},

"string::extractBetween#withdoc": {
  "prefix": "string::extractBetween#withdoc",
  "description": "Extract the text between two strings within a string...",
  "scope": "",
  "body": [ "# Extract the text between two strings within a string\nstring::extractBetween$0" ]
},

"string::getField": {
  "prefix": "string::getField",
  "description": "Allows to get the nth element of a string separated by a given separator...",
  "scope": "",
  "body": [ "string::getField$0" ]
},

"string::getField#withdoc": {
  "prefix": "string::getField#withdoc",
  "description": "Allows to get the nth element of a string separated by a given separator...",
  "scope": "",
  "body": [ "# Allows to get the nth element of a string separated by a given separator\nstring::getField$0" ]
},

"string::getIndexOf": {
  "prefix": "string::getIndexOf",
  "description": "Find the first index of a string within another string...",
  "scope": "",
  "body": [ "string::getIndexOf$0" ]
},

"string::getIndexOf#withdoc": {
  "prefix": "string::getIndexOf#withdoc",
  "description": "Find the first index of a string within another string...",
  "scope": "",
  "body": [ "# Find the first index of a string within another string\nstring::getIndexOf$0" ]
},

"string::head": {
  "prefix": "string::head",
  "description": "Get the first nth items (e...",
  "scope": "",
  "body": [ "string::head$0" ]
},

"string::head#withdoc": {
  "prefix": "string::head#withdoc",
  "description": "Get the first nth items (e...",
  "scope": "",
  "body": [ "# Get the first nth items (e\nstring::head$0" ]
},

"string::highlight": {
  "prefix": "string::highlight",
  "description": "Highlight characters in a string...",
  "scope": "",
  "body": [ "string::highlight$0" ]
},

"string::highlight#withdoc": {
  "prefix": "string::highlight#withdoc",
  "description": "Highlight characters in a string...",
  "scope": "",
  "body": [ "# Highlight characters in a string\nstring::highlight$0" ]
},

"string::split": {
  "prefix": "string::split",
  "description": "Split a string into an array using a separator...",
  "scope": "",
  "body": [ "string::split$0" ]
},

"string::split#withdoc": {
  "prefix": "string::split#withdoc",
  "description": "Split a string into an array using a separator...",
  "scope": "",
  "body": [ "# Split a string into an array using a separator\nstring::split$0" ]
},

"string::trimAll": {
  "prefix": "string::trimAll",
  "description": "Trim all whitespaces and truncate spaces...",
  "scope": "",
  "body": [ "string::trimAll$0" ]
},

"string::trimAll#withdoc": {
  "prefix": "string::trimAll#withdoc",
  "description": "Trim all whitespaces and truncate spaces...",
  "scope": "",
  "body": [ "# Trim all whitespaces and truncate spaces\nstring::trimAll$0" ]
},

"string::trimEdges": {
  "prefix": "string::trimEdges",
  "description": "Trim leading and trailing characters (defaults to whitespaces)...",
  "scope": "",
  "body": [ "string::trimEdges$0" ]
},

"string::trimEdges#withdoc": {
  "prefix": "string::trimEdges#withdoc",
  "description": "Trim leading and trailing characters (defaults to whitespaces)...",
  "scope": "",
  "body": [ "# Trim leading and trailing characters (defaults to whitespaces)\nstring::trimEdges$0" ]
},

"string::wrapCharacters": {
  "prefix": "string::wrapCharacters",
  "description": "Allows to hard wrap the given string at the given width...",
  "scope": "",
  "body": [ "string::wrapCharacters$0" ]
},

"string::wrapCharacters#withdoc": {
  "prefix": "string::wrapCharacters#withdoc",
  "description": "Allows to hard wrap the given string at the given width...",
  "scope": "",
  "body": [ "# Allows to hard wrap the given string at the given width\nstring::wrapCharacters$0" ]
},

"string::wrapWords": {
  "prefix": "string::wrapWords",
  "description": "Allows to soft wrap the given text at the given width...",
  "scope": "",
  "body": [ "string::wrapWords$0" ]
},

"string::wrapWords#withdoc": {
  "prefix": "string::wrapWords#withdoc",
  "description": "Allows to soft wrap the given text at the given width...",
  "scope": "",
  "body": [ "# Allows to soft wrap the given text at the given width\nstring::wrapWords$0" ]
},

"system::addToPath": {
  "prefix": "system::addToPath",
  "description": "Add the given path to the PATH environment variable for various shells, by adding the appropriate export command to the appropriate file...",
  "scope": "",
  "body": [ "system::addToPath$0" ]
},

"system::addToPath#withdoc": {
  "prefix": "system::addToPath#withdoc",
  "description": "Add the given path to the PATH environment variable for various shells, by adding the appropriate export command to the appropriate file...",
  "scope": "",
  "body": [ "# Add the given path to the PATH environment variable for various shells, by adding the appropriate export command to the appropriate file\nsystem::addToPath$0" ]
},

"system::getEnvVars": {
  "prefix": "system::getEnvVars",
  "description": "Get the list of all the environment variables...",
  "scope": "",
  "body": [ "system::getEnvVars$0" ]
},

"system::getEnvVars#withdoc": {
  "prefix": "system::getEnvVars#withdoc",
  "description": "Get the list of all the environment variables...",
  "scope": "",
  "body": [ "# Get the list of all the environment variables\nsystem::getEnvVars$0" ]
},

"system::getOs": {
  "prefix": "system::getOs",
  "description": "Returns the name of the current OS...",
  "scope": "",
  "body": [ "system::getOs$0" ]
},

"system::getOs#withdoc": {
  "prefix": "system::getOs#withdoc",
  "description": "Returns the name of the current OS...",
  "scope": "",
  "body": [ "# Returns the name of the current OS\nsystem::getOs$0" ]
},

"system::isRoot": {
  "prefix": "system::isRoot",
  "description": "Check if the script is running as root...",
  "scope": "",
  "body": [ "system::isRoot$0" ]
},

"system::isRoot#withdoc": {
  "prefix": "system::isRoot#withdoc",
  "description": "Check if the script is running as root...",
  "scope": "",
  "body": [ "# Check if the script is running as root\nsystem::isRoot$0" ]
},

"test::exec": {
  "prefix": "test::exec",
  "description": "Call this function to execute a command and write the command and its output to the report file...",
  "scope": "",
  "body": [ "test::exec$0" ]
},

"test::exec#withdoc": {
  "prefix": "test::exec#withdoc",
  "description": "Call this function to execute a command and write the command and its output to the report file...",
  "scope": "",
  "body": [ "# Call this function to execute a command and write the command and its output to the report file\ntest::exec$0" ]
},

"test::exit": {
  "prefix": "test::exit",
  "description": "Call this function to execute a command that can call `exit` and write the command and its output to the report file...",
  "scope": "",
  "body": [ "test::exit$0" ]
},

"test::exit#withdoc": {
  "prefix": "test::exit#withdoc",
  "description": "Call this function to execute a command that can call `exit` and write the command and its output to the report file...",
  "scope": "",
  "body": [ "# Call this function to execute a command that can call `exit` and write the command and its output to the report file\ntest::exit$0" ]
},

"test::fail": {
  "prefix": "test::fail",
  "description": "Call this function to log a message and exit with the status 142, which indicates to the self test command that the test failed and that we know the reason (it is a bad implementation of the test itself)...",
  "scope": "",
  "body": [ "test::fail$0" ]
},

"test::fail#withdoc": {
  "prefix": "test::fail#withdoc",
  "description": "Call this function to log a message and exit with the status 142, which indicates to the self test command that the test failed and that we know the reason (it is a bad implementation of the test itself)...",
  "scope": "",
  "body": [ "# Call this function to log a message and exit with the status 142, which indicates to the self test command that the test failed and that we know the reason (it is a bad implementation of the test itself)\ntest::fail$0" ]
},

"test::flush": {
  "prefix": "test::flush",
  "description": "Call this function to flush the standard and error outputs to the report file...",
  "scope": "",
  "body": [ "test::flush$0" ]
},

"test::flush#withdoc": {
  "prefix": "test::flush#withdoc",
  "description": "Call this function to flush the standard and error outputs to the report file...",
  "scope": "",
  "body": [ "# Call this function to flush the standard and error outputs to the report file\ntest::flush$0" ]
},

"test::flushStderr": {
  "prefix": "test::flushStderr",
  "description": "Call this function to flush the standard error to the report file...",
  "scope": "",
  "body": [ "test::flushStderr$0" ]
},

"test::flushStderr#withdoc": {
  "prefix": "test::flushStderr#withdoc",
  "description": "Call this function to flush the standard error to the report file...",
  "scope": "",
  "body": [ "# Call this function to flush the standard error to the report file\ntest::flushStderr$0" ]
},

"test::flushStdout": {
  "prefix": "test::flushStdout",
  "description": "Call this function to flush the standard output to the report file...",
  "scope": "",
  "body": [ "test::flushStdout$0" ]
},

"test::flushStdout#withdoc": {
  "prefix": "test::flushStdout#withdoc",
  "description": "Call this function to flush the standard output to the report file...",
  "scope": "",
  "body": [ "# Call this function to flush the standard output to the report file\ntest::flushStdout$0" ]
},

"test::func": {
  "prefix": "test::func",
  "description": "Call this function to test a function that returns a value using the valet conventions (RETURNED_VALUE, RETURNED_VALUE2, RETURNED_ARRAY, etc...",
  "scope": "",
  "body": [ "test::func$0" ]
},

"test::func#withdoc": {
  "prefix": "test::func#withdoc",
  "description": "Call this function to test a function that returns a value using the valet conventions (RETURNED_VALUE, RETURNED_VALUE2, RETURNED_ARRAY, etc...",
  "scope": "",
  "body": [ "# Call this function to test a function that returns a value using the valet conventions (RETURNED_VALUE, RETURNED_VALUE2, RETURNED_ARRAY, etc\ntest::func$0" ]
},

"test::log": {
  "prefix": "test::log",
  "description": "Call this function to log a message during a test...",
  "scope": "",
  "body": [ "test::log$0" ]
},

"test::log#withdoc": {
  "prefix": "test::log#withdoc",
  "description": "Call this function to log a message during a test...",
  "scope": "",
  "body": [ "# Call this function to log a message during a test\ntest::log$0" ]
},

"test::markdown": {
  "prefix": "test::markdown",
  "description": "Call this function to add some markdown in the report file...",
  "scope": "",
  "body": [ "test::markdown$0" ]
},

"test::markdown#withdoc": {
  "prefix": "test::markdown#withdoc",
  "description": "Call this function to add some markdown in the report file...",
  "scope": "",
  "body": [ "# Call this function to add some markdown in the report file\ntest::markdown$0" ]
},

"test::printReturnedVars": {
  "prefix": "test::printReturnedVars",
  "description": "This function can be called to print the returned values, e...",
  "scope": "",
  "body": [ "test::printReturnedVars$0" ]
},

"test::printReturnedVars#withdoc": {
  "prefix": "test::printReturnedVars#withdoc",
  "description": "This function can be called to print the returned values, e...",
  "scope": "",
  "body": [ "# This function can be called to print the returned values, e\ntest::printReturnedVars$0" ]
},

"test::printVars": {
  "prefix": "test::printVars",
  "description": "This function can be called to print the global variables in the report file...",
  "scope": "",
  "body": [ "test::printVars$0" ]
},

"test::printVars#withdoc": {
  "prefix": "test::printVars#withdoc",
  "description": "This function can be called to print the global variables in the report file...",
  "scope": "",
  "body": [ "# This function can be called to print the global variables in the report file\ntest::printVars$0" ]
},

"test::prompt": {
  "prefix": "test::prompt",
  "description": "Call this function to print a 'prompt' (markdown that looks like a prompt) in the report file...",
  "scope": "",
  "body": [ "test::prompt$0" ]
},

"test::prompt#withdoc": {
  "prefix": "test::prompt#withdoc",
  "description": "Call this function to print a 'prompt' (markdown that looks like a prompt) in the report file...",
  "scope": "",
  "body": [ "# Call this function to print a 'prompt' (markdown that looks like a prompt) in the report file\ntest::prompt$0" ]
},

"test::resetReturnedVars": {
  "prefix": "test::resetReturnedVars",
  "description": "Resets the value of each RETURNED_ variable...",
  "scope": "",
  "body": [ "test::resetReturnedVars$0" ]
},

"test::resetReturnedVars#withdoc": {
  "prefix": "test::resetReturnedVars#withdoc",
  "description": "Resets the value of each RETURNED_ variable...",
  "scope": "",
  "body": [ "# Resets the value of each RETURNED_ variable\ntest::resetReturnedVars$0" ]
},

"test::title": {
  "prefix": "test::title",
  "description": "Call this function to add an H3 title in the report file...",
  "scope": "",
  "body": [ "test::title$0" ]
},

"test::title#withdoc": {
  "prefix": "test::title#withdoc",
  "description": "Call this function to add an H3 title in the report file...",
  "scope": "",
  "body": [ "# Call this function to add an H3 title in the report file\ntest::title$0" ]
},

"test::transformReturnedVarsBeforePrinting": {
  "prefix": "test::transformReturnedVarsBeforePrinting",
  "description": "This function can be defined to modify the returned variables before printing them in the report...",
  "scope": "",
  "body": [ "test::transformReturnedVarsBeforePrinting$0" ]
},

"test::transformReturnedVarsBeforePrinting#withdoc": {
  "prefix": "test::transformReturnedVarsBeforePrinting#withdoc",
  "description": "This function can be defined to modify the returned variables before printing them in the report...",
  "scope": "",
  "body": [ "# This function can be defined to modify the returned variables before printing them in the report\ntest::transformReturnedVarsBeforePrinting$0" ]
},

"test::transformTextBeforeFlushing": {
  "prefix": "test::transformTextBeforeFlushing",
  "description": "This function can be defined to modify the flushed text before adding it to the report...",
  "scope": "",
  "body": [ "test::transformTextBeforeFlushing$0" ]
},

"test::transformTextBeforeFlushing#withdoc": {
  "prefix": "test::transformTextBeforeFlushing#withdoc",
  "description": "This function can be defined to modify the flushed text before adding it to the report...",
  "scope": "",
  "body": [ "# This function can be defined to modify the flushed text before adding it to the report\ntest::transformTextBeforeFlushing$0" ]
},

"time::convertMicrosecondsToHuman": {
  "prefix": "time::convertMicrosecondsToHuman",
  "description": "Convert microseconds to human readable format...",
  "scope": "",
  "body": [ "time::convertMicrosecondsToHuman$0" ]
},

"time::convertMicrosecondsToHuman#withdoc": {
  "prefix": "time::convertMicrosecondsToHuman#withdoc",
  "description": "Convert microseconds to human readable format...",
  "scope": "",
  "body": [ "# Convert microseconds to human readable format\ntime::convertMicrosecondsToHuman$0" ]
},

"time::getDate": {
  "prefix": "time::getDate",
  "description": "Get the current date in the given format...",
  "scope": "",
  "body": [ "time::getDate$0" ]
},

"time::getDate#withdoc": {
  "prefix": "time::getDate#withdoc",
  "description": "Get the current date in the given format...",
  "scope": "",
  "body": [ "# Get the current date in the given format\ntime::getDate$0" ]
},

"time::getProgramElapsedMicroseconds": {
  "prefix": "time::getProgramElapsedMicroseconds",
  "description": "Get the elapsed time in µs since the program started...",
  "scope": "",
  "body": [ "time::getProgramElapsedMicroseconds$0" ]
},

"time::getProgramElapsedMicroseconds#withdoc": {
  "prefix": "time::getProgramElapsedMicroseconds#withdoc",
  "description": "Get the elapsed time in µs since the program started...",
  "scope": "",
  "body": [ "# Get the elapsed time in µs since the program started\ntime::getProgramElapsedMicroseconds$0" ]
},

"tui::clearBox": {
  "prefix": "tui::clearBox",
  "description": "Clear a \"box\" in the terminal...",
  "scope": "",
  "body": [ "tui::clearBox$0" ]
},

"tui::clearBox#withdoc": {
  "prefix": "tui::clearBox#withdoc",
  "description": "Clear a \"box\" in the terminal...",
  "scope": "",
  "body": [ "# Clear a \\\"box\\\" in the terminal\ntui::clearBox$0" ]
},

"tui::clearKeyPressed": {
  "prefix": "tui::clearKeyPressed",
  "description": "This function reads all the inputs from the user, effectively discarding them...",
  "scope": "",
  "body": [ "tui::clearKeyPressed$0" ]
},

"tui::clearKeyPressed#withdoc": {
  "prefix": "tui::clearKeyPressed#withdoc",
  "description": "This function reads all the inputs from the user, effectively discarding them...",
  "scope": "",
  "body": [ "# This function reads all the inputs from the user, effectively discarding them\ntui::clearKeyPressed$0" ]
},

"tui::createSpace": {
  "prefix": "tui::createSpace",
  "description": "This function creates empty lines from the current cursor position...",
  "scope": "",
  "body": [ "tui::createSpace$0" ]
},

"tui::createSpace#withdoc": {
  "prefix": "tui::createSpace#withdoc",
  "description": "This function creates empty lines from the current cursor position...",
  "scope": "",
  "body": [ "# This function creates empty lines from the current cursor position\ntui::createSpace$0" ]
},

"tui::getBestAutocompleteBox": {
  "prefix": "tui::getBestAutocompleteBox",
  "description": "This function returns the best position and size for an autocomplete box that would open at the given position...",
  "scope": "",
  "body": [ "tui::getBestAutocompleteBox$0" ]
},

"tui::getBestAutocompleteBox#withdoc": {
  "prefix": "tui::getBestAutocompleteBox#withdoc",
  "description": "This function returns the best position and size for an autocomplete box that would open at the given position...",
  "scope": "",
  "body": [ "# This function returns the best position and size for an autocomplete box that would open at the given position\ntui::getBestAutocompleteBox$0" ]
},

"tui::getCursorPosition": {
  "prefix": "tui::getCursorPosition",
  "description": "Get the current cursor position...",
  "scope": "",
  "body": [ "tui::getCursorPosition$0" ]
},

"tui::getCursorPosition#withdoc": {
  "prefix": "tui::getCursorPosition#withdoc",
  "description": "Get the current cursor position...",
  "scope": "",
  "body": [ "# Get the current cursor position\ntui::getCursorPosition$0" ]
},

"tui::getTerminalSize": {
  "prefix": "tui::getTerminalSize",
  "description": "This function exports the terminal size...",
  "scope": "",
  "body": [ "tui::getTerminalSize$0" ]
},

"tui::getTerminalSize#withdoc": {
  "prefix": "tui::getTerminalSize#withdoc",
  "description": "This function exports the terminal size...",
  "scope": "",
  "body": [ "# This function exports the terminal size\ntui::getTerminalSize$0" ]
},

"tui::rebindKeymap": {
  "prefix": "tui::rebindKeymap",
  "description": "Rebinds all special keys to call a given callback function...",
  "scope": "",
  "body": [ "tui::rebindKeymap$0" ]
},

"tui::rebindKeymap#withdoc": {
  "prefix": "tui::rebindKeymap#withdoc",
  "description": "Rebinds all special keys to call a given callback function...",
  "scope": "",
  "body": [ "# Rebinds all special keys to call a given callback function\ntui::rebindKeymap$0" ]
},

"tui::restoreBindings": {
  "prefix": "tui::restoreBindings",
  "description": "Reset the key bindings to the default ones...",
  "scope": "",
  "body": [ "tui::restoreBindings$0" ]
},

"tui::restoreBindings#withdoc": {
  "prefix": "tui::restoreBindings#withdoc",
  "description": "Reset the key bindings to the default ones...",
  "scope": "",
  "body": [ "# Reset the key bindings to the default ones\ntui::restoreBindings$0" ]
},

"tui::restoreInterruptTrap": {
  "prefix": "tui::restoreInterruptTrap",
  "description": "Restore the original trap for the interrupt signal (SIGINT)...",
  "scope": "",
  "body": [ "tui::restoreInterruptTrap$0" ]
},

"tui::restoreInterruptTrap#withdoc": {
  "prefix": "tui::restoreInterruptTrap#withdoc",
  "description": "Restore the original trap for the interrupt signal (SIGINT)...",
  "scope": "",
  "body": [ "# Restore the original trap for the interrupt signal (SIGINT)\ntui::restoreInterruptTrap$0" ]
},

"tui::restoreTerminalOptions": {
  "prefix": "tui::restoreTerminalOptions",
  "description": "Restore the terminal options to their original state...",
  "scope": "",
  "body": [ "tui::restoreTerminalOptions$0" ]
},

"tui::restoreTerminalOptions#withdoc": {
  "prefix": "tui::restoreTerminalOptions#withdoc",
  "description": "Restore the terminal options to their original state...",
  "scope": "",
  "body": [ "# Restore the terminal options to their original state\ntui::restoreTerminalOptions$0" ]
},

"tui::setInterruptTrap": {
  "prefix": "tui::setInterruptTrap",
  "description": "Set a trap to catch the interrupt signal (SIGINT)...",
  "scope": "",
  "body": [ "tui::setInterruptTrap$0" ]
},

"tui::setInterruptTrap#withdoc": {
  "prefix": "tui::setInterruptTrap#withdoc",
  "description": "Set a trap to catch the interrupt signal (SIGINT)...",
  "scope": "",
  "body": [ "# Set a trap to catch the interrupt signal (SIGINT)\ntui::setInterruptTrap$0" ]
},

"tui::setTerminalOptions": {
  "prefix": "tui::setTerminalOptions",
  "description": "Set the terminal options to enable a satisfying and consistent behavior for the GNU readline library...",
  "scope": "",
  "body": [ "tui::setTerminalOptions$0" ]
},

"tui::setTerminalOptions#withdoc": {
  "prefix": "tui::setTerminalOptions#withdoc",
  "description": "Set the terminal options to enable a satisfying and consistent behavior for the GNU readline library...",
  "scope": "",
  "body": [ "# Set the terminal options to enable a satisfying and consistent behavior for the GNU readline library\ntui::setTerminalOptions$0" ]
},

"tui::switchBackFromFullScreen": {
  "prefix": "tui::switchBackFromFullScreen",
  "description": "Call this function to switch back from the full screen mode...",
  "scope": "",
  "body": [ "tui::switchBackFromFullScreen$0" ]
},

"tui::switchBackFromFullScreen#withdoc": {
  "prefix": "tui::switchBackFromFullScreen#withdoc",
  "description": "Call this function to switch back from the full screen mode...",
  "scope": "",
  "body": [ "# Call this function to switch back from the full screen mode\ntui::switchBackFromFullScreen$0" ]
},

"tui::switchToFullScreen": {
  "prefix": "tui::switchToFullScreen",
  "description": "Call this function to start an interactive session in full screen mode...",
  "scope": "",
  "body": [ "tui::switchToFullScreen$0" ]
},

"tui::switchToFullScreen#withdoc": {
  "prefix": "tui::switchToFullScreen#withdoc",
  "description": "Call this function to start an interactive session in full screen mode...",
  "scope": "",
  "body": [ "# Call this function to start an interactive session in full screen mode\ntui::switchToFullScreen$0" ]
},

"tui::testWaitForChar": {
  "prefix": "tui::testWaitForChar",
  "description": "Wait for the user to send a character to stdin (i...",
  "scope": "",
  "body": [ "tui::testWaitForChar$0" ]
},

"tui::testWaitForChar#withdoc": {
  "prefix": "tui::testWaitForChar#withdoc",
  "description": "Wait for the user to send a character to stdin (i...",
  "scope": "",
  "body": [ "# Wait for the user to send a character to stdin (i\ntui::testWaitForChar$0" ]
},

"tui::testWaitForKeyPress": {
  "prefix": "tui::testWaitForKeyPress",
  "description": "Wait for the user to press a key and prints it to the screen...",
  "scope": "",
  "body": [ "tui::testWaitForKeyPress$0" ]
},

"tui::testWaitForKeyPress#withdoc": {
  "prefix": "tui::testWaitForKeyPress#withdoc",
  "description": "Wait for the user to press a key and prints it to the screen...",
  "scope": "",
  "body": [ "# Wait for the user to press a key and prints it to the screen\ntui::testWaitForKeyPress$0" ]
},

"tui::waitForChar": {
  "prefix": "tui::waitForChar",
  "description": "Wait for a user input (single char)...",
  "scope": "",
  "body": [ "tui::waitForChar$0" ]
},

"tui::waitForChar#withdoc": {
  "prefix": "tui::waitForChar#withdoc",
  "description": "Wait for a user input (single char)...",
  "scope": "",
  "body": [ "# Wait for a user input (single char)\ntui::waitForChar$0" ]
},

"tui::waitForKeyPress": {
  "prefix": "tui::waitForKeyPress",
  "description": "Wait for a key press (single key)...",
  "scope": "",
  "body": [ "tui::waitForKeyPress$0" ]
},

"tui::waitForKeyPress#withdoc": {
  "prefix": "tui::waitForKeyPress#withdoc",
  "description": "Wait for a key press (single key)...",
  "scope": "",
  "body": [ "# Wait for a key press (single key)\ntui::waitForKeyPress$0" ]
},

"version::bump": {
  "prefix": "version::bump",
  "description": "This function allows to bump a semantic version formatted like: major...",
  "scope": "",
  "body": [ "version::bump$0" ]
},

"version::bump#withdoc": {
  "prefix": "version::bump#withdoc",
  "description": "This function allows to bump a semantic version formatted like: major...",
  "scope": "",
  "body": [ "# This function allows to bump a semantic version formatted like: major\nversion::bump$0" ]
},

"version::compare": {
  "prefix": "version::compare",
  "description": "This function allows to compare two semantic versions formatted like: major...",
  "scope": "",
  "body": [ "version::compare$0" ]
},

"version::compare#withdoc": {
  "prefix": "version::compare#withdoc",
  "description": "This function allows to compare two semantic versions formatted like: major...",
  "scope": "",
  "body": [ "# This function allows to compare two semantic versions formatted like: major\nversion::compare$0" ]
},

"windows::addToPath": {
  "prefix": "windows::addToPath",
  "description": "Add the given path to the PATH environment variable on Windows (current user only)...",
  "scope": "",
  "body": [ "windows::addToPath$0" ]
},

"windows::addToPath#withdoc": {
  "prefix": "windows::addToPath#withdoc",
  "description": "Add the given path to the PATH environment variable on Windows (current user only)...",
  "scope": "",
  "body": [ "# Add the given path to the PATH environment variable on Windows (current user only)\nwindows::addToPath$0" ]
},

"windows::convertPathFromUnix": {
  "prefix": "windows::convertPathFromUnix",
  "description": "Convert a unix path to a Windows path...",
  "scope": "",
  "body": [ "windows::convertPathFromUnix$0" ]
},

"windows::convertPathFromUnix#withdoc": {
  "prefix": "windows::convertPathFromUnix#withdoc",
  "description": "Convert a unix path to a Windows path...",
  "scope": "",
  "body": [ "# Convert a unix path to a Windows path\nwindows::convertPathFromUnix$0" ]
},

"windows::convertPathToUnix": {
  "prefix": "windows::convertPathToUnix",
  "description": "Convert a Windows path to a unix path...",
  "scope": "",
  "body": [ "windows::convertPathToUnix$0" ]
},

"windows::convertPathToUnix#withdoc": {
  "prefix": "windows::convertPathToUnix#withdoc",
  "description": "Convert a Windows path to a unix path...",
  "scope": "",
  "body": [ "# Convert a Windows path to a unix path\nwindows::convertPathToUnix$0" ]
},

"windows::createLink": {
  "prefix": "windows::createLink",
  "description": "Create a soft or hard link (original ← link)...",
  "scope": "",
  "body": [ "windows::createLink$0" ]
},

"windows::createLink#withdoc": {
  "prefix": "windows::createLink#withdoc",
  "description": "Create a soft or hard link (original ← link)...",
  "scope": "",
  "body": [ "# Create a soft or hard link (original ← link)\nwindows::createLink$0" ]
},

"windows::createTempDirectory": {
  "prefix": "windows::createTempDirectory",
  "description": "Create a temporary directory on Windows and return the path both for Windows and Unix...",
  "scope": "",
  "body": [ "windows::createTempDirectory$0" ]
},

"windows::createTempDirectory#withdoc": {
  "prefix": "windows::createTempDirectory#withdoc",
  "description": "Create a temporary directory on Windows and return the path both for Windows and Unix...",
  "scope": "",
  "body": [ "# Create a temporary directory on Windows and return the path both for Windows and Unix\nwindows::createTempDirectory$0" ]
},

"windows::createTempFile": {
  "prefix": "windows::createTempFile",
  "description": "Create a temporary file on Windows and return the path both for Windows and Unix...",
  "scope": "",
  "body": [ "windows::createTempFile$0" ]
},

"windows::createTempFile#withdoc": {
  "prefix": "windows::createTempFile#withdoc",
  "description": "Create a temporary file on Windows and return the path both for Windows and Unix...",
  "scope": "",
  "body": [ "# Create a temporary file on Windows and return the path both for Windows and Unix\nwindows::createTempFile$0" ]
},

"windows::endPs1Batch": {
  "prefix": "windows::endPs1Batch",
  "description": "This function will run all the commands that were batched with `windows::startPs1Batch`...",
  "scope": "",
  "body": [ "windows::endPs1Batch$0" ]
},

"windows::endPs1Batch#withdoc": {
  "prefix": "windows::endPs1Batch#withdoc",
  "description": "This function will run all the commands that were batched with `windows::startPs1Batch`...",
  "scope": "",
  "body": [ "# This function will run all the commands that were batched with `windows::startPs1Batch`\nwindows::endPs1Batch$0" ]
},

"windows::getEnvVar": {
  "prefix": "windows::getEnvVar",
  "description": "Get the value of an environment variable for the current user on Windows...",
  "scope": "",
  "body": [ "windows::getEnvVar$0" ]
},

"windows::getEnvVar#withdoc": {
  "prefix": "windows::getEnvVar#withdoc",
  "description": "Get the value of an environment variable for the current user on Windows...",
  "scope": "",
  "body": [ "# Get the value of an environment variable for the current user on Windows\nwindows::getEnvVar$0" ]
},

"windows::runPs1": {
  "prefix": "windows::runPs1",
  "description": "Runs a PowerShell command...",
  "scope": "",
  "body": [ "windows::runPs1$0" ]
},

"windows::runPs1#withdoc": {
  "prefix": "windows::runPs1#withdoc",
  "description": "Runs a PowerShell command...",
  "scope": "",
  "body": [ "# Runs a PowerShell command\nwindows::runPs1$0" ]
},

"windows::setEnvVar": {
  "prefix": "windows::setEnvVar",
  "description": "Set an environment variable for the current user on Windows...",
  "scope": "",
  "body": [ "windows::setEnvVar$0" ]
},

"windows::setEnvVar#withdoc": {
  "prefix": "windows::setEnvVar#withdoc",
  "description": "Set an environment variable for the current user on Windows...",
  "scope": "",
  "body": [ "# Set an environment variable for the current user on Windows\nwindows::setEnvVar$0" ]
},

"windows::startPs1Batch": {
  "prefix": "windows::startPs1Batch",
  "description": "After running this function, all commands that should be executed by `windows::runPs1` will be added to a batch that will only be played when `windows::endPs1Batch` is called...",
  "scope": "",
  "body": [ "windows::startPs1Batch$0" ]
},

"windows::startPs1Batch#withdoc": {
  "prefix": "windows::startPs1Batch#withdoc",
  "description": "After running this function, all commands that should be executed by `windows::runPs1` will be added to a batch that will only be played when `windows::endPs1Batch` is called...",
  "scope": "",
  "body": [ "# After running this function, all commands that should be executed by `windows::runPs1` will be added to a batch that will only be played when `windows::endPs1Batch` is called\nwindows::startPs1Batch$0" ]
},
	"[[:digit:]]": {
		"prefix": "[[:digit:]]",
		"description": "Regex digits, similar to [0-9]",
		"scope": "",
		"body": [
			"[[:digit:]]"
		]
	},
	"[[:xdigit:]]": {
		"prefix": "[[:xdigit:]]",
		"description": "Regex hexadecimal digits, similar to [0-9A-Fa-f]",
		"scope": "",
		"body": [
			"[[:xdigit:]]"
		]
	},
	"[[:punct:]]": {
		"prefix": "[[:punct:]]",
		"description": "Regex punctuation, similar to [.,!?:…]",
		"scope": "",
		"body": [
			"[[:punct:]]"
		]
	},
	"[[:blank:]]": {
		"prefix": "[[:blank:]]",
		"description": "Regex space and TAB characters only, similar to [ \\t]",
		"scope": "",
		"body": [
			"[[:blank:]]"
		]
	},
	"[[:space:]]": {
		"prefix": "[[:space:]]",
		"description": "Regex blank (whitespace) characters, similar to [ \\t\\n\\r\\f\\v]",
		"scope": "",
		"body": [
			"[[:space:]]"
		]
	},
	"[[:cntrl:]]": {
		"prefix": "[[:cntrl:]]",
		"description": "Regex control characters",
		"scope": "",
		"body": [
			"[[:cntrl:]]"
		]
	},
	"[[:graph:]]": {
		"prefix": "[[:graph:]]",
		"description": "Regex printed characters, similar to [^\\t\\n\\r\\f\\v]",
		"scope": "",
		"body": [
			"[[:graph:]]"
		]
	},
	"[[:print:]]": {
		"prefix": "[[:print:]]",
		"description": "Regex printed characters and space, similar to [^ \\t\\n\\r\\f\\v]",
		"scope": "",
		"body": [
			"[[:print:]]"
		]
	},
	"[[:alnum:]]": {
		"prefix": "[[:alnum:]]",
		"description": "Regex digits, upper- and lowercase letters, similar to [[:alpha:][:digit:]]",
		"scope": "",
		"body": [
			"[[:alnum:]]$0"
		]
	},
	"[[:alpha:]]": {
		"prefix": "[[:alpha:]]",
		"description": "Regex upper- and lowercase letters, similar to [[:upper:][:lower:]]",
		"scope": "",
		"body": [
			"[[:alpha:]]$0"
		]
	},
	"[[:lower:]]": {
		"prefix": "[[:lower:]]",
		"description": "Regex lowercase letters, similar to [a-z]",
		"scope": "",
		"body": [
			"[[:lower:]]$0"
		]
	},
	"[[:upper:]]": {
		"prefix": [
			"[[:upper:]]",
			"regex [[:upper:]]"
		],
		"description": "Regex uppercase letters , similar to [A-Z]",
		"scope": "",
		"body": [
			"[[:upper:]]$0"
		]
	},
	"set bash options": {
		"prefix": "set bash options",
		"description": "Set good bash options",
		"scope": "",
		"body": [
			"set -Eeu -o pipefail$0"
		]
	},
	"new command alt": {
		"prefix": "new command alt",
		"description": "A new command alternative definition for Valet",
		"scope": "",
		"body": [
			"##<<VALET_COMMAND",
			"# command: $1",
			"# function: $2",
			"# shortDescription: A short sentence.",
			"# description: |-",
			"#   A long description that can use ⌜quotes⌝.",
			"# sudo: false",
			"# hideInMenu: false",
			"# arguments:",
			"# - name: firstArg",
			"#   description: |-",
			"#     First argument.",
			"# - name: more...",
			"#   description: |-",
			"#     Will be an an array of strings.",
			"# options:",
			"# - name: -o, --option1",
			"#   description: |-",
			"#     First option.",
			"#   noEnvironmentVariable: true",
			"# - name: -2, --this-is-option2 <level>",
			"#   description: |-",
			"#     An option with a value.",
			"#   noEnvironmentVariable: false",
			"# examples:",
			"# - name: command -o -2 value1 arg1 more1 more2",
			"#   description: |-",
			"#     Call command with option1, option2 and some arguments.",
			"##VALET_COMMAND",
			"function $2() {",
			"  command::parseArguments \"$@\" && eval \"${RETURNED_VALUE}\"",
			"  command::checkParsedResults \"${help:-}\" \"${commandArgumentsErrors:-}\"",
			"  $0",
			"}"
		]
	},
	"new command": {
		"prefix": "new command",
		"description": "A new command definition for Valet",
		"scope": "",
		"body": [
			": \"---",
			"command: $1",
			"function: $2",
			"shortDescription: A short sentence.",
			"description: |-",
			"  A long description that can use ⌜quotes⌝.",
			"sudo: false",
			"hideInMenu: false",
			"arguments:",
			"- name: firstArg",
			"  description: |-",
			"    First argument.",
			"- name: more...",
			"  description: |-",
			"    Will be an an array of strings.",
			"options:",
			"- name: -o, --option1",
			"  description: |-",
			"    First option.",
			"  noEnvironmentVariable: true",
			"- name: -2, --this-is-option2 <level>",
			"  description: |-",
			"    An option with a value.",
			"  noEnvironmentVariable: false",
			"examples:",
			"- name: command -o -2 value1 arg1 more1 more2",
			"  description: |-",
			"    Call command with option1, option2 and some arguments.",
			": \"---",
			"function $2() {",
			"  command::parseArguments \"$@\" && eval \"${RETURNED_VALUE}\"",
			"  command::checkParsedResults \"${help:-}\" \"${commandArgumentsErrors:-}\"",
			"  $0",
			"}"
		]
	},
	"comment section": {
		"prefix": "comment section",
		"description": "",
		"scope": "",
		"body": [
			"#===============================================================",
			"# >>> $1",
			"#===============================================================",
			"$0"
		]
	},
	"quote": {
		"prefix": "quote",
		"description": "",
		"scope": "",
		"body": [
			"⌜$1⌝$0"
		]
	},
	"read file to array and loop": {
		"prefix": "read file to array and loop",
		"description": "Read file to array and loop",
		"scope": "",
		"body": [
			"readarray -d $'\\n' fileLines < file",
			"for myString in \"${fileLines[@]}\"; do",
			"  # the difference is also that myString will end with the delimiter, so you might want to remove it",
			"  # Alternatively, you can run readarray with -t but in that case you will not have an array element for empty lines",
			"  echo \"${myString%$'\\n'}\"",
			"done"
		]
	},
	"loop through lines of string": {
		"prefix": "loop through lines of string",
		"description": "Loop through each line of a string (keep empty lines)",
		"scope": "",
		"body": [
			"while read -r line; do",
			"  echo \"${line}\"",
			"done <<< \"${var1}\""
		]
	},
	"loop through lines of string (for)": {
		"prefix": "loop through lines of string (for)",
		"description": "Loop through each line of a string (does not keep empty lines)",
		"scope": "",
		"body": [
			"local IFS=$'\\n'",
			"for line in ${var1}; do",
			"  echo \"${line}\"",
			"done"
		]
	},
	"read file loop on all lines": {
		"prefix": "read file loop on all lines",
		"description": "Read a file, line by line",
		"scope": "",
		"body": [
			"while read -r line || [[ -n ${line:-} ]]; do",
			"  echo \"${line}\"",
			"done < file"
		]
	},
	"source": {
		"prefix": "source",
		"description": "Source a file for Valet, add the necessary comment for shellcheck.",
		"scope": "",
		"body": [
			"# shellcheck source=../lib-valet",
			"source $1",
			"$0",
			""
		]
	},
	"RETURNED_VALUE": {
		"prefix": "RETURNED_VALUE",
		"description": "",
		"scope": "",
		"body": [
			"RETURNED_VALUE$0"
		]
	},
	"RETURNED_VALUE2": {
		"prefix": "RETURNED_VALUE2",
		"description": "",
		"scope": "",
		"body": [
			"RETURNED_VALUE2$0"
		]
	},
	"RETURNED_VALUE3": {
		"prefix": "RETURNED_VALUE3",
		"description": "",
		"scope": "",
		"body": [
			"RETURNED_VALUE3$0"
		]
	},
	"RETURNED_ARRAY": {
		"prefix": "RETURNED_ARRAY",
		"description": "",
		"scope": "",
		"body": [
			"RETURNED_ARRAY$0"
		]
	},
	"RETURNED_ARRAY2": {
		"prefix": "RETURNED_ARRAY2",
		"description": "",
		"scope": "",
		"body": [
			"RETURNED_ARRAY2$0"
		]
	},
	"RETURNED_ARRAY3": {
		"prefix": "RETURNED_ARRAY3",
		"description": "",
		"scope": "",
		"body": [
			"RETURNED_ARRAY3$0"
		]
	},
	"RETURNED_ASSOCIATIVE_ARRAY": {
		"prefix": "RETURNED_ASSOCIATIVE_ARRAY",
		"description": "",
		"scope": "",
		"body": [
			"RETURNED_ASSOCIATIVE_ARRAY$0"
		]
	},
	"IFS": {
		"prefix": "IFS",
		"description": "A list of characters that separate fields; used when the shell splits words as part of expansion. ",
		"scope": "",
		"body": [
			"IFS$0"
		]
	},
	"$GLOBAL_COLUMNS": {
		"prefix": "$GLOBAL_COLUMNS",
		"description": "The current number or columns displayed by the terminal, refresh by interactive::getTerminalSize on resize.",
		"scope": "",
		"body": [
			"\\${GLOBAL_COLUMNS}$0"
		]
	},
	"$GLOBAL_LINES": {
		"prefix": "$GLOBAL_LINES",
		"description": "The current number or lines displayed by the terminal, refresh by interactive::getTerminalSize on resize.",
		"scope": "",
		"body": [
			"\\${GLOBAL_LINES}$0"
		]
	},
	"$GLOBAL_CURSOR_LINE": {
		"prefix": "$GLOBAL_CURSOR_LINE",
		"description": "The position of the cursor. You need to refresh it by calling interactive::getCursorPosition.",
		"scope": "",
		"body": [
			"\\${GLOBAL_CURSOR_LINE}$0"
		]
	},
	"$GLOBAL_CURSOR_COLUMN": {
		"prefix": "$GLOBAL_CURSOR_COLUMN",
		"description": "The position of the cursor. You need to refresh it by calling interactive::getCursorPosition.",
		"scope": "",
		"body": [
			"\\${GLOBAL_CURSOR_COLUMN}$0"
		]
	},
	"$GLOBAL_TEST_TEMP_FILE": {
		"prefix": "$GLOBAL_TEST_TEMP_FILE",
		"description": "The path to a temporary file that can be used during tests.",
		"scope": "",
		"body": [
			"\\${GLOBAL_TEST_TEMP_FILE}$0"
		]
	},
	"$GLOBAL_SCREEN_REDRAW_REQUIRED": {
		"prefix": "$GLOBAL_SCREEN_REDRAW_REQUIRED",
		"description": "Set to true when the terminal size changes, set it to false when you handle this event.",
		"scope": "",
		"body": [
			"\\${GLOBAL_SCREEN_REDRAW_REQUIRED}$0"
		]
	},
	"$GLOBAL_SESSION_INTERRUPTED": {
		"prefix": "$GLOBAL_SESSION_INTERRUPTED",
		"description": "Set to true when the user presses CTRL+C during an interactive experience.",
		"scope": "",
		"body": [
			"\\${GLOBAL_SESSION_INTERRUPTED}$0"
		]
	},
	"$LAST_KEY_PRESSED": {
		"prefix": "$LAST_KEY_PRESSED",
		"description": "",
		"scope": "",
		"body": [
			"\\${LAST_KEY_PRESSED}$0"
		]
	},
	"$RETURNED_VALUE": {
		"prefix": "$RETURNED_VALUE",
		"description": "",
		"scope": "",
		"body": [
			"\\${RETURNED_VALUE}$0"
		]
	},
	"$RETURNED_VALUE2": {
		"prefix": "$RETURNED_VALUE2",
		"description": "",
		"scope": "",
		"body": [
			"\\${RETURNED_VALUE2}$0"
		]
	},
	"$RETURNED_VALUE3": {
		"prefix": "$RETURNED_VALUE3",
		"description": "",
		"scope": "",
		"body": [
			"\\${RETURNED_VALUE3}$0"
		]
	},
	"$RETURNED_ARRAY": {
		"prefix": "$RETURNED_ARRAY",
		"description": "",
		"scope": "",
		"body": [
			"\\${RETURNED_ARRAY}$0"
		]
	},
	"$RETURNED_ARRAY2": {
		"prefix": "$RETURNED_ARRAY2",
		"description": "",
		"scope": "",
		"body": [
			"\\${RETURNED_ARRAY2}$0"
		]
	},
	"$RETURNED_ARRAY3": {
		"prefix": "$RETURNED_ARRAY3",
		"description": "",
		"scope": "",
		"body": [
			"\\${RETURNED_ARRAY3}$0"
		]
	},
	"$RETURNED_ASSOCIATIVE_ARRAY": {
		"prefix": "$RETURNED_ASSOCIATIVE_ARRAY",
		"description": "",
		"scope": "",
		"body": [
			"\\${RETURNED_ASSOCIATIVE_ARRAY}$0"
		]
	},
	"$BASHOPTS": {
		"prefix": "$BASHOPTS",
		"body": [
			"\\${BASHOPTS}$0"
		],
		"scope": "",
		"description": "A colon-separated list of enabled shell options. Each word in the list is a valid argument for the -s option to the shopt builtin command (see The Shopt Builtin). The options appearing in BASHOPTS are those reported as ‘on’ by ‘shopt’. If this variable is in the environment when Bash starts up, each shell option in the list will be enabled before reading any startup files. This variable is readonly."
	},
	"$BASHPID": {
		"prefix": "$BASHPID",
		"body": [
			"\\${BASHPID}$0"
		],
		"scope": "",
		"description": "Expands to the process ID of the current Bash process. This differs from $$ under certain circumstances, such as subshells that do not require Bash to be re-initialized. Assignments to BASHPID have no effect. If BASHPID is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$BASH_ALIASES": {
		"prefix": "$BASH_ALIASES",
		"body": [
			"\\${BASH_ALIASES}$0"
		],
		"scope": "",
		"description": "An associative array variable whose members correspond to the internal list of aliases as maintained by the alias builtin. (see Bourne Shell Builtins). Elements added to this array appear in the alias list; however, unsetting array elements currently does not cause aliases to be removed from the alias list. If BASH_ALIASES is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$BASH_ARGC": {
		"prefix": "$BASH_ARGC",
		"body": [
			"\\${BASH_ARGC}$0"
		],
		"scope": "",
		"description": "An array variable whose values are the number of parameters in each frame of the current bash execution call stack. The number of parameters to the current subroutine (shell function or script executed with . or source) is at the top of the stack. When a subroutine is executed, the number of parameters passed is pushed onto BASH_ARGC. The shell sets BASH_ARGC only when in extended debugging mode (see The Shopt Builtin for a description of the extdebug option to the shopt builtin). Setting extdebug after the shell has started to execute a script, or referencing this variable when extdebug is not set, may result in inconsistent values."
	},
	"$BASH_ARGV": {
		"prefix": "$BASH_ARGV",
		"body": [
			"\\${BASH_ARGV}$0"
		],
		"scope": "",
		"description": "An array variable containing all of the parameters in the current bash execution call stack. The final parameter of the last subroutine call is at the top of the stack; the first parameter of the initial call is at the bottom. When a subroutine is executed, the parameters supplied are pushed onto BASH_ARGV. The shell sets BASH_ARGV only when in extended debugging mode (see The Shopt Builtin for a description of the extdebug option to the shopt builtin). Setting extdebug after the shell has started to execute a script, or referencing this variable when extdebug is not set, may result in inconsistent values."
	},
	"$BASH_ARGV0": {
		"prefix": "$BASH_ARGV0",
		"body": [
			"\\${BASH_ARGV0}$0"
		],
		"scope": "",
		"description": "When referenced, this variable expands to the name of the shell or shell script (identical to $0; See Special Parameters, for the description of special parameter 0). Assignment to BASH_ARGV0 causes the value assigned to also be assigned to $0. If BASH_ARGV0 is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$BASH_CMDS": {
		"prefix": "$BASH_CMDS",
		"body": [
			"\\${BASH_CMDS}$0"
		],
		"scope": "",
		"description": "An associative array variable whose members correspond to the internal hash table of commands as maintained by the hash builtin (see Bourne Shell Builtins). Elements added to this array appear in the hash table; however, unsetting array elements currently does not cause command names to be removed from the hash table. If BASH_CMDS is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$BASH_COMMAND": {
		"prefix": "$BASH_COMMAND",
		"body": [
			"\\${BASH_COMMAND}$0"
		],
		"scope": "",
		"description": "The command currently being executed or about to be executed, unless the shell is executing a command as the result of a trap, in which case it is the command executing at the time of the trap. If BASH_COMMAND is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$BASH_COMPAT": {
		"prefix": "$BASH_COMPAT",
		"body": [
			"\\${BASH_COMPAT}$0"
		],
		"scope": "",
		"description": "The value is used to set the shell’s compatibility level. See Shell Compatibility Mode, for a description of the various compatibility levels and their effects. The value may be a decimal number (e.g., 4.2) or an integer (e.g., 42) corresponding to the desired compatibility level. If BASH_COMPAT is unset or set to the empty string, the compatibility level is set to the default for the current version. If BASH_COMPAT is set to a value that is not one of the valid compatibility levels, the shell prints an error message and sets the compatibility level to the default for the current version. The valid values correspond to the compatibility levels described below (see Shell Compatibility Mode). For example, 4.2 and 42 are valid values that correspond to the compat42 shopt option and set the compatibility level to 42. The current version is also a valid value."
	},
	"$BASH_ENV": {
		"prefix": "$BASH_ENV",
		"body": [
			"\\${BASH_ENV}$0"
		],
		"scope": "",
		"description": "If this variable is set when Bash is invoked to execute a shell script, its value is expanded and used as the name of a startup file to read before executing the script. See Bash Startup Files."
	},
	"$BASH_EXECUTION_STRING": {
		"prefix": "$BASH_EXECUTION_STRING",
		"body": [
			"\\${BASH_EXECUTION_STRING}$0"
		],
		"scope": "",
		"description": "The command argument to the -c invocation option."
	},
	"$BASH_LINENO": {
		"prefix": "$BASH_LINENO",
		"body": [
			"\\${BASH_LINENO}$0"
		],
		"scope": "",
		"description": "An array variable whose members are the line numbers in source files where each corresponding member of FUNCNAME was invoked. ${BASH_LINENO[$i]} is the line number in the source file (${BASH_SOURCE[$i+1]}) where ${FUNCNAME[$i]} was called (or ${BASH_LINENO[$i-1]} if referenced within another shell function). Use LINENO to obtain the current line number."
	},
	"$BASH_LOADABLES_PATH": {
		"prefix": "$BASH_LOADABLES_PATH",
		"body": [
			"\\${BASH_LOADABLES_PATH}$0"
		],
		"scope": "",
		"description": "A colon-separated list of directories in which the shell looks for dynamically loadable builtins specified by the enable command."
	},
	"$BASH_REMATCH": {
		"prefix": "$BASH_REMATCH",
		"body": [
			"\\${BASH_REMATCH}$0"
		],
		"scope": "",
		"description": "An array variable whose members are assigned by the ‘=~’ binary operator to the [[ conditional command (see Conditional Constructs). The element with index 0 is the portion of the string matching the entire regular expression. The element with index n is the portion of the string matching the nth parenthesized subexpression."
	},
	"$BASH_SOURCE": {
		"prefix": "$BASH_SOURCE",
		"body": [
			"\\${BASH_SOURCE}$0"
		],
		"scope": "",
		"description": "An array variable whose members are the source filenames where the corresponding shell function names in the FUNCNAME array variable are defined. The shell function ${FUNCNAME[$i]} is defined in the file ${BASH_SOURCE[$i]} and called from ${BASH_SOURCE[$i+1]}"
	},
	"$BASH_SUBSHELL": {
		"prefix": "$BASH_SUBSHELL",
		"body": [
			"\\${BASH_SUBSHELL}$0"
		],
		"scope": "",
		"description": "Incremented by one within each subshell or subshell environment when the shell begins executing in that environment. The initial value is 0. If BASH_SUBSHELL is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$BASH_VERSINFO": {
		"prefix": "$BASH_VERSINFO",
		"body": [
			"\\${BASH_VERSINFO}$0"
		],
		"scope": "",
		"description": "A readonly array variable (see Arrays) whose members hold version information for this instance of Bash. The values assigned to the array members are as follows:"
	},
	"$BASH_VERSINFO[0]": {
		"prefix": "$BASH_VERSINFO[0]",
		"body": [
			"\\${BASH_VERSINFO[0]}$0"
		],
		"scope": "",
		"description": "The major version number (the release)."
	},
	"$BASH_VERSINFO[1]": {
		"prefix": "$BASH_VERSINFO[1]",
		"body": [
			"\\${BASH_VERSINFO[1]}$0"
		],
		"scope": "",
		"description": "The minor version number (the version)."
	},
	"$BASH_VERSINFO[2]": {
		"prefix": "$BASH_VERSINFO[2]",
		"body": [
			"\\${BASH_VERSINFO[2]}$0"
		],
		"scope": "",
		"description": "The patch level."
	},
	"$BASH_VERSINFO[3]": {
		"prefix": "$BASH_VERSINFO[3]",
		"body": [
			"\\${BASH_VERSINFO[3]}$0"
		],
		"scope": "",
		"description": "The build version."
	},
	"$BASH_VERSINFO[4]": {
		"prefix": "$BASH_VERSINFO[4]",
		"body": [
			"\\${BASH_VERSINFO[4]}$0"
		],
		"scope": "",
		"description": "The release status (e.g., beta1)."
	},
	"$BASH_VERSINFO[5]": {
		"prefix": "$BASH_VERSINFO[5]",
		"body": [
			"\\${BASH_VERSINFO[5]}$0"
		],
		"scope": "",
		"description": "The value of MACHTYPE. "
	},
	"$BASH_VERSION": {
		"prefix": "$BASH_VERSION",
		"body": [
			"\\${BASH_VERSION}$0"
		],
		"scope": "",
		"description": "The version number of the current instance of Bash."
	},
	"$BASH_XTRACEFD": {
		"prefix": "$BASH_XTRACEFD",
		"body": [
			"\\${BASH_XTRACEFD}$0"
		],
		"scope": "",
		"description": "If set to an integer corresponding to a valid file descriptor, Bash will write the trace output generated when ‘set -x’ is enabled to that file descriptor. This allows tracing output to be separated from diagnostic and error messages. The file descriptor is closed when BASH_XTRACEFD is unset or assigned a new value. Unsetting BASH_XTRACEFD or assigning it the empty string causes the trace output to be sent to the standard error. Note that setting BASH_XTRACEFD to 2 (the standard error file descriptor) and then unsetting it will result in the standard error being closed."
	},
	"$CHILD_MAX": {
		"prefix": "$CHILD_MAX",
		"body": [
			"\\${CHILD_MAX}$0"
		],
		"scope": "",
		"description": "Set the number of exited child status values for the shell to remember. Bash will not allow this value to be decreased below a POSIX-mandated minimum, and there is a maximum value (currently 8192) that this may not exceed. The minimum value is system-dependent."
	},
	"$COLUMNS": {
		"prefix": "$COLUMNS",
		"body": [
			"\\${COLUMNS}$0"
		],
		"scope": "",
		"description": "Used by the select command to determine the terminal width when printing selection lists. Automatically set if the checkwinsize option is enabled (see The Shopt Builtin), or in an interactive shell upon receipt of a SIGWINCH."
	},
	"$COMP_CWORD": {
		"prefix": "$COMP_CWORD",
		"body": [
			"\\${COMP_CWORD}$0"
		],
		"scope": "",
		"description": "An index into ${COMP_WORDS} of the word containing the current cursor position. This variable is available only in shell functions invoked by the programmable completion facilities (see Programmable Completion)."
	},
	"$COMP_LINE": {
		"prefix": "$COMP_LINE",
		"body": [
			"\\${COMP_LINE}$0"
		],
		"scope": "",
		"description": "The current command line. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see Programmable Completion)."
	},
	"$COMP_POINT": {
		"prefix": "$COMP_POINT",
		"body": [
			"\\${COMP_POINT}$0"
		],
		"scope": "",
		"description": "The index of the current cursor position relative to the beginning of the current command. If the current cursor position is at the end of the current command, the value of this variable is equal to ${#COMP_LINE}. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see Programmable Completion)."
	},
	"$COMP_TYPE": {
		"prefix": "$COMP_TYPE",
		"body": [
			"\\${COMP_TYPE}$0"
		],
		"scope": "",
		"description": "Set to an integer value corresponding to the type of completion attempted that caused a completion function to be called: TAB, for normal completion, ‘?’, for listing completions after successive tabs, ‘!’, for listing alternatives on partial word completion, ‘@’, to list completions if the word is not unmodified, or ‘%’, for menu completion. This variable is available only in shell functions and external commands invoked by the programmable completion facilities (see Programmable Completion)."
	},
	"$COMP_KEY": {
		"prefix": "$COMP_KEY",
		"body": [
			"\\${COMP_KEY}$0"
		],
		"scope": "",
		"description": "The key (or final key of a key sequence) used to invoke the current completion function."
	},
	"$COMP_WORDBREAKS": {
		"prefix": "$COMP_WORDBREAKS",
		"body": [
			"\\${COMP_WORDBREAKS}$0"
		],
		"scope": "",
		"description": "The set of characters that the Readline library treats as word separators when performing word completion. If COMP_WORDBREAKS is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$COMP_WORDS": {
		"prefix": "$COMP_WORDS",
		"body": [
			"\\${COMP_WORDS}$0"
		],
		"scope": "",
		"description": "An array variable consisting of the individual words in the current command line. The line is split into words as Readline would split it, using COMP_WORDBREAKS as described above. This variable is available only in shell functions invoked by the programmable completion facilities (see Programmable Completion)."
	},
	"$COMPREPLY": {
		"prefix": "$COMPREPLY",
		"body": [
			"\\${COMPREPLY}$0"
		],
		"scope": "",
		"description": "An array variable from which Bash reads the possible completions generated by a shell function invoked by the programmable completion facility (see Programmable Completion). Each array element contains one possible completion."
	},
	"$COPROC": {
		"prefix": "$COPROC",
		"body": [
			"\\${COPROC}$0"
		],
		"scope": "",
		"description": "An array variable created to hold the file descriptors for output from and input to an unnamed coprocess (see Coprocesses)."
	},
	"$DIRSTACK": {
		"prefix": "$DIRSTACK",
		"body": [
			"\\${DIRSTACK}$0"
		],
		"scope": "",
		"description": "An array variable containing the current contents of the directory stack. Directories appear in the stack in the order they are displayed by the dirs builtin. Assigning to members of this array variable may be used to modify directories already in the stack, but the pushd and popd builtins must be used to add and remove directories. Assignment to this variable will not change the current directory. If DIRSTACK is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$EMACS": {
		"prefix": "$EMACS",
		"body": [
			"\\${EMACS}$0"
		],
		"scope": "",
		"description": "If Bash finds this variable in the environment when the shell starts with value ‘t’, it assumes that the shell is running in an Emacs shell buffer and disables line editing."
	},
	"$ENV": {
		"prefix": "$ENV",
		"body": [
			"\\${ENV}$0"
		],
		"scope": "",
		"description": "Expanded and executed similarly to BASH_ENV (see Bash Startup Files) when an interactive shell is invoked in POSIX Mode (see Bash POSIX Mode)."
	},
	"$EPOCHREALTIME": {
		"prefix": "$EPOCHREALTIME",
		"body": [
			"\\${EPOCHREALTIME}$0"
		],
		"scope": "",
		"description": "Each time this parameter is referenced, it expands to the number of seconds since the Unix Epoch as a floating point value with micro-second granularity (see the documentation for the C library function time for the definition of Epoch). Assignments to EPOCHREALTIME are ignored. If EPOCHREALTIME is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$EPOCHSECONDS": {
		"prefix": "$EPOCHSECONDS",
		"body": [
			"\\${EPOCHSECONDS}$0"
		],
		"scope": "",
		"description": "Each time this parameter is referenced, it expands to the number of seconds since the Unix Epoch (see the documentation for the C library function time for the definition of Epoch). Assignments to EPOCHSECONDS are ignored. If EPOCHSECONDS is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$EUID": {
		"prefix": "$EUID",
		"body": [
			"\\${EUID}$0"
		],
		"scope": "",
		"description": "The numeric effective user id of the current user. This variable is readonly."
	},
	"$EXECIGNORE": {
		"prefix": "$EXECIGNORE",
		"body": [
			"\\${EXECIGNORE}$0"
		],
		"scope": "",
		"description": "A colon-separated list of shell patterns (see Pattern Matching) defining the list of filenames to be ignored by command search using PATH. Files whose full pathnames match one of these patterns are not considered executable files for the purposes of completion and command execution via PATH lookup. This does not affect the behavior of the [, test, and [[ commands. Full pathnames in the command hash table are not subject to EXECIGNORE. Use this variable to ignore shared library files that have the executable bit set, but are not executable files. The pattern matching honors the setting of the extglob shell option."
	},
	"$FCEDIT": {
		"prefix": "$FCEDIT",
		"body": [
			"\\${FCEDIT}$0"
		],
		"scope": "",
		"description": "The editor used as a default by the -e option to the fc builtin command."
	},
	"$FIGNORE": {
		"prefix": "$FIGNORE",
		"body": [
			"\\${FIGNORE}$0"
		],
		"scope": "",
		"description": "A colon-separated list of suffixes to ignore when performing filename completion. A filename whose suffix matches one of the entries in FIGNORE is excluded from the list of matched filenames. A sample value is ‘.o:~’"
	},
	"$FUNCNAME": {
		"prefix": "$FUNCNAME",
		"body": [
			"\\${FUNCNAME}$0"
		],
		"scope": "",
		"description": "An array variable containing the names of all shell functions currently in the execution call stack. The element with index 0 is the name of any currently-executing shell function. The bottom-most element (the one with the highest index) is main. This variable exists only when a shell function is executing. Assignments to FUNCNAME have no effect. If FUNCNAME is unset, it loses its special properties, even if it is subsequently reset. This variable can be used with BASH_LINENO and BASH_SOURCE. Each element of FUNCNAME has corresponding elements in BASH_LINENO and BASH_SOURCE to describe the call stack. For instance, ${FUNCNAME[$i]} was called from the file ${BASH_SOURCE[$i+1]} at line number ${BASH_LINENO[$i]}. The caller builtin displays the current call stack using this information."
	},
	"$FUNCNEST": {
		"prefix": "$FUNCNEST",
		"body": [
			"\\${FUNCNEST}$0"
		],
		"scope": "",
		"description": "If set to a numeric value greater than 0, defines a maximum function nesting level. Function invocations that exceed this nesting level will cause the current command to abort."
	},
	"$GLOBIGNORE": {
		"prefix": "$GLOBIGNORE",
		"body": [
			"\\${GLOBIGNORE}$0"
		],
		"scope": "",
		"description": "A colon-separated list of patterns defining the set of file names to be ignored by filename expansion. If a file name matched by a filename expansion pattern also matches one of the patterns in GLOBIGNORE, it is removed from the list of matches. The pattern matching honors the setting of the extglob shell option."
	},
	"$GROUPS": {
		"prefix": "$GROUPS",
		"body": [
			"\\${GROUPS}$0"
		],
		"scope": "",
		"description": "An array variable containing the list of groups of which the current user is a member. Assignments to GROUPS have no effect. If GROUPS is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$histchars": {
		"prefix": "$histchars",
		"body": [
			"\\${histchars}$0"
		],
		"scope": "",
		"description": "Up to three characters which control history expansion, quick substitution, and tokenization (see History Expansion). The first character is the history expansion character, that is, the character which signifies the start of a history expansion, normally ‘!’. The second character is the character which signifies ‘quick substitution’ when seen as the first character on a line, normally ‘^’. The optional third character is the character which indicates that the remainder of the line is a comment when found as the first character of a word, usually ‘#’. The history comment character causes history substitution to be skipped for the remaining words on the line. It does not necessarily cause the shell parser to treat the rest of the line as a comment."
	},
	"$HISTCMD": {
		"prefix": "$HISTCMD",
		"body": [
			"\\${HISTCMD}$0"
		],
		"scope": "",
		"description": "The history number, or index in the history list, of the current command. Assignments to HISTCMD are ignored. If HISTCMD is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$HISTCONTROL": {
		"prefix": "$HISTCONTROL",
		"body": [
			"\\${HISTCONTROL}$0"
		],
		"scope": "",
		"description": "A colon-separated list of values controlling how commands are saved on the history list. If the list of values includes ‘ignorespace’, lines which begin with a space character are not saved in the history list. A value of ‘ignoredups’ causes lines which match the previous history entry to not be saved. A value of ‘ignoreboth’ is shorthand for ‘ignorespace’ and ‘ignoredups’. A value of ‘erasedups’ causes all previous lines matching the current line to be removed from the history list before that line is saved. Any value not in the above list is ignored. If HISTCONTROL is unset, or does not include a valid value, all lines read by the shell parser are saved on the history list, subject to the value of HISTIGNORE. The second and subsequent lines of a multi-line compound command are not tested, and are added to the history regardless of the value of HISTCONTROL."
	},
	"$HISTFILE": {
		"prefix": "$HISTFILE",
		"body": [
			"\\${HISTFILE}$0"
		],
		"scope": "",
		"description": "The name of the file to which the command history is saved. The default value is ~/.bash_history."
	},
	"$HISTFILESIZE": {
		"prefix": "$HISTFILESIZE",
		"body": [
			"\\${HISTFILESIZE}$0"
		],
		"scope": "",
		"description": "The maximum number of lines contained in the history file. When this variable is assigned a value, the history file is truncated, if necessary, to contain no more than that number of lines by removing the oldest entries. The history file is also truncated to this size after writing it when a shell exits. If the value is 0, the history file is truncated to zero size. Non-numeric values and numeric values less than zero inhibit truncation. The shell sets the default value to the value of HISTSIZE after reading any startup files."
	},
	"$HISTIGNORE": {
		"prefix": "$HISTIGNORE",
		"body": [
			"\\${HISTIGNORE}$0"
		],
		"scope": "",
		"description": "A colon-separated list of patterns used to decide which command lines should be saved on the history list. Each pattern is anchored at the beginning of the line and must match the complete line (no implicit ‘*’ is appended). Each pattern is tested against the line after the checks specified by HISTCONTROL are applied. In addition to the normal shell pattern matching characters, ‘&’ matches the previous history line. ‘&’ may be escaped using a backslash; the backslash is removed before attempting a match. The second and subsequent lines of a multi-line compound command are not tested, and are added to the history regardless of the value of HISTIGNORE. The pattern matching honors the setting of the extglob shell option. HISTIGNORE subsumes the function of HISTCONTROL. A pattern of ‘&’ is identical to ignoredups, and a pattern of ‘[ ]*’ is identical to ignorespace. Combining these two patterns, separating them with a colon, provides the functionality of ignoreboth."
	},
	"$HISTSIZE": {
		"prefix": "$HISTSIZE",
		"body": [
			"\\${HISTSIZE}$0"
		],
		"scope": "",
		"description": "The maximum number of commands to remember on the history list. If the value is 0, commands are not saved in the history list. Numeric values less than zero result in every command being saved on the history list (there is no limit). The shell sets the default value to 500 after reading any startup files."
	},
	"$HISTTIMEFORMAT": {
		"prefix": "$HISTTIMEFORMAT",
		"body": [
			"\\${HISTTIMEFORMAT}$0"
		],
		"scope": "",
		"description": "If this variable is set and not null, its value is used as a format string for strftime to print the time stamp associated with each history entry displayed by the history builtin. If this variable is set, time stamps are written to the history file so they may be preserved across shell sessions. This uses the history comment character to distinguish timestamps from other history lines."
	},
	"$HOSTFILE": {
		"prefix": "$HOSTFILE",
		"body": [
			"\\${HOSTFILE}$0"
		],
		"scope": "",
		"description": "Contains the name of a file in the same format as /etc/hosts that should be read when the shell needs to complete a hostname. The list of possible hostname completions may be changed while the shell is running; the next time hostname completion is attempted after the value is changed, Bash adds the contents of the new file to the existing list. If HOSTFILE is set, but has no value, or does not name a readable file, Bash attempts to read /etc/hosts to obtain the list of possible hostname completions. When HOSTFILE is unset, the hostname list is cleared."
	},
	"$HOSTNAME": {
		"prefix": "$HOSTNAME",
		"body": [
			"\\${HOSTNAME}$0"
		],
		"scope": "",
		"description": "The name of the current host."
	},
	"$HOSTTYPE": {
		"prefix": "$HOSTTYPE",
		"body": [
			"\\${HOSTTYPE}$0"
		],
		"scope": "",
		"description": "A string describing the machine Bash is running on."
	},
	"$IGNOREEOF": {
		"prefix": "$IGNOREEOF",
		"body": [
			"\\${IGNOREEOF}$0"
		],
		"scope": "",
		"description": "Controls the action of the shell on receipt of an EOF character as the sole input. If set, the value denotes the number of consecutive EOF characters that can be read as the first character on an input line before the shell will exit. If the variable exists but does not have a numeric value, or has no value, then the default is 10. If the variable does not exist, then EOF signifies the end of input to the shell. This is only in effect for interactive shells."
	},
	"$INPUTRC": {
		"prefix": "$INPUTRC",
		"body": [
			"\\${INPUTRC}$0"
		],
		"scope": "",
		"description": "The name of the Readline initialization file, overriding the default of ~/.inputrc."
	},
	"$INSIDE_EMACS": {
		"prefix": "$INSIDE_EMACS",
		"body": [
			"\\${INSIDE_EMACS}$0"
		],
		"scope": "",
		"description": "If Bash finds this variable in the environment when the shell starts, it assumes that the shell is running in an Emacs shell buffer and may disable line editing depending on the value of TERM."
	},
	"$LANG": {
		"prefix": "$LANG",
		"body": [
			"\\${LANG}$0"
		],
		"scope": "",
		"description": "Used to determine the locale category for any category not specifically selected with a variable starting with LC_."
	},
	"$LC_ALL": {
		"prefix": "$LC_ALL",
		"body": [
			"\\${LC_ALL}$0"
		],
		"scope": "",
		"description": "This variable overrides the value of LANG and any other LC_ variable specifying a locale category."
	},
	"$LC_COLLATE": {
		"prefix": "$LC_COLLATE",
		"body": [
			"\\${LC_COLLATE}$0"
		],
		"scope": "",
		"description": "This variable determines the collation order used when sorting the results of filename expansion, and determines the behavior of range expressions, equivalence classes, and collating sequences within filename expansion and pattern matching (see Filename Expansion)."
	},
	"$LC_CTYPE": {
		"prefix": "$LC_CTYPE",
		"body": [
			"\\${LC_CTYPE}$0"
		],
		"scope": "",
		"description": "This variable determines the interpretation of characters and the behavior of character classes within filename expansion and pattern matching (see Filename Expansion)."
	},
	"$LC_MESSAGES": {
		"prefix": "$LC_MESSAGES",
		"body": [
			"\\${LC_MESSAGES}$0"
		],
		"scope": "",
		"description": "This variable determines the locale used to translate double-quoted strings preceded by a ‘$’ (see Locale-Specific Translation)."
	},
	"$LC_NUMERIC": {
		"prefix": "$LC_NUMERIC",
		"body": [
			"\\${LC_NUMERIC}$0"
		],
		"scope": "",
		"description": "This variable determines the locale category used for number formatting."
	},
	"$LC_TIME": {
		"prefix": "$LC_TIME",
		"body": [
			"\\${LC_TIME}$0"
		],
		"scope": "",
		"description": "This variable determines the locale category used for data and time formatting."
	},
	"$LINENO": {
		"prefix": "$LINENO",
		"body": [
			"\\${LINENO}$0"
		],
		"scope": "",
		"description": "The line number in the script or shell function currently executing. If LINENO is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$LINES": {
		"prefix": "$LINES",
		"body": [
			"\\${LINES}$0"
		],
		"scope": "",
		"description": "Used by the select command to determine the column length for printing selection lists. Automatically set if the checkwinsize option is enabled (see The Shopt Builtin), or in an interactive shell upon receipt of a SIGWINCH."
	},
	"$MACHTYPE": {
		"prefix": "$MACHTYPE",
		"body": [
			"\\${MACHTYPE}$0"
		],
		"scope": "",
		"description": "A string that fully describes the system type on which Bash is executing, in the standard GNU cpu-company-system format."
	},
	"$MAILCHECK": {
		"prefix": "$MAILCHECK",
		"body": [
			"\\${MAILCHECK}$0"
		],
		"scope": "",
		"description": "How often (in seconds) that the shell should check for mail in the files specified in the MAILPATH or MAIL variables. The default is 60 seconds. When it is time to check for mail, the shell does so before displaying the primary prompt. If this variable is unset, or set to a value that is not a number greater than or equal to zero, the shell disables mail checking."
	},
	"$MAPFILE": {
		"prefix": "$MAPFILE",
		"body": [
			"\\${MAPFILE}$0"
		],
		"scope": "",
		"description": "An array variable created to hold the text read by the mapfile builtin when no variable name is supplied."
	},
	"$OLDPWD": {
		"prefix": "$OLDPWD",
		"body": [
			"\\${OLDPWD}$0"
		],
		"scope": "",
		"description": "The previous working directory as set by the cd builtin."
	},
	"$OPTERR": {
		"prefix": "$OPTERR",
		"body": [
			"\\${OPTERR}$0"
		],
		"scope": "",
		"description": "If set to the value 1, Bash displays error messages generated by the getopts builtin command."
	},
	"$OSTYPE": {
		"prefix": "$OSTYPE",
		"body": [
			"\\${OSTYPE}$0"
		],
		"scope": "",
		"description": "A string describing the operating system Bash is running on."
	},
	"$PIPESTATUS": {
		"prefix": "$PIPESTATUS",
		"body": [
			"\\${PIPESTATUS}$0"
		],
		"scope": "",
		"description": "An array variable (see Arrays) containing a list of exit status values from the processes in the most-recently-executed foreground pipeline (which may contain only a single command)."
	},
	"$POSIXLY_CORRECT": {
		"prefix": "$POSIXLY_CORRECT",
		"body": [
			"\\${POSIXLY_CORRECT}$0"
		],
		"scope": "",
		"description": "If this variable is in the environment when Bash starts, the shell enters POSIX mode (see Bash POSIX Mode) before reading the startup files, as if the --posix invocation option had been supplied. If it is set while the shell is running, Bash enables POSIX mode, as if the command set -o posix had been executed. When the shell enters POSIX mode, it sets this variable if it was not already set."
	},
	"$PPID": {
		"prefix": "$PPID",
		"body": [
			"\\${PPID}$0"
		],
		"scope": "",
		"description": "The process ID of the shell’s parent process. This variable is readonly."
	},
	"$PROMPT_COMMAND": {
		"prefix": "$PROMPT_COMMAND",
		"body": [
			"\\${PROMPT_COMMAND}$0"
		],
		"scope": "",
		"description": "If this variable is set, and is an array, the value of each set element is interpreted as a command to execute before printing the primary prompt ($PS1). If this is set but not an array variable, its value is used as a command to execute instead."
	},
	"$PROMPT_DIRTRIM": {
		"prefix": "$PROMPT_DIRTRIM",
		"body": [
			"\\${PROMPT_DIRTRIM}$0"
		],
		"scope": "",
		"description": "If set to a number greater than zero, the value is used as the number of trailing directory components to retain when expanding the \\w and \\W prompt string escapes (see Controlling the Prompt). Characters removed are replaced with an ellipsis."
	},
	"$PS0": {
		"prefix": "$PS0",
		"body": [
			"\\${PS0}$0"
		],
		"scope": "",
		"description": "The value of this parameter is expanded like PS1 and displayed by interactive shells after reading a command and before the command is executed."
	},
	"$PS3": {
		"prefix": "$PS3",
		"body": [
			"\\${PS3}$0"
		],
		"scope": "",
		"description": "The value of this variable is used as the prompt for the select command. If this variable is not set, the select command prompts with ‘#? ’"
	},
	"$PS4": {
		"prefix": "$PS4",
		"body": [
			"\\${PS4}$0"
		],
		"scope": "",
		"description": "The value of this parameter is expanded like PS1 and the expanded value is the prompt printed before the command line is echoed when the -x option is set (see The Set Builtin). The first character of the expanded value is replicated multiple times, as necessary, to indicate multiple levels of indirection. The default is ‘+ ’."
	},
	"$PWD": {
		"prefix": "$PWD",
		"body": [
			"\\${PWD}$0"
		],
		"scope": "",
		"description": "The current working directory as set by the cd builtin."
	},
	"$RANDOM": {
		"prefix": "$RANDOM",
		"body": [
			"\\${RANDOM}$0"
		],
		"scope": "",
		"description": "Each time this parameter is referenced, it expands to a random integer between 0 and 32767. Assigning a value to this variable seeds the random number generator. If RANDOM is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$READLINE_ARGUMENT": {
		"prefix": "$READLINE_ARGUMENT",
		"body": [
			"\\${READLINE_ARGUMENT}$0"
		],
		"scope": "",
		"description": "Any numeric argument given to a Readline command that was defined using ‘bind -x’ (see Bash Builtin Commands when it was invoked."
	},
	"$READLINE_LINE": {
		"prefix": "$READLINE_LINE",
		"body": [
			"\\${READLINE_LINE}$0"
		],
		"scope": "",
		"description": "The contents of the Readline line buffer, for use with ‘bind -x’ (see Bash Builtin Commands)."
	},
	"$READLINE_MARK": {
		"prefix": "$READLINE_MARK",
		"body": [
			"\\${READLINE_MARK}$0"
		],
		"scope": "",
		"description": "The position of the mark (saved insertion point) in the Readline line buffer, for use with ‘bind -x’ (see Bash Builtin Commands). The characters between the insertion point and the mark are often called the region."
	},
	"$READLINE_POINT": {
		"prefix": "$READLINE_POINT",
		"body": [
			"\\${READLINE_POINT}$0"
		],
		"scope": "",
		"description": "The position of the insertion point in the Readline line buffer, for use with ‘bind -x’ (see Bash Builtin Commands)."
	},
	"$REPLY": {
		"prefix": "$REPLY",
		"body": [
			"\\${REPLY}$0"
		],
		"scope": "",
		"description": "The default variable for the read builtin."
	},
	"$SECONDS": {
		"prefix": "$SECONDS",
		"body": [
			"\\${SECONDS}$0"
		],
		"scope": "",
		"description": "This variable expands to the number of seconds since the shell was started. Assignment to this variable resets the count to the value assigned, and the expanded value becomes the value assigned plus the number of seconds since the assignment. The number of seconds at shell invocation and the current time are always determined by querying the system clock. If SECONDS is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$SHELL": {
		"prefix": "$SHELL",
		"body": [
			"\\${SHELL}$0"
		],
		"scope": "",
		"description": "This environment variable expands to the full pathname to the shell. If it is not set when the shell starts, Bash assigns to it the full pathname of the current user’s login shell."
	},
	"$SHELLOPTS": {
		"prefix": "$SHELLOPTS",
		"body": [
			"\\${SHELLOPTS}$0"
		],
		"scope": "",
		"description": "A colon-separated list of enabled shell options. Each word in the list is a valid argument for the -o option to the set builtin command (see The Set Builtin). The options appearing in SHELLOPTS are those reported as ‘on’ by ‘set -o’. If this variable is in the environment when Bash starts up, each shell option in the list will be enabled before reading any startup files. This variable is readonly."
	},
	"$SHLVL": {
		"prefix": "$SHLVL",
		"body": [
			"\\${SHLVL}$0"
		],
		"scope": "",
		"description": "Incremented by one each time a new instance of Bash is started. This is intended to be a count of how deeply your Bash shells are nested."
	},
	"$SRANDOM": {
		"prefix": "$SRANDOM",
		"body": [
			"\\${SRANDOM}$0"
		],
		"scope": "",
		"description": "This variable expands to a 32-bit pseudo-random number each time it is referenced. The random number generator is not linear on systems that support /dev/urandom or arc4random, so each returned number has no relationship to the numbers preceding it. The random number generator cannot be seeded, so assignments to this variable have no effect. If SRANDOM is unset, it loses its special properties, even if it is subsequently reset."
	},
	"$TIMEFORMAT": {
		"prefix": "$TIMEFORMAT",
		"body": [
			"\\${TIMEFORMAT}$0"
		],
		"scope": "",
		"description": "The value of this parameter is used as a format string specifying how the timing information for pipelines prefixed with the time reserved word should be displayed. The ‘%’ character introduces an escape sequence that is expanded to a time value or other information. If the value is null, no timing information is displayed. A trailing newline is added when the format string is displayed."
	},
	"$TMOUT": {
		"prefix": "$TMOUT",
		"body": [
			"\\${TMOUT}$0"
		],
		"scope": "",
		"description": "If set to a value greater than zero, TMOUT is treated as the default timeout for the read builtin (see Bash Builtin Commands). The select command (see Conditional Constructs) terminates if input does not arrive after TMOUT seconds when input is coming from a terminal. In an interactive shell, the value is interpreted as the number of seconds to wait for a line of input after issuing the primary prompt. Bash terminates after waiting for that number of seconds if a complete line of input does not arrive."
	},
	"$TMPDIR": {
		"prefix": "$TMPDIR",
		"body": [
			"\\${TMPDIR}$0"
		],
		"scope": "",
		"description": "If set, Bash uses its value as the name of a directory in which Bash creates temporary files for the shell’s use."
	},
	"$UID": {
		"prefix": "$UID",
		"body": [
			"\\${UID}$0"
		],
		"scope": "",
		"description": "The numeric real user id of the current user. This variable is readonly."
	},
	"$BASH": {
		"prefix": "$BASH",
		"description": "The full pathname used to execute the current instance of Bash. ",
		"scope": "",
		"body": [
			"\\${BASH}$0"
		]
	},
	"$_": {
		"prefix": "$_",
		"description": "",
		"scope": "",
		"body": [
			"\\${_}$0"
		]
	},
	"$CDPATH": {
		"prefix": "$CDPATH",
		"description": "A colon-separated list of directories used as a search path for the cd builtin command.",
		"scope": "",
		"body": [
			"\\${CDPATH}$0"
		]
	},
	"$PS2": {
		"prefix": "$PS2",
		"description": "The secondary prompt string. The default value is ‘> ’. PS2 is expanded in the same way as PS1 before being displayed.",
		"scope": "",
		"body": [
			"\\${PS2}$0"
		]
	},
	"$PS1": {
		"prefix": "$PS1",
		"description": "The primary prompt string. The default value is ‘\\s-\\v\\${ ’}. See Controlling the Prompt, for the complete list of escape sequences that are expanded before PS1 is displayed. ",
		"scope": "",
		"body": [
			"\\${PS1}$0"
		]
	},
	"$PATH": {
		"prefix": "$PATH",
		"description": "A colon-separated list of directories in which the shell looks for commands. A zero-length (null) directory name in the value of PATH indicates the current directory. A null directory name may appear as two adjacent colons, or as an initial or trailing colon. ",
		"scope": "",
		"body": [
			"\\${PATH}$0"
		]
	},
	"$OPTIND": {
		"prefix": "$OPTIND",
		"description": "The index of the last option argument processed by the getopts builtin. ",
		"scope": "",
		"body": [
			"\\${OPTIND}$0"
		]
	},
	"$OPTARG": {
		"prefix": "$OPTARG",
		"description": "The value of the last option argument processed by the getopts builtin.",
		"scope": "",
		"body": [
			"\\${OPTARG}$0"
		]
	},
	"$MAILPATH": {
		"prefix": "$MAILPATH",
		"description": "A colon-separated list of filenames which the shell periodically checks for new mail. Each list entry can specify the message that is printed when new mail arrives in the mail file by separating the filename from the message with a ‘?’. When used in the text of the message, $_ expands to the name of the current mail file.",
		"scope": "",
		"body": [
			"\\${MAILPATH}$0"
		]
	},
	"$MAIL": {
		"prefix": "$MAIL",
		"description": "If this parameter is set to a filename or directory name and the MAILPATH variable is not set, Bash informs the user of the arrival of mail in the specified file or Maildir-format directory.",
		"scope": "",
		"body": [
			"\\${MAIL}$0"
		]
	},
	"$IFS": {
		"prefix": "$IFS",
		"description": "A list of characters that separate fields; used when the shell splits words as part of expansion. ",
		"scope": "",
		"body": [
			"\\${IFS}$0"
		]
	},
	"$HOME": {
		"prefix": "$HOME",
		"description": "The current user’s home directory; the default for the cd builtin command. The value of this variable is also used by tilde expansion.",
		"scope": "",
		"body": [
			"\\${HOME}$0"
		]
	}
}