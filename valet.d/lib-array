#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## array::sort
#
# Sorts an array using the > bash operator (lexicographic order).
#
# - $1: **array name** _as string_:
#       The global variable name of array to sort.
#
# ```bash
# declare -g myArray=( "z" "a" "b" )
# array::sort myArray
# printf '%s\n' "${myArray[@]}"
# ```
#
# > TODO: Update this basic exchange sort implementation.
function array::sort() {
  local -n array=${1}
  local -i i j
  local temp
  for ((i = 0; i < ${#array[@]}; i++)); do
    for ((j = i + 1; j < ${#array[@]}; j++)); do
      if [[ "${array[i]}" > "${array[j]}" ]]; then
        temp="${array[i]}"
        array[i]="${array[j]}"
        array[j]="${temp}"
      fi
    done
  done
}

# ## array::appendIfNotPresent
#
# Add a value to an array if it is not already present.
#
# - $1: **array name** _as string_:
#       The global variable name of the array.
# - $2: **value** _as any:
#       The value to add.
#
# Returns:
#
# - $?:
#   - 0 if the value was added
#   - 1 if it was already present
#
# ```bash
# declare -g myArray=( "a" "b" )
# array::appendIfNotPresent myArray "c"
# printf '%s\n' "${myArray[@]}"
# ```
function array::appendIfNotPresent() {
  local -n array=${1}
  local value="${2}"

  # add value to array if not present, check in a loop
  local -i present=0
  local item
  for item in "${array[@]}"; do
    if [[ ${item} == "${value}" ]]; then
      present=1
      break
    fi
  done
  if [[ present -eq 0 ]]; then
    array+=("${value}")
  fi
  return ${present}
}

# ## array::isInArray
#
# Check if a value is in an array.
# It uses pure bash.
#
# - $1: **array name** _as string_:
#       The global variable name of the array.
# - $2: **value** _as any:
#       The value to check.
#
# Returns:
#
# - $?: 0 if the value is in the array, 1 otherwise.
#
# ```bash
# declare -g myArray=( "a" "b" )
# array::isInArray myArray "b" && printf '%s\n' "b is in the array"
# ```
function array::isInArray() {
  local -n array="${1}"
  local value="${2}"

  local item
  for item in "${array[@]}"; do
    if [[ ${item} == "${value}" ]]; then
      return 0
    fi
  done
  return 1
}

# ## array::makeArraysSameSize
#
# This function makes sure that all the arrays have the same size.
# It will add empty strings to the arrays that are too short.
#
# - $@: **array names** _as string_:
#       The arrays (global variable names) to make the same size.
#
# ```bash
# array::makeArraysSameSize "array1" "array2" "array3"
# ```
function array::makeArraysSameSize() {
  local array
  local -i length
  local -a lengths
  local -i maxLength=0

  # compute max length among all arrays
  for array in "$@"; do
    if [[ ! -v "${array}" ]]; then
      eval "${array}=()"
    fi
    eval "length=\${#${array}[@]}" || length=0
    lengths+=("${length}")
    if [[ length -gt maxLength ]]; then
      maxLength=length
    fi
  done

  for length in "${lengths[@]}"; do
    while [[ length -lt maxLength ]]; do
      eval "${1}+=(\"\")"
      length+=1
    done
    shift
  done
}

# ## array::sortWithCriteria
#
# Sorts an array using mulitple criteria.
# Excepts multiple arrays. The first array is the one to sort.
# The other arrays are used as criteria. Criteria are used in the order they are given.
# Each criteria array must have the same size as the array to sort.
# Each criteria array must containing integers representing the order of the elements.
# We first sort using the first criteria (from smallest to biggest), then the second, etc.
#
# - $1: **array name** _as string_:
#       the name of the array to sort (it is sorted in place)
# - $@: **criteria array names** _as string_:
#       the names of the arrays to use as criteria
#
# Returns:
#
# - `RETURNED_ARRAY`: An array that contains the corresponding indexes of the sorted array in the original array
#
# ```bash
# declare -g myArray=( "a" "b" "c" )
# declare -g criteria1=( 3 2 2 )
# declare -g criteria2=( 1 3 2 )
# array::sortWithCriteria myArray criteria1 criteria2
# printf '%s\n' "${myArray[@]}"
# # c b a
# printf '%s\n' "${RETURNED_ARRAY[@]}"
# # 3 2 1
# ```
#
# > TODO: Update this basic exchange sort implementation.
function array::sortWithCriteria() {
  local -n array="${1}"
  shift
  local -a criteria=("${@}")

  local -i i j k
  local temp
  local -a indexes

  # create an array of indexes
  for ((i = 0; i < ${#array[@]}; i++)); do
    indexes+=("${i}")
  done

  # sort the indexes
  for ((i = 0; i < ${#array[@]}; i++)); do
    for ((j = i + 1; j < ${#array[@]}; j++)); do
      for ((k = 0; k < ${#criteria[@]}; k++)); do
        local -n criterion="${criteria[k]}"
        if ((criterion[indexes[i]] > criterion[indexes[j]])); then
          temp="${indexes[i]}"
          indexes[i]="${indexes[j]}"
          indexes[j]="${temp}"
          break
        elif ((criterion[indexes[i]] < criterion[indexes[j]])); then
          break
        fi
      done
    done
  done

  # create the sorted array
  local -a sortedArray
  for i in "${indexes[@]}"; do
    sortedArray+=("${array[i]}")
  done

  RETURNED_ARRAY=("${indexes[@]}")

  array=("${sortedArray[@]}")
}

# ## array::fuzzyFilterSort
#
# Allows to fuzzy sort an array against a given pattern.
# Returns an array containing only the lines matching the pattern.
# The array is sorted by (in order):
#
# - the index of the first matched character in the line
# - the distance between the characters in the line
#
# - $1: **pattern** _as string_:
#       the pattern to match
# - $2: **array name** _as string_:
#       the initial array name
# - $3: prefix matched char _as string_:
#       (optional) string to add before each matched char
#       (defaults to empty string)
# - $4: suffix matched char _as string_:
#       (optional) string to add after each matched char
#       (defaults to empty string)
# - $5: max line length _as int_:
#       (optional) The maximum length to keep for the matched lines,
#       does not count the strings added/before after each matched char
#       (defaults to 9999999)
#
# Returns:
#
# - `RETURNED_ARRAY`: An array containing the items sorted and filtered
# - `RETURNED_ARRAY2`: An array containing the indexes of the matched items in the original array
#
# ```bash
# array::fuzzyFilterSort "pattern" "myarray" && local filteredArray="${RETURNED_ARRAY}"
# array::fuzzyFilterSort "pattern" "myarray" ⌜ ⌝ && local filteredArray="${RETURNED_ARRAY}"
# array::fuzzyFilterSort "pattern" "myarray" ⌜ ⌝ 10 && local filteredArray="${RETURNED_ARRAY}"
# ```
#
# > - All characters in the pattern must be found in the same order in the matched line.
# > - The function is case insensitive.
# > - This function does not sort the results, it only filters them.
function array::fuzzyFilterSort() {
  local pattern="${1}"
  local -n array="${2}"
  local beforeChar="${3:-}"
  local afterChar="${4:-}"
  local maxMatchedLineLength="${5:-9999999}"

  local -a originalIndexes
  ARRAY_MATCHES=()
  ARRAY_INDEXES=()
  ARRAY_DISTANCES=()

  local -i patternLength lineLength matchedLineLength
  patternLength="${#pattern}"

  # make all match case insensitive
  shopt -s nocasematch

  local line patternChar lineChar matchedLine hasBeginEllipsis hasEndEllipsis
  local -i lineCharIndex patternCharIndex lastLineCharIndex distance patternFirstCharIndex itemIndex=-1

  for line in "${array[@]}"; do
    itemIndex+=1

    lineLength="${#line}"

    hasBeginEllipsis=false
    hasEndEllipsis=false
    matchedLine=""
    matchedLineLength=0

    # for each character in the pattern
    patternCharIndex=0
    lineCharIndex=0
    lastLineCharIndex=0
    while [[ patternCharIndex -lt patternLength ]]; do
      patternChar="${pattern:${patternCharIndex}:1}"

      # find the character in the line
      while [[ lineCharIndex -lt lineLength ]]; do
        lineChar="${line:${lineCharIndex}:1}"

        if [[ ${lineChar} == "${patternChar}" ]]; then

          # see if we need to shift the matched line if the line is too long
          # and the first matched character is not at the beginning of the line
          if [[ ${lineLength} -gt ${maxMatchedLineLength} && ${hasBeginEllipsis} != "true" && ${patternCharIndex} -eq 0 && ${lineCharIndex} -ge ${maxMatchedLineLength} ]]; then
            local -i remainingChars=$((maxMatchedLineLength - lineCharIndex))
            matchedLine="…${beforeChar}${lineChar}${afterChar}"
            matchedLineLength=2
            hasBeginEllipsis=true

          elif ((matchedLineLength + 1 + lineCharIndex - lastLineCharIndex < maxMatchedLineLength || (matchedLineLength + 1 + lineCharIndex - lastLineCharIndex <= maxMatchedLineLength && lineCharIndex == lineLength - 1))); then
            if ((lineCharIndex - lastLineCharIndex > 0)); then
              # add the characters before the matched character
              matchedLine+="${line:${lastLineCharIndex}:$((lineCharIndex - lastLineCharIndex))}"
              matchedLineLength+=$((lineCharIndex - lastLineCharIndex))
            fi
            matchedLine+="${beforeChar}${lineChar}${afterChar}"
            matchedLineLength+=1

          elif [[ ${hasEndEllipsis} != "true" ]]; then
            local -i remainingChars=$((maxMatchedLineLength - 1 - matchedLineLength))
            if ((remainingChars > 0)); then
              matchedLine+="${line:${lastLineCharIndex}:${remainingChars}}"
              matchedLineLength+=${remainingChars}
            fi
            matchedLine+="…"
            matchedLineLength+=1
            hasEndEllipsis=true
          fi

          # if it is the first char of the pattern, remmember the index
          if [[ patternCharIndex -eq 0 ]]; then
            patternFirstCharIndex=${lineCharIndex}
          fi

          # if we find the character, mark the distance
          distance=$((lineCharIndex - lastLineCharIndex))
          lastLineCharIndex=$((lineCharIndex + 1))

          # loop on the next pattern character
          break
        fi

        lineCharIndex+=1
      done

      # if we don't find the character in the line, the line is not a match
      if [[ lineCharIndex -ge lineLength ]]; then
        break
      else
        lineCharIndex+=1
      fi

      patternCharIndex+=1
    done

    # if we found all the characters in the pattern
    if [[ patternCharIndex -ge patternLength ]]; then
      # add the remaining characters in the line
      if ((lineLength - lastLineCharIndex > 0)); then
        local remainingChars=$((lineLength - lastLineCharIndex))
        local hasEllipsis=false
        if ((remainingChars > maxMatchedLineLength - matchedLineLength)); then
          remainingChars=$((maxMatchedLineLength - matchedLineLength - 1))
          hasEllipsis=true
        fi
        if ((remainingChars > 0)); then
          matchedLine+="${line:${lastLineCharIndex}:${remainingChars}}"
        fi
        if [[ ${hasEllipsis} == "true" && ${hasEndEllipsis} != "true" ]]; then
          matchedLine+="…"
        fi
      fi

      ARRAY_MATCHES+=("${matchedLine}")
      ARRAY_INDEXES+=("${patternFirstCharIndex}")
      ARRAY_DISTANCES+=("${distance}")

      originalIndexes+=("${itemIndex}")
    fi

  done


  shopt -u nocasematch

  # sort the results
  array::sortWithCriteria ARRAY_MATCHES ARRAY_INDEXES ARRAY_DISTANCES

  # create the final correspondance array
  RETURNED_ARRAY2=()
  for i in "${RETURNED_ARRAY[@]}"; do
    RETURNED_ARRAY2+=("${originalIndexes[i]}")
  done

  RETURNED_ARRAY=("${ARRAY_MATCHES[@]}")

  unset ARRAY_MATCHES ARRAY_INDEXES ARRAY_DISTANCES
}
