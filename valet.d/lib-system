#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## system::os
#
# Returns the name of the current OS.
#
# Returns:
#
# - `RETURNED_VALUE`: the name of the current OS: "darwin", "linux" or "windows".
#
# ```bash
# system::os
# local osName="${RETURNED_VALUE}"
# ```
function system::os() {
  local osName
  case "${OSTYPE:-}" in
    darwin*) osName="darwin";;
    linux*) osName="linux";;
    msys*) osName="windows";;
    *) osName="unknown";;
  esac
  RETURNED_VALUE="${osName}"
}

# ## system::env
#
# Get the list of all the environment variables.
# In pure bash, no need for env or printenv.
#
# Returns:
#
# - `RETURNED_ARRAY`: An array with the list of all the environment variables.
#
# ```bash
# system::env
# for var in "${RETURNED_ARRAY[@]}"; do
#   printf '%s=%s\n' "${var}" "${!var}"
# done
# ```
#
# > This is faster than using mapfile on <(compgen -v).
function system::env() {
  RETURNED_ARRAY=()
  for i in $(compgen -v); do
    RETURNED_ARRAY+=("${i}")
  done
}

# ## system::date
#
# Get the current date in the given format.
#
# - $1: format _as string_:
#       (optional) the format of the date to return
#       (defaults to %(%F_%Hh%Mm%Ss)T).
#
# Returns:
#
# - `RETURNED_VALUE`: the current date in the given format.
#
# ```bash
# system::date
# local date="${RETURNED_VALUE}"
# ```
#
# > This function avoid to call $(date) in a subshell (date is a an external executable).
function system::date() {
  local format="${1:-'%(%F_%Hh%Mm%Ss)T'}"
  # shellcheck disable=SC2059
  printf -v RETURNED_VALUE "${format}" "${EPOCHSECONDS}"
}

# ## system::getUndeclaredVariables
#
# This function returns the list of undeclared variables for the given names.
#
# - $@: **variable names** _as string_:
#       the list of variable names to check.
#
# Returns:
#
# - $?
#   - 0 if there are variable undeclared
#   - 1 otherwise.
# - `RETURNED_ARRAY`: the list of undeclared variables.
#
# ```bash
# if system::getUndeclaredVariables "var1" "var2"; then
#   printf 'The following variables are not declared: %s' "${RETURNED_ARRAY[*]}"
# fi
# ```
function system::getUndeclaredVariables() {
  RETURNED_ARRAY=()
  local var
  for var in "$@"; do
    if [[ ! -v "${var}" ]]; then
      RETURNED_ARRAY+=("${var}")
    fi
  done
  if [[ ${#RETURNED_ARRAY[@]} -gt 0 ]]; then
    return 0
  fi
  return 1
}

# ## system::getNotExistingCommands
#
# This function returns the list of not existing commands for the given names.
#
# - $@: **command names** _as string_:
#       the list of command names to check.
#
# Returns:
#
# - $?
#   - 0 if there are not existing commands
#   - 1 otherwise.
# - `RETURNED_ARRAY`: the list of not existing commands.
#
# ```bash
# if system::getNotExistingCommands "command1" "command2"; then
#   printf 'The following commands do not exist: %s' "${RETURNED_ARRAY[*]}"
# fi
# ```
function system::getNotExistingCommands() {
  RETURNED_ARRAY=()
  local cmd
  for cmd in "$@"; do
    if ! command -v "${cmd}" &>/dev/null; then
      RETURNED_ARRAY+=("${cmd}")
    fi
  done
  if [[ ${#RETURNED_ARRAY[@]} -gt 0 ]]; then
    return 0
  fi
  return 1
}

# ## system::commandExists
#
# Check if the given command exists.
#
# - $1: **command name** _as string_:
#       the command name to check.
#
# Returns:
#
# - $?
#   - 0 if the command exists
#   - 1 otherwise.
#
# ```bash
# if system::commandExists "command1"; then
#   printf 'The command exists.'
# fi
# ```
function system::commandExists() {
  if command -v "${1:-}" &>/dev/null; then
    return 0
  fi
  return 1
}