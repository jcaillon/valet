#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-ansi-codes
source ansi-codes

# shellcheck source=lib-interactive
source interactive

# ## autocompletion::start
#
# Displays an autocompletion input starting at a given location. Allows
# the user to type a text in the given row betwen a starting column and
# ending column (included). Longer text are shifted to fit between
# the two columns.
#
# This component is a replacement for the `read -e` command, which allows
# to limit the input to a single line and to provide autocompletion.
#
# The autocompletion box can be hidden, or displayed below/above the input text
# depending on the space available on the screen.
#
# The user can type character to filter down a list of suggestions,
# navigate up and down between suggestions, insert a suggestion using
# TAB or ENTER, press ESC to close the autocompletion box, and ALT+ENTER to
# submit the input (or just ENTER when the box is closed).
#
# The autocompletion box will position itself depending on the screen size
# and the starting position of the text.
#
# The multiple options allows to use this function to ask for any user input
# as long as it is on a single line.
#
# You can define several callback functions that are called on different events:
#
# - `autocompletionOnTextUpdate`: Called when the text is updated (after each key press).
#
# - $1: **start line** _as int_:
#       The line/row at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $2: **start column** _as int_:
#       The column at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $3: **stop column** _as int_:
#       The column at which to stop showing the autocompleted text.
#       Longer texts get shifted to display the end of the user input.
# - $4: **array name** _as string_:
#       The items to display (name of a global array which contains the items).
#       If left empty, the autocompletion box will not be displayed. Useful to turn this into a simple prompt.
# - $5: initial text _as string_:
#       (optional) The initial string, which corresponds to the text already entered
#       by the user at the moment the autocompletion box shows up.
#       Allows to prefilter the autocompletion.
#       (defaults to empty)
# - $6: max lines _as int_:
#       optional) The maximum number of lines/rows to use for the autocompletion box.
#       (defaults to a maximized auto-computed value depending on the items and screen size)
# - $7: force box below _as bool_:
#       (optional) If true, the box is forced to be displayed below the input text.
#       Otherwise it will depend on the space required and space available below/above.
#       (defaults to false)
# - $8: show prompt _as bool_:
#       (optional) If true, the prompt is displayed. If false, the prompt is hidden.
#       Useful to turn this into a simple multiple choice list.
#       (defaults to true)
# - $9: force show count _as bool_:
#       (optional) If true, the count of items is always displayed.
#       If false, the count is only displayed when we can'y display all the items at once.
#       (defaults to false)
# - $10: show left cursors _as bool_:
#       (optional) If true, the left cursors are displayed (> for prompt and the > for selected item).
#       Useful to display the most simple auto-completion when false.
#       (defaults to true)
# - $11: filters from n chars _as int_:
#       (optional) The minimum number of characters to type before starting to filter the items.
#       By default, the list is shown full and the user can start typing to filter.
#       Put a value superior to 0 to make it behave like a standard autocompletion.
#       When non-zero, the user can CTRL+SPACE to show the full list.
#       (defaults to 0)
# - $12: accept any value _as bool_:
#       (optional) If true, the left cursors are displayed (> for prompt and the > for selected item).
#       Useful to display the most simple auto-completion when false.
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0: The user pressed ENTER to validate the text.
#   - 1: The user pressed ESC to close the text box.
# - `RETURNED_VALUE`: The entered value (or empty).
# - `RETURNED_VALUE2`: The string displayed on the screen between the 2 columns at the
#                      moment when the autocompletion was closed.
#
# ```bash
# autocompletion::start "Select an item" item_array_name "onItemSelected" "Details"
# ```
function autocompletion::start() {
  AUTOCOMPLETION_START_LINE="${1}"
  AUTOCOMPLETION_START_COLUMN="${2}"
  AUTOCOMPLETION_STOP_COLUMN="${3}"

  local -i maxItemLength=0
  if [[ -n "${4:-}" ]]; then
    local -n originalItems="${4}"
    AUTOCOMPLETION_ORIGINAL_ITEMS=("${originalItems[@]}")
    local item
    for item in "${AUTOCOMPLETION_ORIGINAL_ITEMS[@]}"; do
      if ((${#item} > maxItemLength)); then
        maxItemLength=${#item}
      fi
    done
    AUTOCOMPLETION_SHOW_AUTOCOMPLETION_BOX=true
  else
    AUTOCOMPLETION_ORIGINAL_ITEMS=()
    AUTOCOMPLETION_SHOW_AUTOCOMPLETION_BOX=false
  fi
  AUTOCOMPLETION_USER_STRING="${5:-}"
  AUTOCOMPLETION_PROMPT_INDEX=${#AUTOCOMPLETION_USER_STRING}

  AUTOCOMPLETION_PROMPT_WIDTH=$((AUTOCOMPLETION_STOP_COLUMN - AUTOCOMPLETION_START_COLUMN + 1))
  AUTOCOMPLETION_FINAL_SELECTION_INDEX=-1

  AUTOCOMPLETION_SHOW_PROMPT="${8:-true}"
  AUTOCOMPLETION_FORCE_SHOW_COUNT="${9:-false}"
  AUTOCOMPLETION_SHOW_LEFT_CURSORS="${10:-true}"
  AUTOCOMPLETION_FILTERS_FROM_N_CHARS="${11:-0}"
  AUTOCOMPLETION_ACCEPT_ANY_VALUE="${12:-true}"

  system::exportTerminalSize
  if [[ ${AUTOCOMPLETION_SHOW_LEFT_CURSORS} == "true" ]]; then
    maxItemLength+=2
  fi
  autocompletionComputeSize "${6:-}" "${7:-}" "${AUTOCOMPLETION_START_LINE}" "${AUTOCOMPLETION_START_COLUMN}" "${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}" "${maxItemLength}" "${AUTOCOMPLETION_SHOW_PROMPT}"

  AUTOCOMPLETION_FILTERED_ITEMS=()

  AUTOCOMPLETION_KILLED_STRING=""

  # set up colors
  if [[ ${VALET_CONFIG_ENABLE_COLORS:-} == "true" ]]; then
    AUTOCOMPLETION_COLOR_PROMPT="${VALET_CONFIG_AUTOCOMPLETION_COLOR_PROMPT:-"${AC__FG_MAGENTA}"}"
    AUTOCOMPLETION_COLOR_PROMPT_RESET="${VALET_CONFIG_AUTOCOMPLETION_COLOR_PROMPT_RESET:-"${AC__FG_RESET}"}"
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT="${VALET_CONFIG_AUTOCOMPLETION_LETTER_HIGHLIGHT:-"${AC__TEXT_INVERSE}${AC__FG_MAGENTA}"}"
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT_RESET="${VALET_CONFIG_AUTOCOMPLETION_LETTER_HIGHLIGHT_RESET:-"${AC__TEXT_NO_INVERSE}${AC__FG_RESET}"}"
    AUTOCOMPLETION_COLOR_STATIC="${VALET_CONFIG_AUTOCOMPLETION_STATIC:-"${AC__FG_BRIGHT_BLACK}"}"
    AUTOCOMPLETION_COLOR_STATIC_RESET="${VALET_CONFIG_AUTOCOMPLETION_STATIC:-"${AC__FG_RESET}"}"
    AUTOCOMPLETION_COLOR_SELECTED_ITEM="${VALET_CONFIG_AUTOCOMPLETION_SELECTED_ITEM:-"${AC__BG_BLACK}${AC__FG_WHITE}"}"
    AUTOCOMPLETION_COLOR_SELECTED_ITEM_RESET="${VALET_CONFIG_AUTOCOMPLETION_SELECTED_ITEM_RESET:-"${AC__BG_RESET}${AC__FG_RESET}"}"
    AUTOCOMPLETION_COLOR_COUNT="${VALET_CONFIG_AUTOCOMPLETION_COUNT:-"${AC__FG_YELLOW}"}"
    AUTOCOMPLETION_COLOR_COUNT_RESET="${VALET_CONFIG_AUTOCOMPLETION_COUNT_RESET:-"${AC__TEXT_RESET}"}"
  else
    AUTOCOMPLETION_COLOR_PROMPT="${VALET_CONFIG_AUTOCOMPLETION_COLOR_PROMPT:-""}"
    AUTOCOMPLETION_COLOR_PROMPT_RESET="${VALET_CONFIG_AUTOCOMPLETION_COLOR_PROMPT_RESET:-""}"
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT="${VALET_CONFIG_AUTOCOMPLETION_LETTER_HIGHLIGHT:-"${AC__TEXT_UNDERLINE}"}"
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT_RESET="${VALET_CONFIG_AUTOCOMPLETION_LETTER_HIGHLIGHT_RESET:-"${AC__TEXT_NO_UNDERLINE}"}"
    AUTOCOMPLETION_COLOR_STATIC="${VALET_CONFIG_AUTOCOMPLETION_STATIC:-""}"
    AUTOCOMPLETION_COLOR_STATIC_RESET="${VALET_CONFIG_AUTOCOMPLETION_STATIC:-""}"
    AUTOCOMPLETION_COLOR_SELECTED_ITEM="${VALET_CONFIG_AUTOCOMPLETION_SELECTED_ITEM:-"${AC__TEXT_INVERSE}"}"
    AUTOCOMPLETION_COLOR_SELECTED_ITEM_RESET="${VALET_CONFIG_AUTOCOMPLETION_SELECTED_ITEM_RESET:-"${AC__TEXT_NO_INVERSE}"}"
    AUTOCOMPLETION_COLOR_COUNT="${VALET_CONFIG_AUTOCOMPLETION_COUNT:-""}"
    AUTOCOMPLETION_COLOR_COUNT_RESET="${VALET_CONFIG_AUTOCOMPLETION_COUNT_RESET:-""}"
  fi

  if [[ ${AUTOCOMPLETION_SHOW_LEFT_CURSORS} == "true" ]]; then
    AUTOCOMPLETION_LEFT_CURSOR_PROMPT="${AUTOCOMPLETION_COLOR_STATIC}${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-">"} ${AUTOCOMPLETION_COLOR_STATIC_RESET}"
    AUTOCOMPLETION_LEFT_CURSOR_PROMPT_LENGTH=2
    AUTOCOMPLETION_LEFT_CURSOR_SELECTED_ITEM="${AUTOCOMPLETION_COLOR_SELECTED_ITEM}${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-"◆"} ${AUTOCOMPLETION_COLOR_SELECTED_ITEM_RESET}"
    AUTOCOMPLETION_LEFT_CURSOR_UNSELECTED_ITEM="${AUTOCOMPLETION_COLOR_STATIC}$░ ${AUTOCOMPLETION_COLOR_STATIC_RESET}"
  else
    AUTOCOMPLETION_LEFT_CURSOR_PROMPT=""
    AUTOCOMPLETION_LEFT_CURSOR_PROMPT_LENGTH=0
    AUTOCOMPLETION_LEFT_CURSOR_SELECTED_ITEM=""
    AUTOCOMPLETION_LEFT_CURSOR_UNSELECTED_ITEM=""
  fi

  AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION=false

  if command -v autocompletionOnTextUpdate &>/dev/null; then
    AUTOCOMPLETION_HAS_ON_TEXT_UPDATE="true"
  else
    AUTOCOMPLETION_HAS_ON_TEXT_UPDATE="false"
  fi

  # before starting to wait for inputs, we clear up the key pressed
  interactive::clearKeyPressed
  # setup the terminal to be ready for readline
  interactive::sttyInit
  # rebind some keys to call the callback function interactiveOnKeyBindingPress
  interactive::rebindKeymap
  # define the callback function called when a special key is pressed
  # shellcheck disable=SC2317
  function interactiveOnKeyBindingPress() { autocompletionOnKeyPressed "${1}"; }

  drawPrompt
  drawAutocompletionBox

  # main loop
  while true; do
    if interactive::waitForKeyPress -t 0.2; then
      autocompletionOnKeyPressed "${LAST_KEY_PRESSED}"
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 || ${AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION} == "true" ]]; then break; fi
  done

  interactive::sttyRestore

  if ((AUTOCOMPLETION_FINAL_SELECTION_INDEX >= 0)); then
    RETURNED_VALUE="${AUTOCOMPLETION_USER_STRING}"
    RETURNED_VALUE2="${AUTOCOMPLETION_ORIGINAL_ITEMS[${AUTOCOMPLETION_FINAL_SELECTION_INDEX}]}"
    RETURNED_VALUE3=${AUTOCOMPLETION_FINAL_SELECTION_INDEX}
  else
    return 1
  fi

  # clean up
  unset -f autocompletionOnTextUpdate 2>/dev/null || :

  return 0
}

# Compute the size and position of the autocompletion box.
#
# Returns:
#
# - `AUTOCOMPLETION_HEIGHT`: The height of the autocompletion box.
# - `AUTOCOMPLETION_TOP`: The top position of the autocompletion box.
# - `AUTOCOMPLETION_WIDTH`: The width of the autocompletion box.
# - `AUTOCOMPLETION_LEFT`: The left position of the autocompletion box.
function autocompletionComputeSize() {
  local maxLines="${1:-9999}"
  local forceBelow="${2:-}"
  local startLine="${3}"
  local startColumn="${4}"
  local nbItems="${5}"
  local maxItemLength="${6}"
  local showPrompt="${7:-true}"

  local extraLine=1
  if [[ ${showPrompt} == "true" ]]; then
    extraLine=0
  fi

  local below=true
  local -i maxAvailableLines=$((GLOBAL_LINES - startLine + extraLine))
  if [[ ${forceBelow} != "true" ]]; then
    local maxAvailableLinesAbove=$((startLine - 1 + extraLine))
    if ((nbItems > maxAvailableLines && maxAvailableLinesAbove > maxAvailableLines)); then
      maxAvailableLines=${maxAvailableLinesAbove}
      below=false
    fi
  fi

  maxLines=$((maxLines >= maxAvailableLines ? maxAvailableLines : maxLines))
  AUTOCOMPLETION_HEIGHT=$((nbItems >= maxLines ? maxLines : nbItems))
  if [[ ${below} == "true" ]]; then
    AUTOCOMPLETION_TOP=$((startLine + 1 - extraLine))
  else
    AUTOCOMPLETION_TOP=$((startLine - AUTOCOMPLETION_HEIGHT + extraLine))
  fi

  AUTOCOMPLETION_WIDTH=$((maxItemLength >= GLOBAL_COLUMNS ? GLOBAL_COLUMNS : maxItemLength))
  AUTOCOMPLETION_LEFT=$((GLOBAL_COLUMNS - startColumn + 1 > AUTOCOMPLETION_WIDTH ? startColumn : GLOBAL_COLUMNS - AUTOCOMPLETION_WIDTH + 1))

  if ((AUTOCOMPLETION_WIDTH < 1)); then
    AUTOCOMPLETION_WIDTH=1
  fi
  if ((AUTOCOMPLETION_HEIGHT < 1)); then
    AUTOCOMPLETION_HEIGHT=1
  fi
}

# Called when a key is pressed.
function autocompletionOnKeyPressed() {
  case "${1}" in

  # autocompletion boc
  PAGE_UP)
    changeSelectedItemIndex -10
    drawAutocompletionBox
    ;;
  PAGE_DOWN)
    changeSelectedItemIndex 10
    drawAutocompletionBox
    ;;
  HOME | CTRL+UP)
    changeSelectedItemIndex -99999
    drawAutocompletionBox
    ;;
  END | CTRL+DOWN)
    changeSelectedItemIndex 99999
    drawAutocompletionBox
    ;;
  UP)
    changeSelectedItemIndex -1
    drawAutocompletionBox
    ;;
  DOWN)
    changeSelectedItemIndex 1
    drawAutocompletionBox
    ;;

  # validate or exit
  $'\n' | CTRL+M | CTRL+J | NEWLINE)
    # if we selected index is within the range of the filtered items
    # we can return the corresponding index in the original items
    getCurrentInitialItemsIndex
    if [[ ${AUTOCOMPLETION_ACCEPT_ANY_VALUE} != "true" && ${RETURNED_VALUE} -eq -1 ]]; then
      # make enter have no effect if we are not on a valid item and we don't accept any value
      return 0
    fi
    AUTOCOMPLETION_FINAL_SELECTION_INDEX=${RETURNED_VALUE}
    AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION=true
    return 0
    ;;
  TAB | CTRL+I)
    drawPrompt
    ;;
  ESC)
    AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION=true
    return 0
    ;;

  # move the cursor
  CTRL+A)
    changePromptCursorIndex -9999999
    drawPrompt
    ;;
  CTRL+E)
    changePromptCursorIndex 9999999
    drawPrompt
    ;;
  LEFT | CTRL+B)
    changePromptCursorIndex -1
    drawPrompt
    ;;
  RIGHT | CTRL+F)
    changePromptCursorIndex 1
    drawPrompt
    ;;
  CTRL+LEFT)
    # move to beggining of the previous word
    local -i index=${AUTOCOMPLETION_PROMPT_INDEX}
    index+=-1
    while [[ ${index} -gt 0 && ${AUTOCOMPLETION_USER_STRING:index:1} =~ [[:space:]] ]]; do
      index+=-1
    done
    while [[ ${index} -gt 0 && ${AUTOCOMPLETION_USER_STRING:index:1} =~ [^[:space:]] ]]; do
      if [[ ${index} -ge 1 && ${AUTOCOMPLETION_USER_STRING:$((index - 1)):1} =~ [[:space:]] ]]; then
        break
      fi
      index=$((index - 1))
    done
    AUTOCOMPLETION_PROMPT_INDEX=$((index >= 0 ? index : 0))
    drawPrompt
    ;;
  CTRL+RIGHT)
    # move to the end of the next word
    local -i index=${AUTOCOMPLETION_PROMPT_INDEX}
    index+=1
    while [[ ${index} -lt ${#AUTOCOMPLETION_USER_STRING} && ${AUTOCOMPLETION_USER_STRING:index:1} =~ [[:space:]] ]]; do
      index+=1
    done
    while [[ ${index} -lt ${#AUTOCOMPLETION_USER_STRING} && ${AUTOCOMPLETION_USER_STRING:index:1} =~ [^[:space:]] ]]; do
      if [[ ${index} -le ${#AUTOCOMPLETION_USER_STRING} && ${AUTOCOMPLETION_USER_STRING:$((index + 1)):1} =~ [[:space:]] ]]; then
        break
      fi
      index=$((index + 1))
    done
    AUTOCOMPLETION_PROMPT_INDEX=$((index <= ${#AUTOCOMPLETION_USER_STRING} ? index : ${#AUTOCOMPLETION_USER_STRING}))
    drawPrompt
    ;;

  # modify the text
  CTRL+K)
    # kill the line from cursor to the end
    if ((AUTOCOMPLETION_PROMPT_INDEX > 0)); then
      AUTOCOMPLETION_KILLED_STRING="${AUTOCOMPLETION_USER_STRING:${AUTOCOMPLETION_PROMPT_INDEX}}"
      AUTOCOMPLETION_USER_STRING="${AUTOCOMPLETION_USER_STRING:0:${AUTOCOMPLETION_PROMPT_INDEX}}"
    else
      AUTOCOMPLETION_USER_STRING=""
    fi
    drawPrompt
    drawAutocompletionBox
    ;;
  CTRL+Y)
    # yank the killed string at cursor position
    if [[ -n ${AUTOCOMPLETION_KILLED_STRING:-} ]]; then
      autocompletionInsertTextAtCursorPosition "${AUTOCOMPLETION_KILLED_STRING}"
      drawPrompt
      drawAutocompletionBox
    fi
    ;;
  DEL | CTRL+D)
    # delete the character under the cursor
    local tempUserString
    if ((AUTOCOMPLETION_PROMPT_INDEX > 0)); then
      tempUserString="${AUTOCOMPLETION_USER_STRING:0:${AUTOCOMPLETION_PROMPT_INDEX}}"
    else
      tempUserString=""
    fi
    if ((AUTOCOMPLETION_PROMPT_INDEX < ${#AUTOCOMPLETION_USER_STRING} - 1)); then
      tempUserString+="${AUTOCOMPLETION_USER_STRING:$((AUTOCOMPLETION_PROMPT_INDEX + 1))}"
    fi
    AUTOCOMPLETION_USER_STRING="${tempUserString}"
    drawPrompt
    drawAutocompletionBox
    ;;
  CTRL+BACKSPACE | CTRL+W)
    # delete the word before the cursor
    local -i index=${AUTOCOMPLETION_PROMPT_INDEX}
    while [[ ${index} -gt 0 && ${AUTOCOMPLETION_USER_STRING:index:1} =~ [[:space:]] ]]; do
      index+=-1
    done
    while [[ ${index} -gt 0 && ${AUTOCOMPLETION_USER_STRING:index:1} =~ [^[:space:]] ]]; do
      index+=-1
    done
    AUTOCOMPLETION_USER_STRING="${AUTOCOMPLETION_USER_STRING:0:${index}}"
    AUTOCOMPLETION_PROMPT_INDEX=${index}
    drawPrompt
    drawAutocompletionBox
    ;;
  BACKSPACE | CTRL+H)
    # delete the character before the cursor
    if ((AUTOCOMPLETION_PROMPT_INDEX > 0)); then
      if ((AUTOCOMPLETION_PROMPT_INDEX > 1)); then
        AUTOCOMPLETION_USER_STRING="${AUTOCOMPLETION_USER_STRING:0:$((AUTOCOMPLETION_PROMPT_INDEX - 1))}${AUTOCOMPLETION_USER_STRING:${AUTOCOMPLETION_PROMPT_INDEX}}"
      else
        AUTOCOMPLETION_USER_STRING="${AUTOCOMPLETION_USER_STRING:${AUTOCOMPLETION_PROMPT_INDEX}}"
      fi
    fi
    changePromptCursorIndex -1
    drawPrompt
    drawAutocompletionBox
    ;;
  *)
    # Case of keys that are supposed to only affect the search string
    # insert the character at the cursor position
    if [[ -n ${LAST_KEY_PRESSED} ]]; then
      autocompletionInsertTextAtCursorPosition "${LAST_KEY_PRESSED}"
      drawPrompt
      drawAutocompletionBox
    fi
    ;;
  esac
}

# Insert a text at the cursor position.
#
# - $1: **text** _as string_:
#       The text to insert.
function autocompletionInsertTextAtCursorPosition() {
  if ((AUTOCOMPLETION_PROMPT_INDEX > 0)); then
    AUTOCOMPLETION_USER_STRING="${AUTOCOMPLETION_USER_STRING:0:${AUTOCOMPLETION_PROMPT_INDEX}}${1}${AUTOCOMPLETION_USER_STRING:${AUTOCOMPLETION_PROMPT_INDEX}}"
  else
    AUTOCOMPLETION_USER_STRING="${1}${AUTOCOMPLETION_USER_STRING}"
  fi
  changePromptCursorIndex ${#1}
}

# Draw the prompt line
function drawPrompt() {
  if [[ ${AUTOCOMPLETION_SHOW_PROMPT} != "true" ]]; then
    return 0
  fi

  autocompletionGetDisplayedPromptString
  # AUTOCOMPLETION_WIDTH / AUTOCOMPLETION_LEFT
  printf '%s' "${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}$((AUTOCOMPLETION_START_LINE));$((AUTOCOMPLETION_START_COLUMN))${__AC__TO}${AC__ERASE__}$((AUTOCOMPLETION_STOP_COLUMN - AUTOCOMPLETION_START_COLUMN + 1 + AUTOCOMPLETION_LEFT_CURSOR_PROMPT_LENGTH))${__AC_CHARS}"$'\r'"${AUTOCOMPLETION_LEFT_CURSOR_PROMPT}${AUTOCOMPLETION_COLOR_PROMPT}${RETURNED_VALUE}${AUTOCOMPLETION_COLOR_PROMPT_RESET}${AC__CURSOR_MOVE__}$((AUTOCOMPLETION_START_LINE));$((AUTOCOMPLETION_START_COLUMN + AUTOCOMPLETION_LEFT_CURSOR_PROMPT_LENGTH + RETURNED_VALUE2))${__AC__TO}${AC__CURSOR_SHOW}"

  if [[ ${AUTOCOMPLETION_HAS_ON_TEXT_UPDATE} == "true" ]]; then
    autocompletionOnTextUpdate
  fi
}

# This method uses the following global variables:
#
# - AUTOCOMPLETION_USER_STRING
# - AUTOCOMPLETION_PROMPT_INDEX
# - AUTOCOMPLETION_PROMPT_WIDTH
#
# It returns the prompt string to display and the relative position
# of the cursor whithin this prompt string.
# It correctly cuts the user string and adds the necessary ellipsis
#
# - RETURNED_VALUE: the string to display
# - RETURNED_VALUE2: the position of the cursor within this string
function autocompletionGetDisplayedPromptString() {
  local -i initialPromptLength=${#AUTOCOMPLETION_USER_STRING}
  local -i cursorIndex

  # compute where we will display the cursor in the prompt
  if ((AUTOCOMPLETION_PROMPT_INDEX >= AUTOCOMPLETION_PROMPT_WIDTH)); then
    if ((AUTOCOMPLETION_PROMPT_INDEX >= initialPromptLength - 1)); then
      # we display it in the last position if it is at the end of the string
      cursorIndex=$((AUTOCOMPLETION_PROMPT_WIDTH - 1))
    else
      # we display at the second last position if it is not at the end
      cursorIndex=$((AUTOCOMPLETION_PROMPT_WIDTH - 2))
    fi
  else
    if ((initialPromptLength > AUTOCOMPLETION_PROMPT_WIDTH && initialPromptLength - AUTOCOMPLETION_PROMPT_INDEX == 2)); then
      cursorIndex=$((AUTOCOMPLETION_PROMPT_WIDTH - 2))
    else
      if ((initialPromptLength > AUTOCOMPLETION_PROMPT_WIDTH && AUTOCOMPLETION_PROMPT_WIDTH - AUTOCOMPLETION_PROMPT_INDEX == 1)); then
        # if within the prompt but at the last character and we will need to display ellipsis...
        cursorIndex=$((AUTOCOMPLETION_PROMPT_WIDTH - 2))
      else
        # if it is already within the prompt, we display it at the right position
        cursorIndex=${AUTOCOMPLETION_PROMPT_INDEX}
      fi
    fi
  fi

  local -i displayedLeftLength=$((cursorIndex))
  local -i realLeftLength=$((AUTOCOMPLETION_PROMPT_INDEX))

  local prompt=""

  # compute what to display at the left of the character under the caret (if any)
  if ((displayedLeftLength > 0)); then
    if ((realLeftLength > displayedLeftLength)); then
      # we can't display the whole left string, so we display ellipsis
      if ((displayedLeftLength > 1)); then
        prompt+="…${AUTOCOMPLETION_USER_STRING:$((realLeftLength - displayedLeftLength + 1)):$((displayedLeftLength - 1))}"
      else
        prompt+="…"
      fi
    else
      prompt+="${AUTOCOMPLETION_USER_STRING:$((realLeftLength - displayedLeftLength)):$((displayedLeftLength))}"
    fi
  fi

  # compute the character to display under the caret (if any)
  if ((initialPromptLength > 0 && AUTOCOMPLETION_PROMPT_INDEX <= initialPromptLength)); then
    prompt+="${AUTOCOMPLETION_USER_STRING:$((AUTOCOMPLETION_PROMPT_INDEX)):1}"
  fi

  # compute what to display at the right of the character under the caret (if any)
  local -i displayedRightLength=$((AUTOCOMPLETION_PROMPT_WIDTH - cursorIndex - 1))
  local -i realRightLength=$((initialPromptLength - AUTOCOMPLETION_PROMPT_INDEX - 1))

  if ((displayedRightLength > 0)); then
    if ((realRightLength > displayedRightLength)); then
      # we can't display the whole right string, so we display ellipsis
      if ((displayedRightLength > 1)); then
        prompt+="${AUTOCOMPLETION_USER_STRING:$((initialPromptLength - realRightLength)):$((displayedRightLength - 1))}…"
      else
        prompt+="…"
      fi
    else
      prompt+="${AUTOCOMPLETION_USER_STRING:$((initialPromptLength - realRightLength)):$((displayedRightLength))}"
    fi
  fi

  RETURNED_VALUE="${prompt}"
  RETURNED_VALUE2=${cursorIndex}
}

# Draw the autocompletion box
function drawAutocompletionBox() {
  if [[ ${AUTOCOMPLETION_SHOW_AUTOCOMPLETION_BOX} != "true" ]]; then
    return 0
  fi

  return 0

  local IFS
  local toPrint="${AC__CURSOR_HIDE}${AUTOCOMPLETION_COLOR_RESET_TEXT}"

  getCurrentInitialItemsIndex
  local initialOriginalIndex=${RETURNED_VALUE}
  local initialNbFilteredItems=${#AUTOCOMPLETION_FILTERED_ITEMS[@]}

  # Compute filtered items
  if [[ -n ${AUTOCOMPLETION_USER_STRING} ]]; then

    array::fuzzyFilterSort "${AUTOCOMPLETION_USER_STRING}" AUTOCOMPLETION_ORIGINAL_ITEMS "${AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT}" "${AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT_RESET}" "$((AUTOCOMPLETION_WIDTH))"
    AUTOCOMPLETION_FILTERED_ITEMS=("${RETURNED_ARRAY[@]}")
    AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES=("${RETURNED_ARRAY2[@]}")
  else
    # for each item longer than the width, cut and add ellipsis
    AUTOCOMPLETION_FILTERED_ITEMS=()
    local line
    for line in "${AUTOCOMPLETION_ORIGINAL_ITEMS[@]}"; do
      if ((${#line} > AUTOCOMPLETION_WIDTH - 1)); then
        line="${line:0:$((AUTOCOMPLETION_WIDTH - 2))}…"
      fi
      AUTOCOMPLETION_FILTERED_ITEMS+=("${line}")
    done
    AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES=()
    for ((i = 0; i < ${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}; i++)); do
      AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES+=("${i}")
    done
    initialOriginalIndex=-1
  fi

  # make sure to select an existing index regarding the newly filtered items +
  # make sure it is in the view
  changeSelectedItemIndex 0

  # draw the items count
  if ((${#AUTOCOMPLETION_FILTERED_ITEMS[@]} != initialNbFilteredItems)); then
    local itemCount="${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}"
    local itemsCounter
    printf -v itemsCounter " %s%0${#itemCount}i%s/%i%s " "${AUTOCOMPLETION_COLOR_COUNT}" "${#AUTOCOMPLETION_FILTERED_ITEMS[@]}" "${AUTOCOMPLETION_COLOR_COUNT_RESET}${AUTOCOMPLETION_COLOR_STATIC}" "${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}" "${AUTOCOMPLETION_COLOR_RESET_TEXT}"
    local itemCounterLength=$((3 + ${#itemCount} * 2))
    toPrint+="${AC__CURSOR_MOVE__}$((AUTOCOMPLETION_LEFT_PANE_FIRST_LINE + 1));$((AUTOCOMPLETION_LEFT_PANE_WIDTH - itemCounterLength))${__AC__TO}${itemsCounter}"
  fi

  # draw the items
  local itemPrefix
  local -i index line=${AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE}
  local -i max=$((AUTOCOMPLETION_START_INDEX + AUTOCOMPLETION_HEIGHT - 1))
  max=$((max > ${#AUTOCOMPLETION_FILTERED_ITEMS[@]} - 1 ? ${#AUTOCOMPLETION_FILTERED_ITEMS[@]} - 1 : max))
  for ((index = AUTOCOMPLETION_START_INDEX; index <= max; index++)); do
    if ((index == AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX)); then
      itemPrefix="${AUTOCOMPLETION_COLOR_SELECTED_ITEM}${AUTOCOMPLETION_COLOR_FOCUS}◆ ${AUTOCOMPLETION_COLOR_FOCUS_RESET}"
    else
      itemPrefix="  "
    fi
    toPrint+="${AC__CURSOR_MOVE__}${line};${AUTOCOMPLETION_LEFT_PANE_WIDTH}${__AC__TO}${AC__ERASE_CHARS_LEFT}"$'\r'"${itemPrefix}${AUTOCOMPLETION_FILTERED_ITEMS[index]}${AUTOCOMPLETION_COLOR_SELECTED_ITEM_RESET}"
    line+=1
  done

  # clear the remaining lines
  for ((line = AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE + line - AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE; line < AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE + AUTOCOMPLETION_HEIGHT; line++)); do
    toPrint+="${AC__CURSOR_MOVE__}${line};${AUTOCOMPLETION_LEFT_PANE_WIDTH}${__AC__TO}${AC__ERASE_CHARS_LEFT}"
  done

  printf '%s' "${toPrint}"
}

# Returns the index of the item in the original array (if any, or -1).
# It returns in the RETURNED_VALUE variable.
function getCurrentInitialItemsIndex() {
  if ((AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX >= 0 && AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX < ${#AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES[@]})); then
    RETURNED_VALUE=${AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES[${AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX}]}
    return 0
  fi
  RETURNED_VALUE=-1
}

# Modifies the selected item index.
# Make it loop.
#
# $1: The delta to apply to the current index.
#
# Usage:
#   changeSelectedItemIndex 1
function changeSelectedItemIndex() {
  local delta="${1:-0}"

  # if we have no items, we do nothing
  if [[ ${#AUTOCOMPLETION_FILTERED_ITEMS[@]} -eq 0 ]]; then
    AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX=-1
    return 0
  fi

  # compute the new index (cycle through)
  local newIndex=$((AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX + delta))
  if ((newIndex < 0)); then
    newIndex=$((${#AUTOCOMPLETION_FILTERED_ITEMS[@]} - 1))
  elif ((newIndex >= ${#AUTOCOMPLETION_FILTERED_ITEMS[@]})); then
    newIndex=0
  fi

  # now we need to adjust the start index if needed
  # to make sure that the new index is visible on the screen
  if ((newIndex < AUTOCOMPLETION_START_INDEX)); then
    AUTOCOMPLETION_START_INDEX=${newIndex}
  elif ((newIndex > AUTOCOMPLETION_START_INDEX + AUTOCOMPLETION_HEIGHT - 1)); then
    AUTOCOMPLETION_START_INDEX=$((newIndex - AUTOCOMPLETION_HEIGHT + 1))
  fi

  AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX=${newIndex}
}

# Modifies the cursor position in the prompt line.
# Make it loop.
#
# $1: The delta to apply to the current position.
#
# Usage:
#   changePromptCursorIndex 1
function changePromptCursorIndex() {
  local delta="${1:-0}"

  AUTOCOMPLETION_PROMPT_INDEX=$((AUTOCOMPLETION_PROMPT_INDEX + delta))

  if ((AUTOCOMPLETION_PROMPT_INDEX < 0)); then
    AUTOCOMPLETION_PROMPT_INDEX=0
  elif ((AUTOCOMPLETION_PROMPT_INDEX > ${#AUTOCOMPLETION_USER_STRING})); then
    AUTOCOMPLETION_PROMPT_INDEX=${#AUTOCOMPLETION_USER_STRING}
  fi
}
