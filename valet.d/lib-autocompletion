#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-ansi-codes
source ansi-codes

# shellcheck source=lib-interactive
source interactive

# ## autocompletion::start
#
# Displays an autocompletion box starting at a given location. Allows
# the user to type a text in the given row betwen a starting column and
# ending column (included). Longer text are shifted to fit between
# the two columns.
#
# The user can type character to filter down a list of suggestions,
# navigate up and down between suggestions, insert a suggestion using
# TAB or ENTER, press ESC to close the autocompletion box, and ALT+ENTER to
# submit the input (or just ENTER when the box is closed).
#
# The autocompletion box will position itself depending on the screen size
# and the starting position of the text.
#
# The multiple options allows to use this function to ask for any user input
# as long as it is on a single line.
#
# - $1: **start line** _as int_:
#       The line/row at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $2: **start column** _as int_:
#       The column at which the autocompleted text starts (this is used to
#       compute how to display the box).
# - $3: **stop column** _as int_:
#       The column at which to stop showing the autocompleted text.
#       Longer texts get shifted to display the end of the user input.
# - $4: **array name** _as string_:
#       The items to display (name of a global array which contains the items).
# - $5: initial filter _as string_:
#       (optional) The initial filter string, which corresponds to the text already entered
#       by the user at the moment the autocompletion box shows up.
#       (defaults to empty)
# - $6: max lines _as int_:
#       optional) The maximum number of lines/rows to use for the autocompletion box.
#       (defaults to a maximized auto-computed value depending on the items and screen size)
# - $7: force box below _as bool_:
#       (optional) If true, the box is forced to be displayed below the input text.
#       Otherwise it will depend on the space required and space available below/above.
#       (defaults to false)
#
# Returns:
#
# - `RETURNED_VALUE`: The entered value (or empty).
# - `RETURNED_VALUE2`: The string displayed on the screen between the 2 columns at the
#                      moment when the autocompletion was closed.
#
# ```bash
# autocompletion::start "Select an item" item_array_name "onItemSelected" "Details"
# ```
function autocompletion::start() {
  AUTOCOMPLETION_START_LINE="${1}"
  AUTOCOMPLETION_START_COLUMN="${2}"
  AUTOCOMPLETION_STOP_COLUMN="${3}"

  local -i maxItemLength=0
  if [[ -n "${4:-}" ]]; then
    local -n originalItems="${4}"
    AUTOCOMPLETION_ORIGINAL_ITEMS=("${originalItems[@]}")
    local item
    for item in "${AUTOCOMPLETION_ORIGINAL_ITEMS[@]}"; do
      if (( ${#item} > maxItemLength )); then
        maxItemLength=${#item}
      fi
    done
  else
    AUTOCOMPLETION_ORIGINAL_ITEMS=()
  fi
  AUTOCOMPLETION_USER_STRING="${5:-}"

  AUTOCOMPLETION_PROMPT_WIDTH=$((AUTOCOMPLETION_STOP_COLUMN - AUTOCOMPLETION_START_COLUMN + 1))
  AUTOCOMPLETION_PROMPT_CURSOR_INDEX=0

  system::exportTerminalSize
  autocompletionComputeSize "${6:-}" "${7:-}" "${AUTOCOMPLETION_START_LINE}" "${AUTOCOMPLETION_START_COLUMN}" "${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}" "${maxItemLength}"

  AUTOCOMPLETION_FILTERED_ITEMS=()

  # set up colors
  if [[ ${VALET_CONFIG_ENABLE_COLORS:-} == "true" ]]; then
    AUTOCOMPLETION_COLOR_RESET_TEXT="${VALET_CONFIG_AUTOCOMPLETION_RESET_TEXT:-"${AC__TEXT_RESET}"}"
    AUTOCOMPLETION_COLOR_STATIC="${VALET_CONFIG_AUTOCOMPLETION_STATIC:-"${AC__FG_BRIGHT_BLACK}"}"
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT="${VALET_CONFIG_AUTOCOMPLETION_LETTER_HIGHLIGHT:-"${AC__TEXT_INVERSE}${AC__FG_MAGENTA}"}"
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT_RESET="${VALET_CONFIG_AUTOCOMPLETION_LETTER_HIGHLIGHT_RESET:-"${AC__TEXT_NO_INVERSE}${AC__FG_RESET}"}"
    AUTOCOMPLETION_COLOR_SELECTED_ITEM="${VALET_CONFIG_AUTOCOMPLETION_SELECTED_ITEM:-"${AC__BG_BLACK}"}"
    AUTOCOMPLETION_COLOR_SELECTED_ITEM_RESET="${VALET_CONFIG_AUTOCOMPLETION_SELECTED_ITEM_RESET:-"${AC__BG_RESET}"}"
    AUTOCOMPLETION_COLOR_COUNT="${VALET_CONFIG_AUTOCOMPLETION_COUNT:-"${AC__FG_YELLOW}"}"
    AUTOCOMPLETION_COLOR_COUNT_RESET="${VALET_CONFIG_AUTOCOMPLETION_COUNT_RESET:-"${AC__TEXT_RESET}"}"
  else
    AUTOCOMPLETION_COLOR_RESET_TEXT=""
    AUTOCOMPLETION_COLOR_STATIC=""
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT="${AC__TEXT_INVERSE}"
    AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT_RESET="${AC__TEXT_NO_INVERSE}"
    AUTOCOMPLETION_COLOR_SELECTED_ITEM=""
    AUTOCOMPLETION_COLOR_SELECTED_ITEM_RESET=""
    AUTOCOMPLETION_COLOR_COUNT=""
    AUTOCOMPLETION_COLOR_COUNT_RESET=""
  fi


  AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION=false


  # before starting to wait for inputs, we clear up the key pressed
  interactive::clearKeyPressed

  drawAutocompletionBox
  drawPrompt

  # main loop
  while true; do
    if interactive::waitForKey -t 0.05; then
      onKeyPressed "${LAST_KEY_PRESSED}"
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 || ${AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION} == "true" ]]; then break; fi
  done


  RETURNED_VALUE=aaaa
  RETURNED_VALUE2=bb
}

# compute the size of the autocompletion box and top/left location
# AUTOCOMPLETION_HEIGHT / AUTOCOMPLETION_TOP
# AUTOCOMPLETION_WIDTH / AUTOCOMPLETION_LEFT
function autocompletionComputeSize() {
  local maxLines="${1:-9999}"
  local forceBelow="${2:-}"
  local startLine="${3}"
  local startColumn="${4}"
  local nbItems="${5}"
  local maxItemLength="${6}"


  local below=true
  local maxAvailableLines=$((GLOBAL_LINES - startLine))
  if [[ ${forceBelow} != "true" ]]; then
    if (( nbItems > maxAvailableLines && startLine - 1 > maxAvailableLines )); then
      maxAvailableLines=$(( startLine - 1 ))
      below=false
    fi
  fi
  maxLines=$(( maxLines >= maxAvailableLines ? maxAvailableLines : maxLines ))
  AUTOCOMPLETION_HEIGHT=$(( nbItems >= maxLines ? maxLines : nbItems ))
  if [[ ${below} == "true" ]]; then
    AUTOCOMPLETION_TOP=$(( startLine + 1 ))
  else
    AUTOCOMPLETION_TOP=$(( startLine - AUTOCOMPLETION_HEIGHT ))
  fi

  AUTOCOMPLETION_WIDTH=$(( maxItemLength >= GLOBAL_COLUMNS ? GLOBAL_COLUMNS : maxItemLength ))
  AUTOCOMPLETION_LEFT=$(( GLOBAL_COLUMNS - startColumn + 1 > AUTOCOMPLETION_WIDTH ? startColumn : GLOBAL_COLUMNS - AUTOCOMPLETION_WIDTH + 1 ))

  if (( AUTOCOMPLETION_WIDTH < 10 )); then
    AUTOCOMPLETION_WIDTH=10
  fi
  if (( AUTOCOMPLETION_HEIGHT < 1 )); then
    AUTOCOMPLETION_HEIGHT=1
  fi
}

# Called when a key is pressed.
function onKeyPressed() {
  case ${LAST_KEY_PRESSED} in
  ESC)
    AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION=true
    return 0
    ;;
  $'\n')
    # if we selected index is within the range of the filtered items
    # we can return the corresponding index in the original items
    getCurrentInitialItemsIndex
    AUTOCOMPLETION_FINAL_SELECTION_INDEX=${RETURNED_VALUE}
    AUTOCOMPLETION_CLOSE_INTERACTIVE_SESSION=true
    return 0
    ;;
  PAGE_DOWN)
    changeRightPaneStartIndex 3
    drawRightPane
    ;;
  PAGE_UP)
    changeRightPaneStartIndex -3
    drawRightPane
    ;;
  RIGHT)
    changeRightPaneStartIndex 1
    drawRightPane
    ;;
  LEFT)
    changeRightPaneStartIndex -1
    drawRightPane
    ;;
  UP)
    changeSelectedItemIndex -1
    drawAutocompletionBox
    ;;
  DOWN)
    changeSelectedItemIndex 1
    drawAutocompletionBox
    ;;
  DEL)
    AUTOCOMPLETION_USER_STRING=""
    drawAutocompletionBox
    ;;
  *)
    # Case of keys that are supposed to only affect the search string
    case ${LAST_KEY_PRESSED} in
    BACKSPACE)
      AUTOCOMPLETION_USER_STRING="${AUTOCOMPLETION_USER_STRING%?}"
      drawAutocompletionBox
      ;;
    # normal key
    ?)
      # if we pressed a special key less than 0.4s after the previous one,
      # we ignore it
      if ((${EPOCHREALTIME//./} - ${LAST_KEY_PRESS_TIME:-"-99999"} < 400000)); then
        return 0
      fi
      LAST_KEY_PRESS_TIME=-999999

      AUTOCOMPLETION_USER_STRING+="${LAST_KEY_PRESSED}"
      drawAutocompletionBox
      ;;
    esac
    drawPrompt
    return 0
    ;;
  esac
  LAST_KEY_PRESS_TIME="${EPOCHREALTIME//./}"
  drawPrompt
}

# Draw the prompt line
function drawPrompt() {

  printf '%s' "${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}$((AUTOCOMPLETION_LEFT_PANE_FIRST_LINE));$((AUTOCOMPLETION_PROMPT_WIDTH))${__AC__TO}${AC__ERASE_CHARS_LEFT}"$'\r'"${AUTOCOMPLETION_COLOR_STATIC}> ${AUTOCOMPLETION_COLOR_RESET_TEXT}${AUTOCOMPLETION_COLOR_FOCUS}${prompt}${AC__CURSOR_SHOW}"
}

# This method uses the following global variables:
# - AUTOCOMPLETION_USER_STRING
# - AUTOCOMPLETION_PROMPT_CURSOR_INDEX
# - AUTOCOMPLETION_PROMPT_WIDTH
# It returns the prompt string to display and the relative position
# of the cursor whithin this prompt string.
# It correctly cuts the user string and adds the necessary ellipsis
# - RETURNED_VALUE: the string to display
# - RETURNED_VALUE2: the position of the cursor within this string
function autocompletionGetDisplayedPromptString() {
  local -i initialPromptLength=${#AUTOCOMPLETION_USER_STRING}
  local -i cursorIndex

  # compute where we will display the cursor in the prompt
  if ((AUTOCOMPLETION_PROMPT_CURSOR_INDEX >= AUTOCOMPLETION_PROMPT_WIDTH)); then
    if ((AUTOCOMPLETION_PROMPT_CURSOR_INDEX >= initialPromptLength - 1)); then
      # we display it in the last position if it is at the end of the string
      cursorIndex=$((AUTOCOMPLETION_PROMPT_WIDTH - 1))
    else
      # we display at the second last position if it is not at the end
      cursorIndex=$((AUTOCOMPLETION_PROMPT_WIDTH - 2))
    fi
  else
    if ((initialPromptLength - AUTOCOMPLETION_PROMPT_CURSOR_INDEX == 2)); then
      cursorIndex=$((AUTOCOMPLETION_PROMPT_WIDTH - 2))
    else
      # if it is already within the prompt, we display it at the right position
      cursorIndex=${AUTOCOMPLETION_PROMPT_CURSOR_INDEX}
    fi
  fi

  local -i displayedLeftLength=$((cursorIndex))
  local -i realLeftLength=$((AUTOCOMPLETION_PROMPT_CURSOR_INDEX))

  local prompt=""

  # compute what to display at the left of the character under the caret (if any)
  if ((displayedLeftLength > 0)); then
    if ((realLeftLength > displayedLeftLength)); then
      # we can't display the whole left string, so we display ellipsis
      if ((displayedLeftLength > 1)); then
        prompt+="…${AUTOCOMPLETION_USER_STRING:$((realLeftLength - displayedLeftLength + 1)):$((displayedLeftLength - 1))}"
      else
        prompt+="…"
      fi
    else
      prompt+="${AUTOCOMPLETION_USER_STRING:$((realLeftLength - displayedLeftLength)):$((displayedLeftLength))}"
    fi
  fi

  # compute the character to display under the caret (if any)
  if ((initialPromptLength > 0 && AUTOCOMPLETION_PROMPT_CURSOR_INDEX <= initialPromptLength)); then
    prompt+="${AUTOCOMPLETION_USER_STRING:$((AUTOCOMPLETION_PROMPT_CURSOR_INDEX)):1}"
  fi

  # compute what to display at the right of the character under the caret (if any)
  local -i displayedRightLength=$((AUTOCOMPLETION_PROMPT_WIDTH - cursorIndex - 1))
  local -i realRightLength=$((initialPromptLength - AUTOCOMPLETION_PROMPT_CURSOR_INDEX - 1))

  if ((displayedRightLength > 0)); then
    if ((realRightLength > displayedRightLength)); then
      # we can't display the whole right string, so we display ellipsis
      if ((displayedRightLength > 1)); then
        prompt+="${AUTOCOMPLETION_USER_STRING:$((initialPromptLength - realRightLength)):$((displayedRightLength - 1))}…"
      else
        prompt+="…"
      fi
    else
      prompt+="${AUTOCOMPLETION_USER_STRING:$((initialPromptLength - realRightLength)):$((displayedRightLength))}"
    fi
  fi

  RETURNED_VALUE="${prompt}"
  RETURNED_VALUE2=${cursorIndex}
}


# Draw the autocompletion box
function drawAutocompletionBox() {
  local IFS
  local toPrint="${AC__CURSOR_HIDE}${AUTOCOMPLETION_COLOR_RESET_TEXT}"

  getCurrentInitialItemsIndex
  local initialOriginalIndex=${RETURNED_VALUE}
  local initialNbFilteredItems=${#AUTOCOMPLETION_FILTERED_ITEMS[@]}

  # Compute filtered items
  if [[ -n ${AUTOCOMPLETION_USER_STRING} ]]; then

    array::fuzzyFilterSort "${AUTOCOMPLETION_USER_STRING}" AUTOCOMPLETION_ORIGINAL_ITEMS "${AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT}" "${AUTOCOMPLETION_COLOR_LETTER_HIGHLIGHT_RESET}" "$((AUTOCOMPLETION_LEFT_PANE_WIDTH - 4))"
    AUTOCOMPLETION_FILTERED_ITEMS=("${RETURNED_ARRAY[@]}")
    AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES=("${RETURNED_ARRAY2[@]}")
  else
    # for each item longer than the left width, cut and add ellipsis
    AUTOCOMPLETION_FILTERED_ITEMS=()
    local line
    for line in "${AUTOCOMPLETION_ORIGINAL_ITEMS[@]}"; do
      if ((${#line} > AUTOCOMPLETION_LEFT_PANE_WIDTH - 3)); then
        line="${line:0:$((AUTOCOMPLETION_LEFT_PANE_WIDTH - 4))}…"
      fi
      AUTOCOMPLETION_FILTERED_ITEMS+=("${line}")
    done
    AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES=()
    for ((i = 0; i < ${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}; i++)); do
      AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES+=("${i}")
    done
    initialOriginalIndex=-1
  fi

  # make sure to select an existing index regarding the newly filtered items +
  # make sure it is in the view
  changeSelectedItemIndex 0

  # if we are not pointing to the same original item, we need to
  # recompute the right pane content
  getCurrentInitialItemsIndex
  local newOriginalIndex=${RETURNED_VALUE}
  if [[ ${initialOriginalIndex} -ne ${newOriginalIndex} ]]; then
    AUTOCOMPLETION_RECOMPUTE_RIGHT_PANE_CONTENT=${AUTOCOMPLETION_HAS_PREVIEW}
  fi

  # draw the items count
  if ((${#AUTOCOMPLETION_FILTERED_ITEMS[@]} != initialNbFilteredItems)); then
    local itemCount="${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}"
    local itemsCounter
    printf -v itemsCounter " %s%0${#itemCount}i%s/%i%s " "${AUTOCOMPLETION_COLOR_COUNT}" "${#AUTOCOMPLETION_FILTERED_ITEMS[@]}" "${AUTOCOMPLETION_COLOR_COUNT_RESET}${AUTOCOMPLETION_COLOR_STATIC}" "${#AUTOCOMPLETION_ORIGINAL_ITEMS[@]}" "${AUTOCOMPLETION_COLOR_RESET_TEXT}"
    local itemCounterLength=$((3 + ${#itemCount} * 2))
    toPrint+="${AC__CURSOR_MOVE__}$((AUTOCOMPLETION_LEFT_PANE_FIRST_LINE + 1));$((AUTOCOMPLETION_LEFT_PANE_WIDTH - itemCounterLength))${__AC__TO}${itemsCounter}"
  fi

  # draw the items
  local itemPrefix
  local -i index line=${AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE}
  local -i max=$((AUTOCOMPLETION_START_INDEX + AUTOCOMPLETION_HEIGHT - 1))
  max=$((max > ${#AUTOCOMPLETION_FILTERED_ITEMS[@]} - 1 ? ${#AUTOCOMPLETION_FILTERED_ITEMS[@]} - 1 : max))
  for ((index = AUTOCOMPLETION_START_INDEX; index <= max; index++)); do
    if ((index == AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX)); then
      itemPrefix="${AUTOCOMPLETION_COLOR_SELECTED_ITEM}${AUTOCOMPLETION_COLOR_FOCUS}◆ ${AUTOCOMPLETION_COLOR_FOCUS_RESET}"
    else
      itemPrefix="  "
    fi
    toPrint+="${AC__CURSOR_MOVE__}${line};${AUTOCOMPLETION_LEFT_PANE_WIDTH}${__AC__TO}${AC__ERASE_CHARS_LEFT}"$'\r'"${itemPrefix}${AUTOCOMPLETION_FILTERED_ITEMS[index]}${AUTOCOMPLETION_COLOR_SELECTED_ITEM_RESET}"
    line+=1
  done

  # clear the remaining lines
  for ((line = AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE + line - AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE; line < AUTOCOMPLETION_LEFT_PANE_FIRST_CONTENT_LINE + AUTOCOMPLETION_HEIGHT; line++)); do
    toPrint+="${AC__CURSOR_MOVE__}${line};${AUTOCOMPLETION_LEFT_PANE_WIDTH}${__AC__TO}${AC__ERASE_CHARS_LEFT}"
  done

  printf '%s' "${toPrint}"
}

# Returns the index of the item in the original array (if any, or -1).
# It returns in the RETURNED_VALUE variable.
function getCurrentInitialItemsIndex() {
  if ((AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX >= 0 && AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX < ${#AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES[@]})); then
    RETURNED_VALUE=${AUTOCOMPLETION_FILTERED_ITEMS_CORRESPONDANCES[${AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX}]}
    return 0
  fi
  RETURNED_VALUE=-1
}

# Modifies the selected item index.
# Make it loop.
#
# $1: The delta to apply to the current index.
#
# Usage:
#   changeSelectedItemIndex 1
function changeSelectedItemIndex() {
  local delta="${1:-0}"

  # if we have no items, we do nothing
  if [[ ${#AUTOCOMPLETION_FILTERED_ITEMS[@]} -eq 0 ]]; then
    AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX=-1
    return 0
  fi

  # compute the new index (cycle through)
  local newIndex=$((AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX + delta))
  if ((newIndex < 0)); then
    newIndex=$((${#AUTOCOMPLETION_FILTERED_ITEMS[@]} - 1))
  elif ((newIndex >= ${#AUTOCOMPLETION_FILTERED_ITEMS[@]})); then
    newIndex=0
  fi

  # now we need to adjust the start index if needed
  # to make sure that the new index is visible on the screen
  if ((newIndex < AUTOCOMPLETION_START_INDEX)); then
    AUTOCOMPLETION_START_INDEX=${newIndex}
  elif ((newIndex > AUTOCOMPLETION_START_INDEX + AUTOCOMPLETION_HEIGHT - 1)); then
    AUTOCOMPLETION_START_INDEX=$((newIndex - AUTOCOMPLETION_HEIGHT + 1))
  fi

  AUTOCOMPLETION_SELECTED_FILTERED_ITEM_INDEX=${newIndex}
}