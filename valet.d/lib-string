#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.


# Allows to get the nth element of a string separated by a given separator.
# This is the equivalent of the cut command "cut -d"${separator}" -f"${fieldNumber}""
# but it uses pure bash to go faster.
# $1: the string to cut
# $2: the field number to get (starting at 1)
# $3: the separator (default to tab if not provided)
#
# Usage:
#  cutF "field1 field2 field3" 2 " " && local field2="${LAST_RETURNED_VALUE}"
#
# Notes:
#  To be fast, it does not check the number of fields in the string.
#  If the field number is higher than the number of fields, it will return the last field, not an empty string.
function cutF() {
  local str fieldNumber separator
  str="${1}"
  fieldNumber="${2}"
  separator="${3:-$'\t'}"

  # TODO: try to refactor using find index of separator and another using IFS

  local index

  # remove the first field n - 1 times
  for((index=0; index < (fieldNumber - 1); index++)); do
    str="${str#*"${separator}"}"
  done

  # remove everything after the first field
  str="${str%%"${separator}"*}"

  LAST_RETURNED_VALUE="${str}"
}

# This function allows to bump a semantic version formatted like:
# major.minor.patch-prerelease+build
# $1: the version to bump
# $2: the level to bump (major, minor, patch)
# $3: clear the prerelease and build (optional, defaults to true)
#
# Usage:
#   bumpSemanticVersion "1.2.3-prerelease+build" "major" && local newVersion="${LAST_RETURNED_VALUE}"
function bumpSemanticVersion() {
  local version level clearPreRelease
  version="${1}"
  bumpLevel="${2}"
  clearPreRelease="${3:-true}"

  local prerelease build modifiedVersion
  modifiedVersion="${version}-+"
  prerelease="${modifiedVersion#*-}"
  prerelease="${prerelease%%+*}"
  [[ -n "${prerelease}" ]] && prerelease="-${prerelease%-}"
  build="${modifiedVersion#*+}"
  if [[ -n "${build}" ]]; then
    build="+${build%-+}"
  fi

  # bump the version
  local -i level semVerNumber semVerIndex
  level=3
  [[ "${bumpLevel:-}" == "major" ]] && level=1
  [[ "${bumpLevel:-}" == "minor" ]] && level=2
  local newVersion semVerString
  for semVerIndex in {1..3}; do
    cutF "${version}" "${semVerIndex}" "." && semVerString="${LAST_RETURNED_VALUE%-*}"
    semVerNumber="${semVerString%+}"
    [[ semVerIndex -eq level ]] && semVerNumber=$((semVerNumber + 1))
    [[ semVerIndex -gt level ]] && semVerNumber=0
    newVersion+="${semVerNumber}."
  done
  newVersion="${newVersion%.}"

  if [[ "${clearPreRelease}" != "true" ]]; then
    newVersion="${newVersion%.}${prerelease}${build}"
  fi

  LAST_RETURNED_VALUE="${newVersion}"
}

# This function convert a camelCase string to a SNAKE_CASE string.
# It uses pure bash.
# Removes all leading underscores.
#
# $1: The camelCase string to convert.
#
# Returns:
#   LAST_RETURNED_VALUE: The SNAKE_CASE string.
#
# Usage:
#   camelCaseToSnakeCase "myCamelCaseString" && local mySnakeCaseString="${LAST_RETURNED_VALUE}"
function camelCaseToSnakeCase() {
  local camelCase="$1"
  local snakeCase=""
  local -i charIndex strLength=${#camelCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${camelCase:charIndex:1}"
    if [[ "${char}" =~ ^[[:upper:]]$ ]]; then
      snakeCase+="_${char^}"
    else
      snakeCase+="${char^}"
    fi
  done
  while [[ "${snakeCase}" == _* ]]; do
    snakeCase="${snakeCase:1}"
  done
  LAST_RETURNED_VALUE="${snakeCase}"
}

# This function convert a kebab-case string to a SNAKE_CASE string.
# It uses pure bash.
# Removes all leading dashes.
#
# $1: The kebab-case string to convert.
#
# Returns:
#   LAST_RETURNED_VALUE: The SNAKE_CASE string.
#
# Usage:
#   kebabCaseToSnakeCase "my-kebab-case-string" && local mySnakeCaseString="${LAST_RETURNED_VALUE}"
function kebabCaseToSnakeCase() {
  local kebabCase="$1"
  local snakeCase=""
  local -i charIndex strLength=${#kebabCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${kebabCase:charIndex:1}"
    if [[ "${char}" == "-" ]]; then
      snakeCase+="_"
    else
      snakeCase+="${char^}"
    fi
  done
  while [[ "${snakeCase}" == _* ]]; do
    snakeCase="${snakeCase:1}"
  done
  LAST_RETURNED_VALUE="${snakeCase}"
}

# This function convert a kebab-case string to a camelCase string.
# It uses pure bash.
# Removes all leading dashes.
#
# $1: The kebab-case string to convert.
#
# Returns:
#   LAST_RETURNED_VALUE: The camelCase string.
#
# Usage:
#   kebabCaseToCamelCase "my-kebab-case-string" && local myCamelCaseString="${LAST_RETURNED_VALUE}"
function kebabCaseToCamelCase() {
  local kebabCase="$1"
  local camelCase=""
  local -i charIndex strLength=${#kebabCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${kebabCase:charIndex:1}"
    if [[ "${char}" == "-" ]]; then
      continue
    fi
    if [[ "${kebabCase:charIndex-1:1}" == "-" ]]; then
      camelCase+="${char^}"
    else
      camelCase+="${char}"
    fi
  done
  LAST_RETURNED_VALUE="${camelCase,}"
}

# Trim all whitespaces and truncate spaces.
#
# $1: The string to trim.
#
# Returns:
#   LAST_RETURNED_VALUE: The trimmed string.
#
# Usage:
#   trimAll "   example   string    " && local trimmedString="${LAST_RETURNED_VALUE}"
function trimAll() {
    set -f
    set -- $*
    LAST_RETURNED_VALUE="$*"
    set +f
}

# Find the first index of a string within another string.
#
# $1: the string in which to search
# $2: the string to search
# $3: the starting index (default to 0)
#
# Returns:
#  The index of the substring in the string or -1 if not found in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  indexOf "This is a long text" "long" && local index="${LAST_RETURNED_VALUE}"
#  indexOf "This is a long text" "long" 10 && local index="${LAST_RETURNED_VALUE}"
function indexOf() {
  local search string
  local -i startingIndex
  string="${1}"
  search="${2}"
  startingIndex=${3:-0}

  local -i stringLength
  stringLength="${#string}"

  if [[ startingIndex -gt 0 ]]; then
    # if the starting index is greater than the length of the string, we return -1
    if [[ startingIndex -ge stringLength ]]; then
      LAST_RETURNED_VALUE=-1
      echo "nop"
      return 0
    fi

    # otherwise we keep only what is after this index
    string="${string:${startingIndex}}"
  fi

  stringLength="${#string}"

  # if the string starts with the search, we have our index
  if [[ "${string}" == "${search}"* ]]; then
      echo "yeah"
    LAST_RETURNED_VALUE=${startingIndex}
    return 0
  fi

  # cut everything after the search string
  local tempString
  tempString="${string%%"${search}"*}"
  local -i tempStringLength="${#tempString}"

  # the index is the length of the temp string if it is different than the initial string lenght
  if [[ tempStringLength -ne stringLength ]]; then
    LAST_RETURNED_VALUE=$((tempStringLength + startingIndex))
  else
    LAST_RETURNED_VALUE=-1
  fi
  return 0
}

# Extract the text between two strings within a string.
# Search for the first occurence of the start string and the first occurence
# (after the start index) of the end string.
# Both start and end strings are excluded in the extracted text.
# Both start and end strings must be found to extract something.
#
# $1: the string in which to search
# $2: the start string (if empty, then it will extract from the beginning of the string)
# $3: the end string (if empty, then it will extract until the end of the string)
#
# Returns:
#  The extracted text in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  extractBetween "This is a long text" "is a " " text" && local extractedText="${LAST_RETURNED_VALUE}"
function extractBetween() {
  local string start end
  string="${1}"
  start="${2}"
  end="${3}"

  local -i startIndex endIndex

  if [[ -n "${start}" ]]; then
    indexOf "${string}" "${start}" && startIndex="${LAST_RETURNED_VALUE}"
    if [[ startIndex -eq -1 ]]; then
      LAST_RETURNED_VALUE=""
      return 0
    fi
    startIndex=$((startIndex + ${#start}))
  else
    startIndex=0
  fi

  if [[ -n "${end}" ]]; then
    indexOf "${string}" "${end}" "${startIndex}" && endIndex="${LAST_RETURNED_VALUE}"
    if [[ endIndex -eq -1 ]]; then
      LAST_RETURNED_VALUE=""
      return 0
    fi
  else
    LAST_RETURNED_VALUE="${string:${startIndex}}"
    return 0
  fi

  local -i extractedLength
  extractedLength=$((endIndex - startIndex))
  LAST_RETURNED_VALUE="${string:${startIndex}:${extractedLength}}"
}