#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.


# Allows to get the nth element of a string separated by a given separator.
# This is the equivalent of the cut command "cut -d"${separator}" -f"${fieldNumber}""
# but it uses pure bash to go faster.
#
# $1: the string to cut
# $2: the field number to get (starting at 0)
# $3: the separator (default to tab if not provided)
#
# Usage:
#  string::cutField "field1 field2 field3" 1 " " && local field="${LAST_RETURNED_VALUE}"
#  echo "${field}" # will output "field2"
#
# Notes:
#  This is faster than:
#  - using read into an array from a here string
#  - using bash parameter expansion to remove before/after the separator
function string::cutField() {
  local str fieldNumber separator
  str="${1}"
  fieldNumber="${2}"
  separator="${3:-$'\t'}"

  local field IFS="${separator}"
  local -i index=0
  for field in ${str}; do
    if [[ index -eq fieldNumber ]]; then
      LAST_RETURNED_VALUE="${field}"
      return 0
    fi
    index=$((index + 1))
  done
  LAST_RETURNED_VALUE=""
}

# This function allows to bump a semantic version formatted like:
# major.minor.patch-prerelease+build
# $1: the version to bump
# $2: the level to bump (major, minor, patch)
# $3: clear the prerelease and build (optional, defaults to true)
#
# Usage:
#   string::bumpSemanticVersion "1.2.3-prerelease+build" "major" && local newVersion="${LAST_RETURNED_VALUE}"
function string::bumpSemanticVersion() {
  local version level clearPreRelease
  version="${1}"
  bumpLevel="${2}"
  clearPreRelease="${3:-true}"

  local prerelease build modifiedVersion
  modifiedVersion="${version}-+"
  prerelease="${modifiedVersion#*-}"
  prerelease="${prerelease%%+*}"
  if [[ -n "${prerelease}" ]]; then prerelease="-${prerelease%-}"; fi
  build="${modifiedVersion#*+}"
  if [[ -n "${build}" ]]; then
    build="+${build%-+}"
  fi

  # bump the version
  local -i level semVerNumber semVerIndex
  level=2
  if [[ ${bumpLevel:-} == "major" ]]; then level=0; fi
  if [[ ${bumpLevel:-} == "minor" ]]; then level=1; fi
  local newVersion semVerString
  for semVerIndex in {0..2}; do
    string::cutField "${version}" "${semVerIndex}" "." && semVerString="${LAST_RETURNED_VALUE%-*}"
    semVerNumber="${semVerString%+}"
    if [[ semVerIndex -eq level ]]; then semVerNumber=$((semVerNumber + 1)); fi
    if [[ semVerIndex -gt level ]]; then semVerNumber=0; fi
    newVersion+="${semVerNumber}."
  done
  newVersion="${newVersion%.}"

  if [[ "${clearPreRelease}" != "true" ]]; then
    newVersion="${newVersion%.}${prerelease}${build}"
  fi

  LAST_RETURNED_VALUE="${newVersion}"
}

# This function convert a camelCase string to a SNAKE_CASE string.
# It uses pure bash.
# Removes all leading underscores.
#
# $1: The camelCase string to convert.
#
# Returns:
#   LAST_RETURNED_VALUE: The SNAKE_CASE string.
#
# Usage:
#   string::camelCaseToSnakeCase "myCamelCaseString" && local mySnakeCaseString="${LAST_RETURNED_VALUE}"
function string::camelCaseToSnakeCase() {
  local camelCase="${1}"
  local snakeCase=""
  local -i charIndex strLength=${#camelCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${camelCase:charIndex:1}"
    if [[ ${char} =~ ^[[:upper:]]$ ]]; then
      snakeCase+="_${char^}"
    else
      snakeCase+="${char^}"
    fi
  done
  while [[ ${snakeCase} == _* ]]; do
    snakeCase="${snakeCase:1}"
  done
  LAST_RETURNED_VALUE="${snakeCase}"
}

# This function convert a kebab-case string to a SNAKE_CASE string.
# It uses pure bash.
# Removes all leading dashes.
#
# $1: The kebab-case string to convert.
#
# Returns:
#   LAST_RETURNED_VALUE: The SNAKE_CASE string.
#
# Usage:
#   string::kebabCaseToSnakeCase "my-kebab-case-string" && local mySnakeCaseString="${LAST_RETURNED_VALUE}"
function string::kebabCaseToSnakeCase() {
  local kebabCase="${1}"
  local snakeCase=""
  local -i charIndex strLength=${#kebabCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${kebabCase:charIndex:1}"
    if [[ ${char} == "-" ]]; then
      snakeCase+="_"
    else
      snakeCase+="${char^}"
    fi
  done
  while [[ ${snakeCase} == _* ]]; do
    snakeCase="${snakeCase:1}"
  done
  LAST_RETURNED_VALUE="${snakeCase}"
}

# This function convert a kebab-case string to a camelCase string.
# It uses pure bash.
# Removes all leading dashes.
#
# $1: The kebab-case string to convert.
#
# Returns:
#   LAST_RETURNED_VALUE: The camelCase string.
#
# Usage:
#   string::kebabCaseToCamelCase "my-kebab-case-string" && local myCamelCaseString="${LAST_RETURNED_VALUE}"
function string::kebabCaseToCamelCase() {
  local kebabCase="${1}"
  local camelCase=""
  local -i charIndex strLength=${#kebabCase}
  local char
  for ((charIndex = 0; charIndex < strLength; charIndex++)); do
    char="${kebabCase:charIndex:1}"
    if [[ ${char} == "-" ]]; then
      continue
    fi
    if [[ ${kebabCase:charIndex-1:1} == "-" ]]; then
      camelCase+="${char^}"
    else
      camelCase+="${char}"
    fi
  done
  LAST_RETURNED_VALUE="${camelCase,}"
}

# Trim all whitespaces and truncate spaces.
#
# $1: The string to trim.
#
# Returns:
#   LAST_RETURNED_VALUE: The trimmed string.
#
# Usage:
#   string::trimAll "   example   string    " && local trimmedString="${LAST_RETURNED_VALUE}"
function string::trimAll() {
    set -f
    # shellcheck disable=SC2086
    # shellcheck disable=SC2048
    set -- $*
    LAST_RETURNED_VALUE="$*"
    set +f
}

# Find the first index of a string within another string.
#
# $1: the string in which to search
# $2: the string to search
# $3: the starting index (default to 0)
#
# Returns:
#  The index of the substring in the string or -1 if not found in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  string::indexOf "This is a long text" "long" && local index="${LAST_RETURNED_VALUE}"
#  string::indexOf "This is a long text" "long" 10 && local index="${LAST_RETURNED_VALUE}"
function string::indexOf() {
  local search string
  local -i startingIndex
  string="${1}"
  search="${2}"
  startingIndex=${3:-0}

  local -i stringLength
  stringLength="${#string}"

  if [[ startingIndex -gt 0 ]]; then
    # if the starting index is greater than the length of the string, we return -1
    if [[ startingIndex -ge stringLength ]]; then
      LAST_RETURNED_VALUE=-1
      echo "nop"
      return 0
    fi

    # otherwise we keep only what is after this index
    string="${string:${startingIndex}}"
  fi

  stringLength="${#string}"

  # if the string starts with the search, we have our index
  if [[ ${string} == "${search}"* ]]; then
      echo "yeah"
    LAST_RETURNED_VALUE=${startingIndex}
    return 0
  fi

  # cut everything after the search string
  local tempString
  tempString="${string%%"${search}"*}"
  local -i tempStringLength="${#tempString}"

  # the index is the length of the temp string if it is different than the initial string lenght
  if [[ tempStringLength -ne stringLength ]]; then
    LAST_RETURNED_VALUE=$((tempStringLength + startingIndex))
  else
    LAST_RETURNED_VALUE=-1
  fi
  return 0
}

# Extract the text between two strings within a string.
# Search for the first occurence of the start string and the first occurence
# (after the start index) of the end string.
# Both start and end strings are excluded in the extracted text.
# Both start and end strings must be found to extract something.
#
# $1: the string in which to search
# $2: the start string (if empty, then it will extract from the beginning of the string)
# $3: the end string (if empty, then it will extract until the end of the string)
#
# Returns:
#  The extracted text in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  string::extractBetween "This is a long text" "is a " " text" && local extractedText="${LAST_RETURNED_VALUE}"
function string::extractBetween() {
  local string start end
  string="${1}"
  start="${2}"
  end="${3}"

  local -i startIndex endIndex

  if [[ -n "${start}" ]]; then
    string::indexOf "${string}" "${start}" && startIndex="${LAST_RETURNED_VALUE}"
    if [[ startIndex -eq -1 ]]; then
      LAST_RETURNED_VALUE=""
      return 0
    fi
    startIndex=$((startIndex + ${#start}))
  else
    startIndex=0
  fi

  if [[ -n "${end}" ]]; then
    string::indexOf "${string}" "${end}" "${startIndex}" && endIndex="${LAST_RETURNED_VALUE}"
    if [[ endIndex -eq -1 ]]; then
      LAST_RETURNED_VALUE=""
      return 0
    fi
  else
    LAST_RETURNED_VALUE="${string:${startIndex}}"
    return 0
  fi

  local -i extractedLength
  extractedLength=$((endIndex - startIndex))
  LAST_RETURNED_VALUE="${string:${startIndex}:${extractedLength}}"
}

# Counts the number of occurences of a substring in a string.
#
# $1: the string in which to search
# $2: the substring to count
#
# Returns:
#  The number of occurences in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  string::count "name,firstname,address" "," && local count="${LAST_RETURNED_VALUE}"
#
# Notes:
#   - This is faster than looping over the string and check the substring.
function string::count() {
  local string="${1}"
  local newString="${string//"${2}"/}"
  LAST_RETURNED_VALUE=$(((${#string} - ${#newString}) / ${#2}))
}

# Split a string into an array using a separator.
#
# $1: the string to split
# $2: the separator (must be a single character!)
#
# Returns:
#   The array in the global variable LAST_RETURNED_ARRAY_VALUE.
#
# Usage:
#   string::split "name,firstname,address" "," && local -a array=("${LAST_RETURNED_ARRAY_VALUE[@]}")
#
# Notes:
#   - This is faster than using read into an array from a here string.
function string::split() {
  local IFS="${2}"
  # shellcheck disable=SC2206
  LAST_RETURNED_ARRAY_VALUE=(${1})
}
