#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# fsfs stands for full srceen fuzzy search.
# This script uses a lot of "private" variables (starting with _).

# shellcheck source=lib-ansi-codes
source ansi-codes
# shellcheck source=lib-interactive
source interactive
# shellcheck source=lib-io
source io
# shellcheck source=lib-array
source array

#===============================================================
# >>> Customization
#===============================================================

FSFS_LEFT_PANE_HELP_TEXT="↑/↓: Move | Enter: Select | Esc: Quit"
FSFS_RIGHT_PANE_HELP_TEXT="←/→: Scroll | Page up/down: Scroll+"

#===============================================================
# >>> Custom drawing functions
#===============================================================

# ## fsfs::itemSelector
#
# Displays a menu where the user can search and select an item.
# The menu is displayed in full screen.
# Each item can optionally have a description/details shown in a right panel.
# The user can search for an item by typing.
#
# - $1: **prompt** _as string_:
#       The prompt to display to the user (e.g. Please pick an item).
# - $2: **array name** _as string_:
#       The items to display (name of a global array).
# - $3: select callback function name _as string_:
#       (optional) The function to call when an item is selected
#       (defaults to empty, no callback)
#       this parameter can be left empty to hide the preview right pane;
#       otherwise the callback function should have the following signature:
#   - $1: the current item
#   - $2: the item number;
#   - $3: the current panel width;
#   - it should return the details of the item in the `RETURNED_VALUE` variable.
# - $4: preview title _as string_:
#       (optional) the title of the preview right pane (if any)
#       (defaults to empty)
#
# Returns:
#
# - `RETURNED_VALUE`: The selected item value (or empty).
# - `RETURNED_VALUE2`: The selected item index (from the original array).
#                      Or -1 if the user cancelled the selection
#
# ```bash
# declare -g -a SELECTION_ARRAY
# SELECTION_ARRAY=("blue" "red" "green" "yellow")
# fsfs::itemSelector "What's your favorite color?" SELECTION_ARRAY
# log::info "You selected: ⌜${RETURNED_VALUE}⌝ (index: ⌜${RETURNED_VALUE2}⌝)"
# ```
function fsfs::itemSelector() {
  local prompt="${1}"
  local itemsArrayName="${2}"
  FSFS_ITEM_SELECTED_CALLBACK="${3:-}"
  FSFS_RIGHT_PANE_TITLE="${4:-"Details"}"

  fsfsInitialize "${itemsArrayName}"

  # save the original traps so we can restore them later
  local originalTraps
  io::invoke trap -p SIGWINCH EXIT SIGINT SIGQUIT
  originalTraps="${RETURNED_VALUE}"

  # we still need to export the terminal size but in addition, we need to fsfsDrawScreen.
  # Note: SIGWINCH does not interrupt a read command and wait for it to complete so we need
  # to set a timeout on read to allow this refresh.
  trap 'onResize;' SIGWINCH

  # still need to handle the exit, but we also need to reset the terminal when exiting.
  trap 'interactive::switchBackFromFullScreen; main::onExitInternal;' EXIT

  # interrupting closes the interactive session
  trap 'FSFS_CLOSE_INTERACTIVE_SESSION=true;' SIGINT SIGQUIT

  interactive::switchToFullScreen
  fsfsDrawScreen "${prompt}"

  # before starting to wait for inputs, we clear up the key pressed
  interactive::clearKeyPressed

  # main loop
  while true; do
    if interactive::waitForChar -t 0.05; then
      onKeyPressed "${LAST_KEY_PRESSED}"
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 || ${FSFS_CLOSE_INTERACTIVE_SESSION} == "true" ]]; then break; fi

    # redraw the screen if the terminal was resized
    if [[ ${FSFS_REDRAW_REQUIRED:-false} == "true" ]]; then
      fsfsDrawScreen "${prompt}"
    fi

    # recompute the right pane content if needed
    # only do it each 0.4s at maximum
    if [[ ${FSFS_RECOMPUTE_RIGHT_PANE_CONTENT} == "true" && $((${EPOCHREALTIME//./} - ${LAST_RECOMPUTE_RIGHT_PANE_CONTENT_TIME:-"-99999"})) -gt 400000 ]]; then
      LAST_RECOMPUTE_RIGHT_PANE_CONTENT_TIME="${EPOCHREALTIME//./}"
      computeRightPaneContent
      drawRightPane
      drawPrompt
    fi
  done

  # restore the initial traps
  eval "${originalTraps}"
  interactive::switchBackFromFullScreen

  if ((FSFS_FINAL_SELECTION_INDEX >= 0)); then
    RETURNED_VALUE="${FSFS_ORIGINAL_ITEMS[${FSFS_FINAL_SELECTION_INDEX}]}"
  else
    RETURNED_VALUE=""
  fi
  RETURNED_VALUE2="${FSFS_FINAL_SELECTION_INDEX}"
}

# Initialises the state for fsfs menu.
function fsfsInitialize() {
  local itemsArrayName="${1}"

  # see if there is a preview panel of not
  if [[ -z ${FSFS_ITEM_SELECTED_CALLBACK} ]]; then
    FSFS_HAS_PREVIEW=false
  else
    FSFS_HAS_PREVIEW=true
  fi

  # an array of items that will be displayed in the left pane
  local -n originalItems="${itemsArrayName}"

  FSFS_ORIGINAL_ITEMS=("${originalItems[@]}")

  # the list of items filtered with the search string
  # and the correspondance between the currently displayed indexes with
  # the original items indexes
  FSFS_FILTERED_ITEMS=()
  FSFS_FILTERED_ITEMS_CORRESPONDANCES=()

  FSFS_FINAL_SELECTION_INDEX=-1
  FSFS_SELECTED_FILTERED_ITEM_INDEX=0

  # index of the first item displayed in the left pane
  FSFS_LEFT_PANE_START_INDEX=0

  # index of the first line displayed in the right pane
  FSFS_RIGHT_PANE_START_INDEX=0

  # contains the current search st+ring of the user
  FSFS_SEARCH_STRING=""
  FSFS_PROMPT=""

  # switched to true when the user wants to close the session
  FSFS_CLOSE_INTERACTIVE_SESSION=false

  # set up colors
  if [[ ${VALET_CONFIG_ENABLE_COLORS:-} == "true" ]]; then
    FSFS_COLOR_RESET_TEXT="${VALET_CONFIG_FSFS_RESET_TEXT:-"${AC__TEXT_RESET}"}"
    FSFS_COLOR_STATIC="${VALET_CONFIG_FSFS_STATIC:-"${AC__FG_BRIGHT_BLACK}"}"
    FSFS_COLOR_FOCUS="${VALET_CONFIG_FSFS_FOCUS:-"${AC__FG_MAGENTA}"}"
    FSFS_COLOR_FOCUS_RESET="${VALET_CONFIG_FSFS_FOCUS_RESET:-"${AC__FG_RESET}"}"
    FSFS_COLOR_LETTER_HIGHLIGHT="${VALET_CONFIG_FSFS_LETTER_HIGHLIGHT:-"${AC__TEXT_INVERSE}${AC__FG_MAGENTA}"}"
    FSFS_COLOR_LETTER_HIGHLIGHT_RESET="${VALET_CONFIG_FSFS_LETTER_HIGHLIGHT_RESET:-"${AC__TEXT_NO_INVERSE}${AC__FG_RESET}"}"
    FSFS_COLOR_SELECTED_ITEM="${VALET_CONFIG_FSFS_SELECTED_ITEM:-"${AC__BG_BLACK}"}"
    FSFS_COLOR_SELECTED_ITEM_RESET="${VALET_CONFIG_FSFS_SELECTED_ITEM_RESET:-"${AC__BG_RESET}"}"
    FSFS_COLOR_PROMPT_STRING="${VALET_CONFIG_FSFS_PROMPT_STRING:-"${AC__FG_CYAN}${AC__TEXT_BOLD}"}"
    FSFS_COLOR_PROMPT_STRING_RESET="${VALET_CONFIG_FSFS_PROMPT_STRING_RESET:-"${AC__TEXT_RESET}"}"
    FSFS_COLOR_COUNT="${VALET_CONFIG_FSFS_COUNT:-"${AC__FG_YELLOW}"}"
    FSFS_COLOR_COUNT_RESET="${VALET_CONFIG_FSFS_COUNT_RESET:-"${AC__TEXT_RESET}"}"
  else
    FSFS_COLOR_RESET_TEXT=""
    FSFS_COLOR_STATIC=""
    FSFS_COLOR_FOCUS=""
    FSFS_COLOR_FOCUS_RESET=""
    FSFS_COLOR_LETTER_HIGHLIGHT="${AC__TEXT_INVERSE}"
    FSFS_COLOR_LETTER_HIGHLIGHT_RESET="${AC__TEXT_NO_INVERSE}"
    FSFS_COLOR_SELECTED_ITEM=""
    FSFS_COLOR_SELECTED_ITEM_RESET=""
    FSFS_COLOR_PROMPT_STRING=""
    FSFS_COLOR_PROMPT_STRING_RESET=""
    FSFS_COLOR_COUNT=""
    FSFS_COLOR_COUNT_RESET=""
  fi
}

# Draw or redraw the whole screen (initially or after a terminal resize).
function fsfsDrawScreen() {
  local prompt="${1}"
  local toPrint="${AC__CURSOR_HIDE}${FSFS_COLOR_STATIC}"

  FSFS_REDRAW_REQUIRED=false

  # clear the screen, move to the top left corner
  toPrint+="${AC__ERASE_SCREEN}${AC__CURSOR_MOVE__}1;1${__AC__TO}"

  # compute the width of the left/right panel
  if [[ ${FSFS_HAS_PREVIEW} == "true" ]]; then
    FSFS_RIGHT_PANE_WIDTH=$((GLOBAL_COLUMNS * 9 / 20))
    FSFS_LEFT_PANE_WIDTH=$((GLOBAL_COLUMNS - FSFS_RIGHT_PANE_WIDTH))
  else
    FSFS_RIGHT_PANE_WIDTH=0
    FSFS_LEFT_PANE_WIDTH=${GLOBAL_COLUMNS}
  fi

  # For the left and the right pane:
  # - compute the screen line at which to start to display the pane
  # - compute the number of content lines for the pane

  # 1. draw the prompt string
  string::wrapText "${prompt}" "$((FSFS_LEFT_PANE_WIDTH - 1))"
  prompt="${RETURNED_VALUE}"
  FSFS_LEFT_PANE_FIRST_LINE=1
  local IFS line
  toPrint+="${FSFS_COLOR_PROMPT_STRING}"
  while IFS= read -r line; do
    toPrint+="${line}"$'\n'
    FSFS_LEFT_PANE_FIRST_LINE=$((FSFS_LEFT_PANE_FIRST_LINE + 1))
  done <<<"${prompt}"
  toPrint+="${FSFS_COLOR_PROMPT_STRING_RESET}${FSFS_COLOR_STATIC}"
  FSFS_RIGHT_PANE_FIRST_LINE=1

  # on the left side, we need to have space for the prompt, separator and help
  FSFS_LEFT_PANE_FIRST_CONTENT_LINE=$((FSFS_LEFT_PANE_FIRST_LINE + 2))
  FSFS_LEFT_PANE_LINES=$((GLOBAL_LINES - (FSFS_LEFT_PANE_FIRST_LINE - 1) - 3))
  FSFS_LEFT_PANE_LINES=$((FSFS_LEFT_PANE_LINES > 0 ? FSFS_LEFT_PANE_LINES : 1))
  # on the right side, we need space for the top and bottom of the pane
  FSFS_RIGHT_PANE_FIRST_CONTENT_LINE=$((FSFS_RIGHT_PANE_FIRST_LINE + 1))
  FSFS_RIGHT_PANE_LINES=$((GLOBAL_LINES - (FSFS_RIGHT_PANE_FIRST_LINE - 1) - 2))
  FSFS_RIGHT_PANE_LINES=$((FSFS_RIGHT_PANE_LINES > 0 ? FSFS_RIGHT_PANE_LINES : 1))
  FSFS_RIGHT_PANE_MAX_DISPLAYED_LINES=$((FSFS_RIGHT_PANE_LINES - 1 - FSFS_RIGHT_PANE_START_INDEX))

  # 2. draw the left help text
  local leftHelpWidth=$((${#FSFS_LEFT_PANE_HELP_TEXT} + 2))
  local leftHelp=" ${FSFS_LEFT_PANE_HELP_TEXT} "
  if ((leftHelpWidth > FSFS_LEFT_PANE_WIDTH - 4)); then
    leftHelpWidth=0
    leftHelp=""
  fi
  toPrint+="${AC__CURSOR_MOVE__}${GLOBAL_LINES};1${__AC__TO}░─${leftHelp}─${AC__REPEAT__}$((FSFS_LEFT_PANE_WIDTH - leftHelpWidth - 4))${__AC__LAST_CHAR}"
  if [[ ${FSFS_HAS_PREVIEW} == "true" ]]; then
    toPrint+="─"
  else
    toPrint+="░"
  fi

  # 3. draw the separator of the left pane
  toPrint+="${AC__CURSOR_MOVE__}$((FSFS_LEFT_PANE_FIRST_LINE + 1));1${__AC__TO}░─${AC__REPEAT__}$((FSFS_LEFT_PANE_WIDTH - 3))${__AC__LAST_CHAR}"
  if [[ ${FSFS_HAS_PREVIEW} == "true" ]]; then
    toPrint+="─"
  else
    toPrint+="░"
  fi

  # 4. draw the static portion of the right pane
  if [[ ${FSFS_HAS_PREVIEW} == "true" ]]; then
    # first line with title
    local titleWidth=$((${#FSFS_RIGHT_PANE_TITLE} + 2))
    local title=" ${FSFS_RIGHT_PANE_TITLE} "
    # -10 to have the space to display the page counter 000/000
    if ((titleWidth > FSFS_RIGHT_PANE_WIDTH - 4 - 10)); then
      titleWidth=0
      title=""
    fi
    toPrint+="${AC__CURSOR_MOVE__}${FSFS_RIGHT_PANE_FIRST_LINE};$((FSFS_LEFT_PANE_WIDTH + 1))${__AC__TO}┌─${title}─${AC__REPEAT__}$((FSFS_RIGHT_PANE_WIDTH - titleWidth - 4))${__AC__LAST_CHAR}░"

    # last line with help
    local helpWidth=$((${#FSFS_RIGHT_PANE_HELP_TEXT} + 2))
    local help=" ${FSFS_RIGHT_PANE_HELP_TEXT} "
    if ((helpWidth > FSFS_RIGHT_PANE_WIDTH - 4)); then
      helpWidth=0
      help=""
    fi
    toPrint+="${AC__CURSOR_MOVE__}${GLOBAL_LINES};$((FSFS_LEFT_PANE_WIDTH + 1))${__AC__TO}┴─${AC__REPEAT__}$((FSFS_RIGHT_PANE_WIDTH - helpWidth - 4))${__AC__LAST_CHAR}${help}─░"

    # left border of the right pane
    for ((line = FSFS_RIGHT_PANE_FIRST_LINE + 1; line <= FSFS_RIGHT_PANE_FIRST_LINE + FSFS_RIGHT_PANE_LINES; line++)); do
      toPrint+="${AC__CURSOR_MOVE__}${line};$((FSFS_LEFT_PANE_WIDTH + 1))${__AC__TO}"
      if ((line == FSFS_LEFT_PANE_FIRST_LINE + 1)); then
        toPrint+="┤"
      else
        toPrint+="│"
      fi
    done
  fi

  printf '%s' "${toPrint}"

  # reset the fetched details because they are for a given width that might have changed
  # shellcheck disable=SC2086
  unset -v ${!FSFS_RIGHT_PANE_CONTENT_ARRAY*}
  FSFS_RECOMPUTE_RIGHT_PANE_CONTENT=${FSFS_HAS_PREVIEW}

  drawLeftPane
  drawRightPane

  # finish with the prompt line, we show the cursor again
  drawPrompt
}

# Draw the left pane content.
function drawLeftPane() {
  local IFS
  local toPrint="${AC__CURSOR_HIDE}${FSFS_COLOR_RESET_TEXT}"

  getCurrentInitialItemsIndex
  local initialOriginalIndex=${RETURNED_VALUE}
  local initialNbFilteredItems=${#FSFS_FILTERED_ITEMS[@]}

  # Compute filtered items
  if [[ -n ${FSFS_SEARCH_STRING} ]]; then
    array::fuzzyFilterSort "${FSFS_SEARCH_STRING}" FSFS_ORIGINAL_ITEMS "${FSFS_COLOR_LETTER_HIGHLIGHT}" "${FSFS_COLOR_LETTER_HIGHLIGHT_RESET}" "$((FSFS_LEFT_PANE_WIDTH - 4))"
    FSFS_FILTERED_ITEMS=("${RETURNED_ARRAY[@]}")
    FSFS_FILTERED_ITEMS_CORRESPONDANCES=("${RETURNED_ARRAY2[@]}")
  else
    # for each item longer than the left width, cut and add ellipsis
    FSFS_FILTERED_ITEMS=()
    local line
    for line in "${FSFS_ORIGINAL_ITEMS[@]}"; do
      if ((${#line} > FSFS_LEFT_PANE_WIDTH - 3)); then
        line="${line:0:$((FSFS_LEFT_PANE_WIDTH - 4))}…"
      fi
      FSFS_FILTERED_ITEMS+=("${line}")
    done
    FSFS_FILTERED_ITEMS_CORRESPONDANCES=()
    for ((i = 0; i < ${#FSFS_ORIGINAL_ITEMS[@]}; i++)); do
      FSFS_FILTERED_ITEMS_CORRESPONDANCES+=("${i}")
    done
    initialOriginalIndex=-1
  fi

  # make sure to select an existing index regarding the newly filtered items +
  # make sure it is in the view
  changeSelectedItemIndex 0

  # if we are not pointing to the same original item, we need to
  # recompute the right pane content
  getCurrentInitialItemsIndex
  local newOriginalIndex=${RETURNED_VALUE}
  if [[ ${initialOriginalIndex} -ne ${newOriginalIndex} ]]; then
    FSFS_RECOMPUTE_RIGHT_PANE_CONTENT=${FSFS_HAS_PREVIEW}
  fi

  # draw the items count
  if ((${#FSFS_FILTERED_ITEMS[@]} != initialNbFilteredItems)); then
    local totalItemCount="${#FSFS_ORIGINAL_ITEMS[@]}"
    local itemCount="${#FSFS_FILTERED_ITEMS[@]}"
    if (( itemCount > FSFS_LEFT_PANE_LINES )); then
      itemCount="${FSFS_LEFT_PANE_LINES}"
    fi
    local itemsCounter
    printf -v itemsCounter " %s%0${#totalItemCount}i%s/%i%s " "${FSFS_COLOR_COUNT}" "${itemCount}" "${FSFS_COLOR_COUNT_RESET}${FSFS_COLOR_STATIC}" "${totalItemCount}" "${FSFS_COLOR_RESET_TEXT}"
    local itemCounterLength=$((3 + ${#totalItemCount} * 2))
    toPrint+="${AC__CURSOR_MOVE__}$((FSFS_LEFT_PANE_FIRST_LINE + 1));$((FSFS_LEFT_PANE_WIDTH - itemCounterLength))${__AC__TO}${itemsCounter}"
  fi

  # draw the items
  local itemPrefix
  local -i index line=${FSFS_LEFT_PANE_FIRST_CONTENT_LINE}
  local -i max=$((FSFS_LEFT_PANE_START_INDEX + FSFS_LEFT_PANE_LINES - 1))
  max=$((max > ${#FSFS_FILTERED_ITEMS[@]} - 1 ? ${#FSFS_FILTERED_ITEMS[@]} - 1 : max))
  for ((index = FSFS_LEFT_PANE_START_INDEX; index <= max; index++)); do
    if ((index == FSFS_SELECTED_FILTERED_ITEM_INDEX)); then
      itemPrefix="${FSFS_COLOR_SELECTED_ITEM}${FSFS_COLOR_FOCUS}${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-"◆"} ${FSFS_COLOR_FOCUS_RESET}"
    else
      itemPrefix="  "
    fi
    toPrint+="${AC__CURSOR_MOVE__}${line};${FSFS_LEFT_PANE_WIDTH}${__AC__TO}${AC__ERASE_CHARS_LEFT}"$'\r'"${itemPrefix}${FSFS_FILTERED_ITEMS[index]}${FSFS_COLOR_SELECTED_ITEM_RESET}"
    line+=1
  done

  # clear the remaining lines
  for ((line = FSFS_LEFT_PANE_FIRST_CONTENT_LINE + line - FSFS_LEFT_PANE_FIRST_CONTENT_LINE; line < FSFS_LEFT_PANE_FIRST_CONTENT_LINE + FSFS_LEFT_PANE_LINES; line++)); do
    toPrint+="${AC__CURSOR_MOVE__}${line};${FSFS_LEFT_PANE_WIDTH}${__AC__TO}${AC__ERASE_CHARS_LEFT}"
  done

  # reposition the cursor
  toPrint+="${AC__CURSOR_MOVE__}$((FSFS_LEFT_PANE_FIRST_LINE));$((3 + ${#FSFS_PROMPT}))${__AC__TO}${AC__CURSOR_SHOW}"

  printf '%s' "${toPrint}"
}

# Compute the array that should be displayed in the right pane.
# It is stored in the FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY variable.
function computeRightPaneContent() {
  FSFS_RECOMPUTE_RIGHT_PANE_CONTENT=false
  if [[ ${FSFS_HAS_PREVIEW} != "true" ]]; then
    # nothing to do
    return 0
  fi

  FSFS_RIGHT_PANE_START_INDEX=0

  getCurrentInitialItemsIndex
  local -i originalItemIndex=${RETURNED_VALUE}

  if ((originalItemIndex < 0)); then
    unset FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY
    return 0
  fi

  # if we already have a cached version of the details, we use it
  # otherwise, we built it
  if [[ ! -v "FSFS_RIGHT_PANE_CONTENT_ARRAY${originalItemIndex}" ]]; then
    declare -n array="FSFS_RIGHT_PANE_CONTENT_ARRAY${originalItemIndex}"

    local originalItem="${FSFS_ORIGINAL_ITEMS[${originalItemIndex}]}"
    "${FSFS_ITEM_SELECTED_CALLBACK}" "${originalItem}" "${originalItemIndex}" "$((FSFS_RIGHT_PANE_WIDTH - 3))"
    local content="${RETURNED_VALUE%$'\n'}"

    array=()
    local line IFS
    while IFS= read -r line; do
      array+=("${line}")
    done <<<"${content}"
  fi

  declare -g -n FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY="FSFS_RIGHT_PANE_CONTENT_ARRAY${originalItemIndex}"
}

# Draw the right pane content.
function drawRightPane() {
  if [[ ${FSFS_HAS_PREVIEW} != "true" ]]; then
    # nothing to do
    return 0
  fi
  local toPrint="${AC__CURSOR_HIDE}${FSFS_COLOR_RESET_TEXT}"

  # compute the number of lines for the right pane content
  local contentLength
  if [[ ! -v FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY || ${#FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY[@]} -eq 0 ]]; then
    contentLength=0
  else
    contentLength=${#FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY[@]}
  fi

  # display the page counter
  local itemsCounter
  local itemsCounterLength
  if ((contentLength > 0)); then
    local itemCount="$((${#FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY[@]} - FSFS_RIGHT_PANE_MAX_DISPLAYED_LINES - 1))"
    printf -v itemsCounter " %s%0${#itemCount}i%s/%i%s " "${FSFS_COLOR_COUNT}" "${FSFS_RIGHT_PANE_START_INDEX}" "${FSFS_COLOR_COUNT_RESET}${FSFS_COLOR_STATIC}" "${itemCount}" "${FSFS_COLOR_RESET_TEXT}"
    itemsCounterLength=$((3 + ${#itemCount} * 2))
  else
    itemsCounter="─────────"
    itemsCounterLength=9
  fi
  local -i repeat=$((9 - itemsCounterLength))
  repeat=$((repeat > 0 ? repeat : 0))
  toPrint+="${AC__CURSOR_MOVE__}${FSFS_RIGHT_PANE_FIRST_LINE};$((GLOBAL_COLUMNS - 9 - 2))${__AC__TO}${FSFS_COLOR_STATIC}─${AC__REPEAT__}${repeat}${__AC__LAST_CHAR}${itemsCounter}"

  # draw the lines
  local -i index line=${FSFS_RIGHT_PANE_FIRST_CONTENT_LINE}
  local -i max=$((FSFS_RIGHT_PANE_START_INDEX + FSFS_RIGHT_PANE_LINES - 1))
  max=$((max > contentLength - 1 ? contentLength - 1 : max))
  for ((index = FSFS_RIGHT_PANE_START_INDEX; index <= max; index++)); do
    toPrint+="${AC__CURSOR_MOVE__}${line};$((FSFS_LEFT_PANE_WIDTH + 2))${__AC__TO}${AC__ERASE_CHARS_RIGHT} ${FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY[index]}"
    line+=1
  done

  # clear the remaining lines
  for ((line = FSFS_RIGHT_PANE_FIRST_CONTENT_LINE + line - FSFS_RIGHT_PANE_FIRST_CONTENT_LINE; line < FSFS_RIGHT_PANE_FIRST_CONTENT_LINE + FSFS_RIGHT_PANE_LINES; line++)); do
    toPrint+="${AC__CURSOR_MOVE__}${line};$((FSFS_LEFT_PANE_WIDTH + 2))${__AC__TO}${AC__ERASE_CHARS_RIGHT}"
  done

  # if there is no content, display a "Nothing to show" message on the center of the right pane
  if ((contentLength == 0)); then
    local loadingMessage="Nothing to show…"
    toPrint+="${AC__CURSOR_MOVE__}$((FSFS_RIGHT_PANE_FIRST_CONTENT_LINE + FSFS_RIGHT_PANE_LINES / 2));$((FSFS_LEFT_PANE_WIDTH + 2 + FSFS_RIGHT_PANE_WIDTH / 2 - ${#loadingMessage} / 2))${__AC__TO}${loadingMessage}"
  fi

  # reposition the cursor
  toPrint+="${AC__CURSOR_MOVE__}$((FSFS_LEFT_PANE_FIRST_LINE));$((3 + ${#FSFS_PROMPT}))${__AC__TO}${AC__CURSOR_SHOW}"

  printf '%s' "${toPrint}"
}

# Draw the prompt line
function drawPrompt() {
  # check if we need to shorten the prompt
  FSFS_PROMPT="${FSFS_SEARCH_STRING}"
  if ((${#FSFS_SEARCH_STRING} > FSFS_LEFT_PANE_WIDTH - 4)); then
    FSFS_PROMPT="…${FSFS_SEARCH_STRING:$((${#FSFS_SEARCH_STRING} - (FSFS_LEFT_PANE_WIDTH - 4) + 1))}"
  else
    FSFS_PROMPT="${FSFS_SEARCH_STRING}"
  fi
  printf '%s' "${AC__CURSOR_HIDE}${AC__CURSOR_MOVE__}$((FSFS_LEFT_PANE_FIRST_LINE));$((FSFS_LEFT_PANE_WIDTH))${__AC__TO}${AC__ERASE_CHARS_LEFT}"$'\r'"${FSFS_COLOR_STATIC}${VALET_CONFIG_INTERACTIVE_SELECTED_ITEM_CHARACTER:-">"} ${FSFS_COLOR_RESET_TEXT}${FSFS_COLOR_FOCUS}${FSFS_PROMPT}${AC__CURSOR_SHOW}"
}

# Returns the index of the item in the original array (if any, or -1).
# It returns in the RETURNED_VALUE variable.
function getCurrentInitialItemsIndex() {
  if ((FSFS_SELECTED_FILTERED_ITEM_INDEX >= 0 && FSFS_SELECTED_FILTERED_ITEM_INDEX < ${#FSFS_FILTERED_ITEMS_CORRESPONDANCES[@]})); then
    RETURNED_VALUE=${FSFS_FILTERED_ITEMS_CORRESPONDANCES[${FSFS_SELECTED_FILTERED_ITEM_INDEX}]}
    return 0
  fi
  RETURNED_VALUE=-1
}

# Modifies the selected item index.
# Make it loop.
#
# $1: The delta to apply to the current index.
#
# Usage:
#   changeSelectedItemIndex 1
function changeSelectedItemIndex() {
  local delta="${1:-0}"

  # if we have no items, we do nothing
  if [[ ${#FSFS_FILTERED_ITEMS[@]} -eq 0 ]]; then
    FSFS_SELECTED_FILTERED_ITEM_INDEX=-1
    FSFS_RECOMPUTE_RIGHT_PANE_CONTENT=${FSFS_HAS_PREVIEW}
    return 0
  fi

  # compute the new index (cycle through)
  local newIndex=$((FSFS_SELECTED_FILTERED_ITEM_INDEX + delta))
  if ((newIndex < 0)); then
    newIndex=$((${#FSFS_FILTERED_ITEMS[@]} - 1))
  elif ((newIndex >= ${#FSFS_FILTERED_ITEMS[@]})); then
    newIndex=0
  fi

  # now we need to adjust the start index if needed
  # to make sure that the new index is visible on the screen
  if ((newIndex < FSFS_LEFT_PANE_START_INDEX)); then
    FSFS_LEFT_PANE_START_INDEX=${newIndex}
  elif ((newIndex > FSFS_LEFT_PANE_START_INDEX + FSFS_LEFT_PANE_LINES - 1)); then
    FSFS_LEFT_PANE_START_INDEX=$((newIndex - FSFS_LEFT_PANE_LINES + 1))
  fi

  FSFS_SELECTED_FILTERED_ITEM_INDEX=${newIndex}

  # if we are not pointing to the same item, we need to
  # recompute the right pane content
  if ((delta != 0)); then
    FSFS_RECOMPUTE_RIGHT_PANE_CONTENT=${FSFS_HAS_PREVIEW}
  fi
}

# Modifies the right pane start index.
#
# $1: The delta to apply to the current index.
#
# Usage:
#   changeRightPaneStartIndex 1
function changeRightPaneStartIndex() {
  local delta="${1:-0}"
  local newIndex=$((FSFS_RIGHT_PANE_START_INDEX + delta))
  if ((newIndex < 0)); then
    newIndex=0
  elif [[ ! -v FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY ]]; then
    newIndex=0
  elif (( newIndex >= ${#FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY[@]} - FSFS_RIGHT_PANE_MAX_DISPLAYED_LINES )); then
    newIndex=$((${#FSFS_RIGHT_PANE_CONTENT_CURRENT_ARRAY[@]} - 1 - FSFS_RIGHT_PANE_MAX_DISPLAYED_LINES))
  fi
  FSFS_RIGHT_PANE_START_INDEX=${newIndex}
}

# Called when a key is pressed.
function onKeyPressed() {
  case ${LAST_KEY_PRESSED} in
  ESC)
    FSFS_CLOSE_INTERACTIVE_SESSION=true
    return 0
    ;;
  $'\n')
    # if we selected index is within the range of the filtered items
    # we can return the corresponding index in the original items
    getCurrentInitialItemsIndex
    FSFS_FINAL_SELECTION_INDEX=${RETURNED_VALUE}
    FSFS_CLOSE_INTERACTIVE_SESSION=true
    return 0
    ;;
  PAGE_DOWN)
    changeRightPaneStartIndex "$((FSFS_RIGHT_PANE_MAX_DISPLAYED_LINES - 1))"
    drawRightPane
    ;;
  PAGE_UP)
    changeRightPaneStartIndex "-$((FSFS_RIGHT_PANE_MAX_DISPLAYED_LINES - 1))"
    drawRightPane
    ;;
  HOME)
    changeRightPaneStartIndex -999999
    drawRightPane
    ;;
  END)
    changeRightPaneStartIndex 999999
    drawRightPane
    ;;
  RIGHT)
    changeRightPaneStartIndex 1
    drawRightPane
    ;;
  LEFT)
    changeRightPaneStartIndex -1
    drawRightPane
    ;;
  UP)
    changeSelectedItemIndex -1
    drawLeftPane
    ;;
  DOWN)
    changeSelectedItemIndex 1
    drawLeftPane
    ;;
  DEL)
    FSFS_SEARCH_STRING=""
    drawPrompt
    drawLeftPane
    ;;
  # filter any special key
  $'\e') ;;
  *)
    # Case of keys that are supposed to only affect the search string
    case ${LAST_KEY_PRESSED} in
    BACKSPACE)
      FSFS_SEARCH_STRING="${FSFS_SEARCH_STRING%?}"
      drawPrompt
      drawLeftPane
      ;;
    # normal key
    ?)
      FSFS_SEARCH_STRING+="${LAST_KEY_PRESSED}"
      drawPrompt
      drawLeftPane
      ;;
    esac
    ;;
  esac
}

# Called when the user resizes the terminal.
function onResize() {
  # export terminal size does not work if both 1 and 2 fd
  # are not the terminal. We need to temporarily redirect
  exec 2>&4 4>&-
  system::exportTerminalSize
  exec 4>&2 2>"${FSFS_TEMPORARY_ERROR_FILE}"
  FSFS_REDRAW_REQUIRED=true
}
