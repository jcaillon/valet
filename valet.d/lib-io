#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# ## io::toAbsolutePath
#
# This function returns the absolute path of a file.
#
# - $1: The file to get the absolute path.
#
# Returns:
#
# - `RETURNED_VALUE`: The absolute path of the file.
#
# ```bash
# io::toAbsolutePath "myFile"
# local myFileAbsolutePath="${RETURNED_VALUE}"
# ```
function io::toAbsolutePath() {
  local file="${1%/}"

  # if the file is already an absolute path, we return it
  if [[ ${file} == "/"* ]]; then
    RETURNED_VALUE="${file}"
    return 0
  fi

  # if the file is a relative path (not containing ..), we return the absolute path
  RETURNED_VALUE="${PWD}/${file#./}"
  if [[ ${file} != *".."* && -e "${RETURNED_VALUE}" ]]; then
    return 0
  fi

  # the file contains .., we need to resolve the path by cd'ing into the directory
  if pushd "${file%/*}" &>/dev/null; then
    RETURNED_VALUE="${PWD}/${file##*/}"
    popd 1>/dev/null
    return 0
  fi

  # other cases of relative paths not handled:
  # - file directory does not exist
  # - the path is .. or .
  RETURNED_VALUE="${PWD}/${file#./}"
}

# ## io::invokef5
#
# This function call an executable and its arguments.
# It redirects the stdout and stderr to temporary files.
#
# - $1: true/false to indicate if the function should fail in case the execution fails.
#   If true and the execution fails, the script will exit.
# - $2: the acceptable error codes, comma separated
#   (if the error code is matched, then set the output error code to 0)
# - $3: true/false to indicate if the 4th argument represents a file path or directly the content for stdin
# - $4: the stdin (can be empty)
# - $5: the executable or function to execute
# - $6+: the arguments to pass to the executable
#
# Returns:
#
# - $?: The exit code of the executable.
# - `RETURNED_VALUE`: The file path containing the stdout of the executable.
# - `RETURNED_VALUE2`: The file path containing the stderr of the executable.
#
# ```bash
# io::invokef5 "false" "130,2" "false" "This is the stdin" "stuff" "--height=10" || core::fail "stuff failed."
# stdoutFilePath="${RETURNED_VALUE}"
# stderrFilePath="${RETURNED_VALUE2}"
# ```
#
# > - In windows, this is tremendously faster to do (or any other invoke flavor):
# >   `io::invokef5 false 0 false '' mycommand && myvar="${RETURNED_VALUE}"`
# >   than doing:
# >   `myvar="$(mycommand)".`
# > - On linux, it is slighly faster (but it might be slower if you don't have SSD?).
# > - On linux, you can use a tmpfs directory for massive gains over subshells.
function io::invokef5() {
  local failIfFails acceptableErrorCodes stdInFromFile stdIn executable
  failIfFails="${1}"
  acceptableErrorCodes="${2}"
  stdInFromFile="${3}"
  stdIn="${4}"
  executable="${5}"
  shift 5

  # if debug mode is on, print some info
  if log::isDebugEnabled; then
    local IFS=' '
    if (( $# > 0 )); then
      local args="${*@Q}"
      log::debug "Executing the command ⌜${executable}⌝ with arguments (quoted): " "${args}"
    else
      log::debug "Executing the command ⌜${executable}⌝ (no arguments)."
    fi

  fi

  # if trace mode is on, print some info
  if log::isTraceEnabled; then
    if [[ -n "${stdIn}" ]]; then
      if [[ ${stdInFromFile} == "true" ]]; then
        log::trace "${executable^} standard input from file ${stdIn}:"
        log::printFile "${stdIn}" 9999
      else
        log::trace "${executable^} standard input from string:"
        log::printFileString "${stdIn}" 9999
      fi
    else
      log::trace "No standard input."
    fi
  fi

  # execute the executable
  local -i exitCode=0
  if [[ -n "${stdIn}" ]]; then
    if [[ ${stdInFromFile} == "true" ]]; then
      "${executable}" "$@" <"${stdIn}" 1>"${GLOBAL_TEMPORARY_STDOUT_FILE}" 2>"${GLOBAL_TEMPORARY_STDERR_FILE}" || exitCode=$?
    else
      "${executable}" "$@" <<<"${stdIn}" 1>"${GLOBAL_TEMPORARY_STDOUT_FILE}" 2>"${GLOBAL_TEMPORARY_STDERR_FILE}" || exitCode=$?
    fi
  else
    "${executable}" "$@" 1>"${GLOBAL_TEMPORARY_STDOUT_FILE}" 2>"${GLOBAL_TEMPORARY_STDERR_FILE}" || exitCode=$?
  fi

  local debugMessage="The command ⌜${executable}⌝ originally ended with exit code ⌜${exitCode}⌝."

  # if the error code is acceptable, then we set it to 0
  if [[ ,${acceptableErrorCodes}, == *",${exitCode},"* ]]; then
    exitCode=0
    debugMessage+=$'\n'"The error code ⌜${exitCode}⌝ is acceptable and has been reset to 0."
  fi

  local shouldFail=false
  if [[ ${failIfFails} == "true" && exitCode -ne 0 ]]; then shouldFail=true; fi

  # fail if needed or we are debug mode; display all the debug information that could be useful
  if log::isDebugEnabled || [[ ${shouldFail} == "true" ]]; then

    if log::isTraceEnabled || [[ ${shouldFail} == "true" ]]; then
      # print std out
      if [[ -s "${GLOBAL_TEMPORARY_STDOUT_FILE}" ]]; then
        log::errorTrace "${executable^} standard output stream:"
        log::printFile "${GLOBAL_TEMPORARY_STDOUT_FILE}" 9999
      else
        log::errorTrace "${executable^} had no standard output stream."
      fi

      # print stderr
      if [[ -s "${GLOBAL_TEMPORARY_STDERR_FILE}" ]]; then
        log::errorTrace "${executable^} standard error stream:"
        log::printFile "${GLOBAL_TEMPORARY_STDERR_FILE}" 9999
      else
        log::errorTrace "${executable^} had no standard error stream."
      fi
    fi

    if [[ ${shouldFail} == "true" ]]; then
      core::fail "${debugMessage}"
    else
      log::debug "${debugMessage}"
    fi
  fi

  RETURNED_VALUE="${GLOBAL_TEMPORARY_STDOUT_FILE}"
  RETURNED_VALUE2="${GLOBAL_TEMPORARY_STDERR_FILE}"
  return ${exitCode}
}

# io::invoke5
#
# This function call an executable and its arguments.
# It redirects the stdout and stderr to environment variables.
# It calls invoke5 and reads the files to set the environment variables.
#
# - $1: true/false to indicate if the function should fail in case the execution fails.
#       If true and the execution fails, the script will exit.
# - $2: the acceptable error codes, comma separated
#       (if the error code is matched, then set the output error code to 0)
# - $3: true/false to indicate if the 4th argument represents a file path or directly the content for stdin
# - $4: the stdin (can be empty)
# - $5: the executable or function to execute
# - $6+: the arguments to pass to the executable
#
# Returns:
#
# - $?: The exit code of the executable.
# - `RETURNED_VALUE`: The content of stdout.
# - `RETURNED_VALUE2`: The content of stderr.
#
# ```bash
# io::invoke5 "false" "130,2" "false" "This is the stdin" "stuff" "--height=10" || core::fail "stuff failed."
# stdout="${RETURNED_VALUE}"
# stderr="${RETURNED_VALUE2}"
# ```
#
# > See io::invokef5 for more information.
function io::invoke5() {
  local -i exitCode=0
  io::invokef5 "$@" || exitCode=$?
  local stdOutFile="${RETURNED_VALUE}"
  local stdErrFile="${RETURNED_VALUE2}"

  io::readFile "${stdErrFile}"
  RETURNED_VALUE2="${RETURNED_VALUE}"
  io::readFile "${stdOutFile}"

  return ${exitCode}
}

# ## io::invokef2
#
# This function call an executable and its arguments.
# It redirects the stdout and stderr to temporary files.
# Equivalent to io::invokef5 "${1}" 0 "" "" "${@:2}"
#
# - $1: true/false to indicate if the function should fail in case the execution fails.
#       If true and the execution fails, the script will exit.
# - $2: the executable or function to execute
# - $3+: the arguments to pass to the executable
#
# Returns:
#
# - $?: The exit code of the executable.
# - `RETURNED_VALUE`: The file path containing the stdout of the executable.
# - `RETURNED_VALUE2`: The file path containing the stderr of the executable.
#
# ```bash
# io::invokef2 false git status || core::fail "status failed."
# stdoutFilePath="${RETURNED_VALUE}"
# stderrFilePath="${RETURNED_VALUE2}"
# ```
#
# > See io::invokef5 for more information.
function io::invokef2() {
  local failIfFails="${1}"
  shift
  io::invokef5 "${failIfFails}" 0 '' '' "$@" || return $?
}

# ## io::invoke2
#
# This function call an executable and its arguments.
# It redirects the stdout and stderr to environment variables.
# Equivalent to io::invoke5 "${1}" 0 "" "" "${@:2}"
#
# - $1: true/false to indicate if the function should fail in case the execution fails.
#       If true and the execution fails, the script will exit.
# - $2: the executable or function to execute
# - $3+: the arguments to pass to the executable
#
# Returns:
#
# - $?: The exit code of the executable.
# - `RETURNED_VALUE`: The content of stdout.
# - `RETURNED_VALUE2`: The content of stderr.
#
# ```bash
# io::invokef2 false git status || core::fail "status failed."
# stdout="${RETURNED_VALUE}"
# stderr="${RETURNED_VALUE2}"
# ```
#
# > See io::invokef5 for more information.
function io::invoke2() {
  local failIfFails="${1}"
  shift
  io::invoke5 "${failIfFails}" 0 '' '' "$@" || return $?
}

# ## io::invokef2piped
#
# This function call an executable and its arguments and input a given string as stdin.
# It redirects the stdout and stderr to temporary files.
# Equivalent to io::invokef5 "${1}" 0 false "${2}" "${@:3}"
#
# - $1: true/false to indicate if the function should fail in case the execution fails.
#       If true and the execution fails, the script will exit.
# - $2: the stdin to pass to the executable
# - $3: the executable or function to execute
# - $4+: the arguments to pass to the executable
#
# Returns:
#
# - $?: The exit code of the executable.
# - `RETURNED_VALUE`: The file path containing the stdout of the executable.
# - `RETURNED_VALUE2`: The file path containing the stderr of the executable.
#
# ```bash
# io::invokef2piped true "key: val" yq -o json -p yaml -
# stdoutFilePath="${RETURNED_VALUE}"
# stderrFilePath="${RETURNED_VALUE2}"
# ```
#
# > This is the equivalent of:
# > `myvar="$(printf '%s\n' "mystring" | mycommand)"`
# > But without using a subshell.
# >
# > See io::invokef5 for more information.
function io::invokef2piped() {
  local failIfFails="${1}"
  local stdIn="${2}"
  shift 2
  io::invokef5 "${failIfFails}" 0 false "${stdIn}" "$@" || return $?
}

# ## io::invoke2piped
#
# This function call an executable and its arguments and input a given string as stdin.
# It redirects the stdout and stderr to environment variables.
# Equivalent to io::invoke5 "${1}" 0 false "${2}" "${@:3}"
#
# - $1: true/false to indicate if the function should fail in case the execution fails.
#       If true and the execution fails, the script will exit.
# - $2: the stdin to pass to the executable
# - $3: the executable or function to execute
# - $4+: the arguments to pass to the executable
#
# Returns:
#
# - $?: The exit code of the executable.
# - `RETURNED_VALUE`: The content of stdout.
# - `RETURNED_VALUE2`: The content of stderr.
#
# ```bash
# io::invoke2piped true "key: val" yq -o json -p yaml -
# stdout="${RETURNED_VALUE}"
# stderr="${RETURNED_VALUE2}"
# ```
#
# > This is the equivalent of:
# > `myvar="$(printf '%s\n' "mystring" | mycommand)"`
# > But without using a subshell.
# >
# > See io::invokef5 for more information.
function io::invoke2piped() {
  local failIfFails="${1}"
  local stdIn="${2}"
  shift 2
  io::invoke5 "${failIfFails}" 0 false "${stdIn}" "$@" || return $?
}

# ## io::invoke
#
# This function call an executable and its arguments.
# If the execution fails, it will fail the script and show the std/err output.
# Otherwise it hides both streams, effectively rendering the execution silent unless it fails.
#
# It redirects the stdout and stderr to environment variables.
# Equivalent to io::invoke5 true 0 '' '' "${@}"
#
# - $@: the command and its arguments
#
# Returns:
#
# - $?: The exit code of the executable.
# - `RETURNED_VALUE`: The content of stdout.
# - `RETURNED_VALUE2`: The content of stderr.
#
# ```bash
# io::invoke git add --all
# ```
#
# > See io::invokef5 for more information.
function io::invoke() {
  io::invoke5 true 0 '' '' "$@"
}

# ## io::readFile
#
# Reads the content of a file and returns it in the global variable RETURNED_VALUE.
# Uses pure bash.
#
# - $1: the file path to read
# - $2: (optional) the maximum number of characters to read
#
# > If the file does not exist, the function will return an empty string instead of failing.
#
# Returns:
#
# - `RETURNED_VALUE`: The content of the file.
#
# ```bash
# io::readFile "/path/to/file" && local fileContent="${RETURNED_VALUE}"
# io::readFile "/path/to/file" 500 && local fileContent="${RETURNED_VALUE}"
# ```
function io::readFile() {
  local filePath="${1}"
  local -i maxCharacters="${2:-0}"

  if [[ ! -s "${filePath}" ]]; then
    RETURNED_VALUE=""
    return 0
  fi

  RETURNED_VALUE=""
  local IFS=''
  if [[ "${maxCharacters}" -gt 0 ]]; then
    read -rd '' -n "${maxCharacters}" RETURNED_VALUE <"${filePath}" || [[ -n ${RETURNED_VALUE} ]]
  else
    read -rd '' RETURNED_VALUE <"${filePath}" || [[ -n ${RETURNED_VALUE} ]]
    # fail safe for cases where the file is suppose to not be empty but we get null string
    if [[ -z "${RETURNED_VALUE}" ]]; then
      RETURNED_VALUE="$(<"${filePath}")"
    fi
  fi
}

# ## io::checkAndFail
#
# Check last return code and fail (exit) if it is an error.
#
# - $1: the return code
# - $2+ : the error message to display in case of error
#
# ```bash
# command_that_could_fail || io::checkAndFail "$?" "The command that could fail has failed!"
# ```
function io::checkAndFail() {
  if [[ ${1:-} != "0" ]]; then
    shift
    core::fail "$*"
  fi
  return 0
}

# ## io::checkAndWarn
#
# Check last return code and warn the user in case the return code is not 0.
#
# - $1: the last return code
# - $2+ : the warning message to display in case of error
#
# ```bash
# command_that_could_fail || io::checkAndWarn "$?" "The command that could fail has failed!"
# ```
function io::checkAndWarn() {
  if [[ ${1:-} != "0" ]]; then
    shift
    log::warning "$*"
  fi
  return 0
}

# ## io::createFilePathIfNeeded
#
# Make sure that the given file path exists.
# Create the directory tree and the file if needed.
#
# - $1: the file path to create
#
# Returns:
#
# - `RETURNED_VALUE`: The absolute path of the file.
#
# ```bash
# io::createFilePathIfNeeded "myFile"
# ```
function io::createFilePathIfNeeded() {
  io::toAbsolutePath "${1}"
  local filePath="${RETURNED_VALUE}"
  local parentDir="${filePath%/*}"

  if [[ ! -d "${parentDir}" ]]; then
    mkdir -p "${parentDir}" 1>/dev/null || core::fail "Failed to create the directory ⌜${parentDir}⌝ for the file ⌜${filePath}⌝."
  fi

  if [[ ! -f "${filePath}" ]]; then
    : >"${filePath}"
  fi

  RETURNED_VALUE="${filePath}"
}

# ## io::sleep
#
# Sleep for the given amount of time.
# This is a pure bash replacement of sleep.
#
# - $1: the time to sleep in seconds (can be a float)
#
# ```bash
# io:sleep 1.5
# ```
#
# > The sleep command is not a built-in command in bash, but a separate executable. When you use sleep, you are creating a new process.
function io::sleep() {
  local timeout="${1}"
  # when connected to a terminal, we can just read the stdout
  # which will never be written to, and use a timeout on read
  if [[ -t 2 ]]; then
    read -rt "${timeout}" -u 2 || :
    return 0
  elif command -v mkfifo 1>/dev/null; then
    if [[ -z ${IO_SLEEP_FIFO:-} ]]; then
      io::createTempFile && IO_SLEEP_FIFO="${RETURNED_VALUE}"
      rm "${IO_SLEEP_FIFO}"
      mkfifo -m 700 "${IO_SLEEP_FIFO}"
      exec 6<>"${IO_SLEEP_FIFO}"
      rm "${IO_SLEEP_FIFO}"
    fi
    read -rt "${timeout}" -u 6 || :
    exec 6>&-
  else
    # when everything else failed...
    sleep "${timeout}"
  fi
}

# ## io::cat
#
# Print the content of a file to stdout.
# This is a pure bash equivalent of cat.
#
# - $1: the file to print
#
# ```bash
# io::cat "myFile"
# ```
#
# > Also see log::printFile if you want to print a file for a user.
function io::cat() {
  io::readFile "${1}"
  printf '%s\n' "${RETURNED_VALUE}"
}

# ## io::readStdIn
#
# Read the content of the standard input.
# Will immediately return if the standard input is empty.
#
# Returns:
#
# - `RETURNED_VALUE`: The content of the standard input.
#
# ```bash
# io::readStdIn && local stdIn="${RETURNED_VALUE}"
# ```
function io::readStdIn() {
  RETURNED_VALUE=""
  local IFS=''
  if read -t 0 -u 0 -rd ''; then
    read -u 0 -rd '' RETURNED_VALUE || [[ -n ${RETURNED_VALUE} ]] || RETURNED_VALUE=""
  else
    RETURNED_VALUE=""
  fi
}

# ## io::countArgs
#
# Returns the number of arguments passed.
#
# A convenient function that can be used to:
# - count the files/directories in a directory
#   `io::countArgs "${PWD}"/* && local numberOfFiles="${RETURNED_VALUE}"`
# - count the number of variables starting with VALET_
#   `io::countArgs "${!VALET_@}" && local numberOfVariables="${RETURNED_VALUE}"`
#
# Returns:
#
# - `RETURNED_VALUE`: The number of arguments passed.
#
# ```bash
# io::countArgs 1 2 3
# ```
function io::countArgs() {
  RETURNED_VALUE="$#"
}

# ## io::listPaths
#
# List all the paths in the given directory.
#
# - $1: the directory to list
# - $2: (optional) true to list recursively, false otherwise (default to false)
# - $3: (optional) true to list hidden paths, false otherwise (default to false)
# - $4: (optional) a function name that is called to filter the paths
#       The function should return 0 if the path is to be kept, 1 otherwise.
#       The function is called with the path as the first argument.
# - $5: (optional) a function name that is called to filter the directories (for recursive listing)
#       The function should return 0 if the path is to be kept, 1 otherwise.
#       The function is called with the path as the first argument.
#
# Returns:
#
# - `RETURNED_ARRAY`: An array with the list of all the paths.
#
# ```bash
# io::listPaths "/path/to/directory" "true" "myFilterFunction"
# for path in "${RETURNED_ARRAY[@]}"; do
#   printf '%s' "${path}"
# done
# ```
#
# > - It will correctly list files under symbolic link directories.
function io::listPaths() {
  local directory="${1}"
  local recursive="${2:-false}"
  local includeHidden="${3:-false}"
  local filterFunction="${4:-}"
  local filterDirectoryFunction="${5:-}"

  local IFS=' '

  local activatedHidden=false
  if [[ ${includeHidden} == "true" ]] && ! shopt -p dotglob; then
    # change the shell options to include hidden files
    log::debug "Activating the dotglob shell option."
    shopt -s dotglob
    activatedHidden=true
  fi

  RETURNED_ARRAY=()

  local path listOfDirectories currentDirectory

  listOfDirectories="${directory}"$'\n'
  while [[ -n "${listOfDirectories}" ]]; do
    currentDirectory="${listOfDirectories%%$'\n'*}"
    listOfDirectories="${listOfDirectories#*$'\n'}"

    log::trace "Listing paths in ⌜${currentDirectory}⌝."

    for path in "${currentDirectory}"/*; do
      if [[ ${recursive} == "true" && -d "${path}" ]]; then
        if [[ -z ${filterDirectoryFunction} ]] || ${filterDirectoryFunction} "${path}"; then
          listOfDirectories+="${path}"$'\n'
          log::trace "Adding directory ⌜${path}⌝ to the search list."
        fi
      fi
      if [[ -n ${filterFunction} ]] && ! ${filterFunction} "${path}"; then
        continue
      fi
      RETURNED_ARRAY+=("${path}")
    done
  done

  if [[ ${activatedHidden} == "true" ]]; then
    shopt -u dotglob
  fi
}