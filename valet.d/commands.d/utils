#!/usr/bin/env bash
set -Eeu -o pipefail
# Title:         valet.d/build
# Description:   This script is source by some builtin commands
# Author:        github.com/jcaillon

# This function allows to bump a semantic version formatted like:
# major.minor.patch-prerelease+build
# $1: the version to bump
# $2: the level to bump (major, minor, patch)
# $3: clear the prerelease and build (optional, defaults to true)
#
# Usage:
#   bumpSemanticVersion "1.2.3-prerelease+build" "major" && local newVersion="${LAST_RETURNED_VALUE}"
function bumpSemanticVersion() {
  local version level clearPreRelease
  version="${1}"
  bumpLevel="${2}"
  clearPreRelease="${3:-true}"

  local prerelease build modifiedVersion
  modifiedVersion="${version}-+"
  prerelease="${modifiedVersion#*-}"
  prerelease="${prerelease%%+*}"
  [[ -n "${prerelease}" ]] && prerelease="-${prerelease%-}"
  build="${modifiedVersion#*+}"
  if [[ -n "${build}" ]]; then
    build="+${build%-+}"
  fi

  # bump the version
  local -i level semVerNumber semVerIndex
  level=3
  [[ "${bumpLevel:-}" == "major" ]] && level=1
  [[ "${bumpLevel:-}" == "minor" ]] && level=2
  local newVersion semVerString
  for semVerIndex in {1..3}; do
    cutF "${version}" "${semVerIndex}" "." && semVerString="${LAST_RETURNED_VALUE%-*}"
    semVerNumber="${semVerString%+}"
    [[ semVerIndex -eq level ]] && semVerNumber=$((semVerNumber + 1))
    [[ semVerIndex -gt level ]] && semVerNumber=0
    newVersion+="${semVerNumber}."
  done
  newVersion="${newVersion%.}"

  if [[ "${clearPreRelease}" != "true" ]]; then
    newVersion="${newVersion%.}${prerelease}${build}"
  fi

  LAST_RETURNED_VALUE="${newVersion}"
}

