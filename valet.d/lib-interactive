#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-ansi-codes
source ansi-codes

#===============================================================
# >>> Interactive prompts
#===============================================================

# ##  interactive::askForConfirmation
#
# Ask the user to press the button to continue.
#
# - $1: **prompt** _as string_:
#       the prompt to display
#
# Returns:
#
# - $?:
#   - 0 if the user pressed enter
#   - 1 otherwise
#
# ```bash
# interactive::askForConfirmation "Press enter to continue."
# ```
function interactive::askForConfirmation() {
  interactive::displayQuestion "${1}"
  interactive::askForConfirmationRaw
  return 0
}

# ## interactive::askForConfirmationRaw
#
# Ask the user to press the button to continue.
#
# This raw version does not display the prompt or the answer.
#
# Returns:
#
# - $?:
#   - 0 if the user pressed enter
#   - 1 otherwise
#
# ```bash
# interactive::askForConfirmationRaw
# ```
function interactive::askForConfirmationRaw() {
  # colors
  local styleActiveButton
  if [[ "${VALET_CONFIG_ENABLE_COLORS:-}" == "true" ]]; then
    styleActiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_ACTIVE_BUTTON:-${AC__FG_MAGENTA}}"
  else
    styleActiveButton="${AC__TEXT_INVERSE}"
  fi

  interactive::createSpace 2

  # print the current state (then move to column 1 to be ready to rewrite)
  printf '%s%s%s' \
    "${AC__CURSOR_HIDE}${styleActiveButton}" \
    "   (O)K   " \
    "${AC__TEXT_RESET}${AC__CURSOR_MOVE__}1${__AC__COLUMN}"

  while true; do
    # wait and handle key press
    if interactive::waitForKey -t 1; then
      case ${LAST_KEY_PRESSED} in
      $'\n' | ' ' | o)
        break
        ;;
      ESC)
        core::fail "Interactive session cancelled."
        ;;
      esac
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 ]]; then break; fi
  done

  printf '%s' "${AC__ERASE_CHARS_RIGHT}${AC__CURSOR_SHOW}"

  return 0
}

# ## interactive::promptYesNo
#
# Ask the user to yes or no.
#
# - The user can switch between the two options with the arrow keys or space.
# - The user can validate the choice with the enter key.
# - The user can also validate immediately with the y or n key.
#
# - $1: **prompt** _as string_:
#       the prompt to display
# - $2: default _as bool_:
#       (optional) the default value to select
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0 if the user answered yes
#   - 1 otherwise
# - `RETURNED_VALUE`: true or false.
#
# ```bash
# if interactive::promptYesNo "Do you want to continue?"; then echo "Yes."; else echo "No."; fi
# ```
function interactive::promptYesNo() {
  interactive::displayQuestion "${1}"
  interactive::promptYesNoRaw "${2:-true}"

  if [[ ${RETURNED_VALUE} == "true" ]]; then
    interactive::displayAnswer "Yes."
    RETURNED_VALUE=true
    return 0
  fi

  interactive::displayAnswer "No."
  RETURNED_VALUE=false
  return 1
}

# ## interactive::promptYesNoRaw
#
# Ask the user to yes or no.
#
# - The user can switch between the two options with the arrow keys or space.
# - The user can validate the choice with the enter key.
# - The user can also validate immediately with the y or n key.
#
# This raw version does not display the prompt or the answer.
#
# - $1: default _as bool_:
#       (optional) the default value to select
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0 if the user answered yes
#   - 1 otherwise
# - `RETURNED_VALUE`: true or false.
#
# ```bash
# interactive::promptYesNoRaw "Do you want to continue?" && local answer="${RETURNED_VALUE}"
# ```
function interactive::promptYesNoRaw() {
  local state=${1:-true}

  # colors
  local styleActiveButton
  local styleUnactiveButton
  if [[ "${VALET_CONFIG_ENABLE_COLORS:-}" == "true" ]]; then
    styleActiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_ACTIVE_BUTTON:-${AC__FG_MAGENTA}}"
    styleUnactiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_UNACTIVE_BUTTON:-}"
  else
    styleActiveButton="${AC__TEXT_INVERSE}"
    styleUnactiveButton=""
  fi

  interactive::createSpace 2

  printf '%s' "${AC__CURSOR_HIDE}"

  local yesColor noColor
  while true; do
    if [[ ${state} == "true" ]]; then
      yesColor="${styleActiveButton}"
      noColor="${styleUnactiveButton}"
    else
      yesColor="${styleUnactiveButton}"
      noColor="${styleActiveButton}"
    fi

    # print the current state (then move to column 1 to be ready to rewrite)
    printf '%s%s%s   %s%s%s' \
      "${yesColor}" \
      "   (Y)ES   " \
      "${AC__TEXT_RESET}" \
      "${noColor}" \
      "   (N)O   " \
      "${AC__TEXT_RESET}${AC__CURSOR_MOVE__}1${__AC__COLUMN}"

    # wait and handle key press
    if interactive::waitForKey -t 1; then
      case ${LAST_KEY_PRESSED} in
      $'\n' | ' ')
        break
        ;;
      y)
        state=true
        break
        ;;
      n)
        state=false
        break
        ;;
      UP | LEFT | RIGHT | DOWN)
        if [[ ${state} == "true" ]]; then state=false; else state=true; fi
        ;;
      ESC)
        core::fail "Interactive session cancelled."
        ;;
      esac
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 ]]; then break; fi
  done

  printf '%s' "${AC__ERASE_CHARS_RIGHT}${AC__CURSOR_SHOW}"

  if [[ ${state} == "true" ]]; then
    RETURNED_VALUE=${state}
    return 0
  fi

  RETURNED_VALUE=${state}
  return 1
}

# ## interactive::displayQuestion
#
# Displays a question to the user.
#
# The text is wrapped and put inside a box like so:
#
# ```text
#   ┌────────────░
#   │ My prompt.
#   └────────────░
# ```
#
# - $1: **prompt** _as string_:
#       the prompt to display
# - $2: max width _as int_:
#       (optional) the maximum width of the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayPrompt "Do you want to continue?"
# ```
function interactive::displayQuestion() {
  interactive::displayDialogBox "system" "${1}" "${2:-}"
}

# ## interactive::displayAnswer
#
# Displays an answer to a previous question.
#
# The text is wrapped and put inside a box like so:
#
# ```text
# ░────────────┐
#   My answer. │
# ░────────────┘
# ```)
#
# - $1: **answer** _as string_:
#       the answer to display
# - $2: max width _as int_:
#       (optional) the maximum width of the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayAnswer "My answer."
# ```
function interactive::displayAnswer() {
  interactive::displayDialogBox "user" "${1}" "${2:-}"
}

# ## interactive::displayDialogBox
#
# Displays a dialog box with a speaker and a text.
#
# - $1: **speaker** _as string_:
#       the speaker (system or user)
# - $2: **text** _as string_:
#       the text to display
# - $3: max width _as int_:
#       (optional) the maximum width of the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayDialogBox "system" "This is a system message."
# ```
interactive::displayDialogBox() {
  local speaker="${1}"
  local text="${2}"
  local dialogMaxWidth="${3:-${GLOBAL_COLUMNS}}"

  local -i maxDialogWidth=$((GLOBAL_COLUMNS - 4))
  if [[ ${#dialogMaxWidth} -lt ${maxDialogWidth} ]]; then
    maxDialogWidth=${dialogMaxWidth}
  fi
  local -i maxTextWidth=$((maxDialogWidth - 4))
  if [[ ${#text} -lt ${maxTextWidth} ]]; then
    maxTextWidth=${#text}
    maxDialogWidth=$((maxTextWidth + 4))
  fi

  string::wrapText "${text}" "${maxTextWidth}"
  local wrappedText="${RETURNED_VALUE}"

  local finalString line

  if [[ ${speaker} == "user" ]]; then

    local startColumn=$((GLOBAL_COLUMNS - maxDialogWidth + 1))

    finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}┌─${AC__REPEAT__}${maxTextWidth}${__AC__LAST_CHAR}─░${AC__TEXT_RESET}"$'\n'
    while read -r line; do
      finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}│${AC__TEXT_RESET} ${line}${AC__TEXT_FAINT}${AC__TEXT_RESET}"$'\n'
    done <<<"${wrappedText}"
    finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}└─${AC__REPEAT__}${maxTextWidth}${__AC__LAST_CHAR}─░${AC__TEXT_RESET}"$'\n'

  elif [[ ${speaker} == "system" ]]; then

    finalString+="${AC__TEXT_FAINT}░─${AC__REPEAT__}${maxTextWidth}${__AC__LAST_CHAR}─┐${AC__TEXT_RESET}"$'\n'
    while read -r line; do
      finalString+="${AC__TEXT_FAINT}  ${AC__TEXT_RESET}${line} ${AC__CURSOR_MOVE__}$((maxTextWidth + 4))${__AC__COLUMN}${AC__TEXT_FAINT}│${AC__TEXT_RESET}"$'\n'
    done <<<"${wrappedText}"
    finalString+="${AC__TEXT_FAINT}░─${AC__REPEAT__}${maxTextWidth}${__AC__LAST_CHAR}─┘${AC__TEXT_RESET}"$'\n'

  fi

  printf '%s' "${finalString}"
}

#===============================================================
# >>> Interactive utilities
#===============================================================

# ## interactive::testKeys
#
# Wait for a user input and prints the character that bash sees.
# Useful to program key bindings.
#
# ```bash
# interactive::testKeys
# ```
function interactive::testKeys() {
  printf '%s\n' "Press any key to see the character that bash sees (CTRL + C to interrupt).${AC__CURSOR_HIDE}"
  while true; do
    if interactive::waitForKey -t 1; then
      printf "%sYou pressed: ⌜%q⌝%s" "${AC__ERASE_LINE}" "${LAST_KEY_PRESSED@E}" "${AC__CURSOR_MOVE__}1${__AC__COLUMN}"
    fi
    if [[ ! -t 1 ]]; then break; fi
  done
}

# ## interactive::waitForKey
#
# Wait for a user input (single key).
# You can pass additional parameters to the read command (e.g. to wait for a set amount of time).
#
# Some special keys are translated into more readable strings:
# UP, DOWN, RIGHT, LEFT, BACKSPACE, DEL, PAGE_UP, PAGE_DOWN, HOME, END, ESC, F1-F12, ALT+...
#
# - $@: **read parameters** _as any_:
#       additional parameters to pass to the read command
#
# Returns:
#
# - $?:
#   - 0 if a key was pressed
#   - 1 otherwise
# - `LAST_KEY_PRESSED`: the key pressed.
#
# ```bash
# interactive::waitForKey
# interactive::waitForKey -t 0.1
# ```
#
# > <https://en.wikipedia.org/wiki/ANSI_escape_code#Terminal_input_sequences>
function interactive::waitForKey() {
  IFS='' read "$@" -d '' -srn 1 LAST_KEY_PRESSED || return 1
  # special key detection, need to read more characters (up to 4 for F1-F12 keys)
  if [[ ${LAST_KEY_PRESSED} == $'\e' ]]; then
    IFS='' read -t 0.01 -d '' -rsn 4 || :
    # if there are several ESC then it means we read too much; we can assume it is
    # the same length as the previous ESC key and thus we can read a set number of
    # chars. We might miss some inputs but at least we wil not read incomplete
    # sequences on the next read.
    local addedChars="${REPLY%%$'\e'*}"
    LAST_KEY_PRESSED+="${addedChars}"
    if (( ${#REPLY} != ${#addedChars} )); then
      IFS='' read -t 0.01 -d '' -rsn $((${#LAST_KEY_PRESSED} - (${#REPLY} - ${#addedChars}))) || :
    fi

    # translate some common inputs into more readable strings
    case ${LAST_KEY_PRESSED} in
    $'\e[A' | $'\eOA') LAST_KEY_PRESSED="UP" ;;
    $'\e[B' | $'\eOA') LAST_KEY_PRESSED="DOWN" ;;
    $'\e[C' | $'\eOA') LAST_KEY_PRESSED="RIGHT" ;;
    $'\e[D' | $'\eOA') LAST_KEY_PRESSED="LEFT" ;;
    $'\e[2~') LAST_KEY_PRESSED="INSERT" ;;
    $'\e[3~') LAST_KEY_PRESSED="DEL" ;;
    $'\e[5~') LAST_KEY_PRESSED="PAGE_UP" ;;
    $'\e[6~') LAST_KEY_PRESSED="PAGE_DOWN" ;;
    $'\e[H') LAST_KEY_PRESSED="HOME" ;;
    $'\e[F') LAST_KEY_PRESSED="END" ;;
    $'\e') LAST_KEY_PRESSED="ESC" ;;
    $'\eOP') LAST_KEY_PRESSED="F1" ;;
    $'\e'?) LAST_KEY_PRESSED="ALT+${LAST_KEY_PRESSED#$'\e'}" ;;
    esac
  else
    case ${LAST_KEY_PRESSED} in
    $'\177' | $'\b') LAST_KEY_PRESSED="BACKSPACE" ;;
    esac
  fi
  return 0
}

# ## interactive::clearKeyPressed
#
# This function reads all the inputs from the user, effectively discarding them.
#
# ```bash
# interactive::clearKeyPressed
# ```
function interactive::clearKeyPressed() {
  local IFS
  IFS='' read "$@" -d '' -srn 1 -t 0 LAST_KEY_PRESSED || :
}

# ## interactive::createSpace
#
# This function creates some new lines after the current cursor position.
# Then it moves back to its original position.
# This effectively creates a space in the terminal (scroll up if we are at the bottom).
# It does not create more space than the number of lines in the terminal.
#
# - $1: **number of lines** _as int_:
#       the number of lines to create
#
# ```bash
# interactive::createSpace 5
# ```
function interactive::createSpace() {
  local -i lines="${1}"
  lines=$((lines - 1 > GLOBAL_LINES ? GLOBAL_LINES : lines - 1))
  local -i loop
  local newLines
  for ((loop = 0; loop < lines; loop++)); do newLines+=$'\n'; done
  printf '%s' "${AC__CURSOR_MOVE__}1${__AC__COLUMN}${AC__ERASE_LINES_BELOW}${newLines}${AC__CURSOR_MOVE__}${lines}${__AC__START_OF_LINE_UP}"
}

# ## interactive::getCursorPosition
#
# Get the current cursor position.
#
# Returns:
#
# - `CURSOR_LINE`: the line number
# - `CURSOR_COLUMN`: the column number
#
# ```bash
# interactive::getCursorPosition
# ```
function interactive::getCursorPosition() {
  local escapeCode IFS
  # we request the position and first read \e[
  IFS='' read -d '' -p "${AC__REQUEST_CURSOR_POSITION}" -n 2 -sr escapeCode || :
  # then read line;colR
  IFS=';' read -d 'R' -sr CURSOR_LINE CURSOR_COLUMN || :
}

# ## interactive::switchToFullScreen
#
# Call this function to start an interactive session in full screen mode.
# This function will switch to the alternate screen, hide the cursor and clear the screen.
# It will also disable echoing when we type something.
#
# You should call interactive::switchBackFromFullScreen at the end of the interactive session.
#
# In the alternate screen, we don't see the error messages so we capture them somewhere else.
#
# ```bash
# interactive::switchToFullScreen
# ```
function interactive::switchToFullScreen() {
  if [[ ! -t 2 ]]; then
    core::fail "This function can only be used in an interactive session. Did you already called interactive::switchBackFromFullScreen?"
  fi

  # disable echoing when we type something
  if command -v stty &>/dev/null; then
    stty -echo &>/dev/null || :
  fi
  # switch to the alternate screen, hide the cursor and clear the screen
  printf '%s' "${AC__ENABLE_ALTERNATE_BUFFER_SCREEN}${AC__CURSOR_HIDE}${AC__ERASE_SCREEN}"

  # in full screen mode, we don't see the error messages so we capture them somewhere else
  FSFS_TEMPORARY_ERROR_FILE="${GLOBAL_TEMPORARY_IN_MEM_PREFIX}${BASHPID}.valet-interactive.err"
  while [[ -e "${FSFS_TEMPORARY_ERROR_FILE}" ]]; do FSFS_TEMPORARY_ERROR_FILE+="x"; done
  exec 4>&2 2>"${FSFS_TEMPORARY_ERROR_FILE}"
}

# ## interactive::switchBackFromFullScreen
#
# Call this function to switch back from the full screen mode.
#
# - This function will restore the terminal state and show the cursor.
# - It will also restore the key echoing.
# - If there were error messages during the interactive session, they will be displayed at the end.
#
# ```bash
# interactive::switchBackFromFullScreen
# ```
function interactive::switchBackFromFullScreen() {
  if [[ -t 2 ]]; then
    # already in the normal terminal mode
    return
  fi

  # restore the terminal state
  printf '%s' "${AC__CURSOR_SHOW}${AC__TEXT_RESET}${AC__DISABLE_ALTERNATE_BUFFER_SCREEN}"
  # restore the key echoing
  if command -v stty &>/dev/null; then
    stty echo &>/dev/null || :
  fi

  # restore the error output and display them if any
  exec 2>&4 4>&-
  if [[ -s "${FSFS_TEMPORARY_ERROR_FILE}" ]]; then
    io::readFile "${FSFS_TEMPORARY_ERROR_FILE}"
    log::error "Error messages during the interactive session:"$'\n'"${RETURNED_VALUE%$'\n'}"
  fi
}