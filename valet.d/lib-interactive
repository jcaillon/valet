#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.

# shellcheck source=lib-ansi-codes
source ansi-codes

#===============================================================
# >>> Interactive prompts
#===============================================================

# ##  interactive::askForConfirmation
#
# Ask the user to press the button to continue.
#
# - $1: **prompt** _as string_:
#       the prompt to display
#
# Returns:
#
# - $?:
#   - 0 if the user pressed enter
#   - 1 otherwise
#
# ```bash
# interactive::askForConfirmation "Press enter to continue."
# ```
function interactive::askForConfirmation() {
  interactive::displayQuestion "${1}"
  interactive::askForConfirmationRaw
  return 0
}

# ## interactive::askForConfirmationRaw
#
# Ask the user to press the button to continue.
#
# This raw version does not display the prompt or the answer.
#
# Returns:
#
# - $?:
#   - 0 if the user pressed enter
#   - 1 otherwise
#
# ```bash
# interactive::askForConfirmationRaw
# ```
function interactive::askForConfirmationRaw() {
  # colors
  local styleActiveButton
  if [[ "${VALET_CONFIG_ENABLE_COLORS:-}" == "true" ]]; then
    styleActiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_ACTIVE_BUTTON:-${AC__FG_MAGENTA}}"
  else
    styleActiveButton="${AC__TEXT_INVERSE}"
  fi

  interactive::createSpace 2

  # print the current state (then move to column 1 to be ready to rewrite)
  printf '%s%s%s' \
    "${AC__CURSOR_HIDE}${styleActiveButton}" \
    "   (O)K   " \
    "${AC__TEXT_RESET}${AC__CURSOR_MOVE__}1${__AC__COLUMN}"

  while true; do
    # wait and handle key press
    if interactive::waitForKey -t 1; then
      case ${LAST_KEY_PRESSED} in
      $'\n' | ' ' | o)
        break
        ;;
      ESC)
        core::fail "Interactive session cancelled."
        ;;
      esac
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 ]]; then break; fi
  done

  printf '%s' "${AC__ERASE_CHARS_RIGHT}${AC__CURSOR_SHOW}"

  return 0
}

# ## interactive::promptYesNo
#
# Ask the user to yes or no.
#
# - The user can switch between the two options with the arrow keys or space.
# - The user can validate the choice with the enter key.
# - The user can also validate immediately with the y or n key.
#
# - $1: **prompt** _as string_:
#       the prompt to display
# - $2: default _as bool_:
#       (optional) the default value to select
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0 if the user answered yes
#   - 1 otherwise
# - `RETURNED_VALUE`: true or false.
#
# ```bash
# if interactive::promptYesNo "Do you want to continue?"; then echo "Yes."; else echo "No."; fi
# ```
function interactive::promptYesNo() {
  interactive::displayQuestion "${1}"
  interactive::promptYesNoRaw "${2:-true}"

  if [[ ${RETURNED_VALUE} == "true" ]]; then
    interactive::displayAnswer "Yes."
    RETURNED_VALUE=true
    return 0
  fi

  interactive::displayAnswer "No."
  RETURNED_VALUE=false
  return 1
}

# ## interactive::promptYesNoRaw
#
# Ask the user to yes or no.
#
# - The user can switch between the two options with the arrow keys or space.
# - The user can validate the choice with the enter key.
# - The user can also validate immediately with the y or n key.
#
# This raw version does not display the prompt or the answer.
#
# - $1: default _as bool_:
#       (optional) the default value to select
#       (defaults to true)
#
# Returns:
#
# - $?:
#   - 0 if the user answered yes
#   - 1 otherwise
# - `RETURNED_VALUE`: true or false.
#
# ```bash
# interactive::promptYesNoRaw "Do you want to continue?" && local answer="${RETURNED_VALUE}"
# ```
function interactive::promptYesNoRaw() {
  local state=${1:-true}

  # colors
  local styleActiveButton
  local styleUnactiveButton
  if [[ "${VALET_CONFIG_ENABLE_COLORS:-}" == "true" ]]; then
    styleActiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_ACTIVE_BUTTON:-${AC__FG_MAGENTA}}"
    styleUnactiveButton="${AC__TEXT_INVERSE}${VALET_CONFIG_COLOR_UNACTIVE_BUTTON:-}"
  else
    styleActiveButton="${AC__TEXT_INVERSE}"
    styleUnactiveButton=""
  fi

  interactive::createSpace 2

  printf '%s' "${AC__CURSOR_HIDE}"

  local yesColor noColor
  while true; do
    if [[ ${state} == "true" ]]; then
      yesColor="${styleActiveButton}"
      noColor="${styleUnactiveButton}"
    else
      yesColor="${styleUnactiveButton}"
      noColor="${styleActiveButton}"
    fi

    # print the current state (then move to column 1 to be ready to rewrite)
    printf '%s%s%s   %s%s%s' \
      "${yesColor}" \
      "   (Y)ES   " \
      "${AC__TEXT_RESET}" \
      "${noColor}" \
      "   (N)O   " \
      "${AC__TEXT_RESET}${AC__CURSOR_MOVE__}1${__AC__COLUMN}"

    # wait and handle key press
    if interactive::waitForKey -t 1; then
      case ${LAST_KEY_PRESSED} in
      $'\n' | ' ')
        break
        ;;
      y | Y)
        state=true
        break
        ;;
      n | N)
        state=false
        break
        ;;
      UP | LEFT | RIGHT | DOWN)
        if [[ ${state} == "true" ]]; then state=false; else state=true; fi
        ;;
      ESC)
        core::fail "Interactive session cancelled."
        ;;
      esac
    fi

    # break if fd 1 is closed or does not refer to a terminal.
    if [[ ! -t 1 ]]; then break; fi
  done

  printf '%s' "${AC__ERASE_CHARS_RIGHT}${AC__CURSOR_SHOW}"

  if [[ ${state} == "true" ]]; then
    RETURNED_VALUE=${state}
    return 0
  fi

  RETURNED_VALUE=${state}
  return 1
}

# ## interactive::displayQuestion
#
# Displays a question to the user.
#
# The text is wrapped and put inside a box like so:
#
# ```text
#    ┌────────────────────────────────┐
# ░──┤ Is this an important question? │
#    └────────────────────────────────┘
# ```
#
# - $1: **prompt** _as string_:
#       the prompt to display
# - $2: max width _as int_:
#       (optional) the maximum width of text in the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayPrompt "Do you want to continue?"
# ```
function interactive::displayQuestion() {
  interactive::displayDialogBox "system" "${1}" "${2:-}"
}

# ## interactive::displayAnswer
#
# Displays an answer to a previous question.
#
# The text is wrapped and put inside a box like so:
#
# ```text
#     ┌─────┐
#     │ No. ├──░
#     └─────┘
# ```
#
# - $1: **answer** _as string_:
#       the answer to display
# - $2: max width _as int_:
#       (optional) the maximum width of the text in the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayAnswer "My answer."
# ```
function interactive::displayAnswer() {
  interactive::displayDialogBox "user" "${1}" "${2:-}"
}

# ## interactive::displayDialogBox
#
# Displays a dialog box with a speaker and a text.
#
# - $1: **speaker** _as string_:
#       the speaker (system or user)
# - $2: **text** _as string_:
#       the text to display
# - $3: max width _as int_:
#       (optional) the maximum width of the text in the dialog box
#       (defaults to GLOBAL_COLUMNS)
#
# ```bash
# interactive::displayDialogBox "system" "This is a system message."
# ```
interactive::displayDialogBox() {
  local speaker="${1}"
  local text="${2}"
  local requiredMaxTextWidth="${3:-${GLOBAL_COLUMNS}}"

  local -i maxTextWidth=$((GLOBAL_COLUMNS - 7))
  if (( requiredMaxTextWidth >= maxTextWidth )); then
    requiredMaxTextWidth=${maxTextWidth}
  fi
  local -i textWidth=${requiredMaxTextWidth}
  if (( ${#text} < textWidth )); then
    textWidth=${#text}
  fi

  string::wrapText "${text}" "${textWidth}"
  local wrappedText="${RETURNED_VALUE}"

  local finalString line sideString
  local -i lineNumber=0

  local -i maxLineLength=0
  while read -r line; do
    if (( ${#line} > maxLineLength )); then
      maxLineLength=${#line}
    fi
  done <<<"${wrappedText}"
  textWidth=${maxLineLength}

  if [[ ${speaker} == "user" ]]; then

    local -i startColumn=$((GLOBAL_COLUMNS - textWidth - 7))
    startColumn=$((startColumn >= 0 ? startColumn : 0))
    startColumn=$((startColumn <= 8 ? startColumn : 8))
    startColumn+=1

    finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}┌─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┐${AC__TEXT_RESET}"$'\n'
    while read -r line; do
      if (( lineNumber == 0 )); then
        sideString="├──░"
      else
        sideString="│"
      fi
      finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}│${AC__TEXT_RESET} ${line} ${AC__CURSOR_MOVE__}$((textWidth + 3 + startColumn))${__AC__COLUMN}${AC__TEXT_FAINT}${sideString}${AC__TEXT_RESET}"$'\n'
      lineNumber+=1
    done <<<"${wrappedText}"
    finalString+="${AC__TEXT_FAINT}${AC__CURSOR_MOVE__}${startColumn}${__AC__COLUMN}└─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┘${AC__TEXT_RESET}"$'\n'

  elif [[ ${speaker} == "system" ]]; then

    finalString+="${AC__TEXT_FAINT}   ┌─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┐${AC__TEXT_RESET}"$'\n'
    while read -r line; do
      if (( lineNumber == 0 )); then
        sideString="░──┤"
      else
        sideString="   │"
      fi
      finalString+="${AC__TEXT_FAINT}${sideString}${AC__TEXT_RESET} ${line} ${AC__CURSOR_MOVE__}$((textWidth + 7))${__AC__COLUMN}${AC__TEXT_FAINT}│${AC__TEXT_RESET}"$'\n'
      lineNumber+=1
    done <<<"${wrappedText}"
    finalString+="${AC__TEXT_FAINT}   └─${AC__REPEAT__}${textWidth}${__AC__LAST_CHAR}─┘${AC__TEXT_RESET}"$'\n'

  fi

  printf '%s' "${finalString}"
}

#===============================================================
# >>> Interactive utilities
#===============================================================

# ## interactive::testKeys
#
# Wait for a user input and prints the character that bash sees.
# Useful to program key bindings.
#
# ```bash
# interactive::testKeys
# ```
function interactive::testKeys() {
  printf '%s\n' "Press any key to see the character that bash sees (CTRL + C to interrupt).${AC__CURSOR_HIDE}"
  while true; do
    if interactive::waitForKey -t 1; then
      printf "%sYou pressed: ⌜%q⌝%s" "${AC__ERASE_LINE}" "${LAST_KEY_PRESSED@E}" "${AC__CURSOR_MOVE__}1${__AC__COLUMN}"
    fi
    if [[ ! -t 1 ]]; then break; fi
  done
}

# ## interactive::waitForKey
#
# Wait for a user input (single key).
# You can pass additional parameters to the read command (e.g. to wait for a set amount of time).
#
# Some special keys are translated into more readable strings:
# UP, DOWN, RIGHT, LEFT, BACKSPACE, DEL, PAGE_UP, PAGE_DOWN, HOME, END, ESC, F1-F12, ALT+...
#
# - $@: **read parameters** _as any_:
#       additional parameters to pass to the read command
#
# Returns:
#
# - $?:
#   - 0 if a key was pressed
#   - 1 otherwise
# - `LAST_KEY_PRESSED`: the key pressed.
#
# ```bash
# interactive::waitForKey
# interactive::waitForKey -t 0.1
# ```
#
# > <https://en.wikipedia.org/wiki/ANSI_escape_code#Terminal_input_sequences>
function interactive::waitForKey() {
  LAST_KEY_PRESSED=""
  IFS='' read "$@" -d '' -srn 1 LAST_KEY_PRESSED || :

  LAST_KEY_PRESSED="${PREVIOUS_KEY_PRESSED_EXTRA_CHARS:-}${LAST_KEY_PRESSED}"
  PREVIOUS_KEY_PRESSED_EXTRA_CHARS=""

  if [[ -z ${LAST_KEY_PRESSED} ]]; then
    return 1
  fi

  # special key detection, need to read more characters (up to 4 for F1-F12 keys)
  if [[ ${LAST_KEY_PRESSED} == *$'\e'* ]]; then
    REPLY=""
    IFS='' read -t 0.01 -d '' -rsn 4 || :

    # we might have several ESC which means we read too much
    local wholeChain="${LAST_KEY_PRESSED#$'\e'}${REPLY}"
    LAST_KEY_PRESSED=$'\e'"${wholeChain%%$'\e'*}"

    if [[ ${wholeChain} == *$'\e'* ]]; then
      PREVIOUS_KEY_PRESSED_EXTRA_CHARS=$'\e'"${wholeChain#*$'\e'}"
    fi

    # translate some common inputs into more readable strings
    case ${LAST_KEY_PRESSED} in
    $'\e[A' | $'\eOA') LAST_KEY_PRESSED="UP" ;;
    $'\e[B' | $'\eOA') LAST_KEY_PRESSED="DOWN" ;;
    $'\e[C' | $'\eOA') LAST_KEY_PRESSED="RIGHT" ;;
    $'\e[D' | $'\eOA') LAST_KEY_PRESSED="LEFT" ;;
    $'\e[2~') LAST_KEY_PRESSED="INSERT" ;;
    $'\e[3~') LAST_KEY_PRESSED="DEL" ;;
    $'\e[5~') LAST_KEY_PRESSED="PAGE_UP" ;;
    $'\e[6~') LAST_KEY_PRESSED="PAGE_DOWN" ;;
    $'\e[H') LAST_KEY_PRESSED="HOME" ;;
    $'\e[F') LAST_KEY_PRESSED="END" ;;
    $'\e') LAST_KEY_PRESSED="ESC" ;;
    $'\eOP') LAST_KEY_PRESSED="F1" ;;
    $'\e'?) LAST_KEY_PRESSED="ALT+${LAST_KEY_PRESSED#$'\e'}" ;;
    esac
  else
    case ${LAST_KEY_PRESSED} in
    $'\177' | $'\b') LAST_KEY_PRESSED="BACKSPACE" ;;
    esac
  fi
  return 0
}


# ## interactive::clearKeyPressed
#
# This function reads all the inputs from the user, effectively discarding them.
#
# ```bash
# interactive::clearKeyPressed
# ```
function interactive::clearKeyPressed() {
  local IFS
  IFS='' read -d '' -sr -t 0 LAST_KEY_PRESSED || :
  PREVIOUS_KEY_PRESSED_EXTRA_CHARS=""
}

# ## interactive::createSpace
#
# This function creates some new lines after the current cursor position.
# Then it moves back to its original position.
# This effectively creates a space in the terminal (scroll up if we are at the bottom).
# It does not create more space than the number of lines in the terminal.
#
# - $1: **number of lines** _as int_:
#       the number of lines to create
#
# ```bash
# interactive::createSpace 5
# ```
function interactive::createSpace() {
  local -i lines="${1}"
  lines=$((lines - 1 > GLOBAL_LINES ? GLOBAL_LINES : lines - 1))
  local -i loop
  local newLines
  for ((loop = 0; loop < lines; loop++)); do newLines+=$'\n'; done
  printf '%s' "${AC__CURSOR_MOVE__}1${__AC__COLUMN}${AC__ERASE_LINES_BELOW}${newLines}${AC__CURSOR_MOVE__}${lines}${__AC__START_OF_LINE_UP}"
}

# ## interactive::getCursorPosition
#
# Get the current cursor position.
#
# Returns:
#
# - `CURSOR_LINE`: the line number
# - `CURSOR_COLUMN`: the column number
#
# ```bash
# interactive::getCursorPosition
# ```
function interactive::getCursorPosition() {
  local _escapeCode IFS
  # we request the position and first read \e[
  IFS='' read -d '' -p "${AC__REQUEST_CURSOR_POSITION}" -n 2 -sr _escapeCode || :
  # then read line;colR
  IFS=';' read -d 'R' -sr CURSOR_LINE CURSOR_COLUMN || :
}

# ## interactive::sttyInit
#
# Disable the echo of the tty. Will no longer display the characters typed by the user.
#
# ```bash
# interactive::sttyInit
# ```
function interactive::sttyInit() {
  if command -v stty &>/dev/null; then
    if [[ -z ${INTERACTIVE_STTY_SAVED_CONFIG:-} ]]; then
      # shellcheck source=lib-io
      source io
      io::invoke "stty" "-g"
      INTERACTIVE_STTY_SAVED_CONFIG="${RETURNED_VALUE}"
    fi
    # stty -echo &>/dev/null || :
  fi
}

# ## interactive::sttyRestore
#
# Enable the echo of the tty. Will display the characters typed by the user.
#
# ```bash
# interactive::sttyRestore
# ```
function interactive::sttyRestore() {
  log::info "restoring stty config2"
  if [[ -n ${INTERACTIVE_STTY_SAVED_CONFIG:-} ]]; then
    if command -v stty &>/dev/null; then
      log::info "restoring stty config"
      stty "${INTERACTIVE_STTY_SAVED_CONFIG}"
    fi
  fi
}

# ## interactive::switchToFullScreen
#
# Call this function to start an interactive session in full screen mode.
# This function will switch to the alternate screen, hide the cursor and clear the screen.
# It will also disable echoing when we type something.
#
# You should call interactive::switchBackFromFullScreen at the end of the interactive session.
#
# In the alternate screen, we don't see the error messages so we capture them somewhere else.
#
# ```bash
# interactive::switchToFullScreen
# ```
function interactive::switchToFullScreen() {
  if [[ ! -t 2 ]]; then
    core::fail "This function can only be used in an interactive session. Did you already called interactive::switchBackFromFullScreen?"
  fi

  # disable echoing when we type something
  interactive::sttyInit

  # switch to the alternate screen, hide the cursor and clear the screen
  printf '%s' "${AC__ENABLE_ALTERNATE_BUFFER_SCREEN}${AC__CURSOR_HIDE}${AC__ERASE_SCREEN}"

  # in full screen mode, we don't see the error messages so we capture them somewhere else
  FSFS_TEMPORARY_ERROR_FILE="${GLOBAL_TEMPORARY_IN_MEM_PREFIX}${BASHPID}.valet-interactive.err"
  while [[ -e "${FSFS_TEMPORARY_ERROR_FILE}" ]]; do FSFS_TEMPORARY_ERROR_FILE+="x"; done
  exec 4>&2 2>"${FSFS_TEMPORARY_ERROR_FILE}"
}

# ## interactive::switchBackFromFullScreen
#
# Call this function to switch back from the full screen mode.
#
# - This function will restore the terminal state and show the cursor.
# - It will also restore the key echoing.
# - If there were error messages during the interactive session, they will be displayed at the end.
#
# ```bash
# interactive::switchBackFromFullScreen
# ```
function interactive::switchBackFromFullScreen() {
  if [[ -t 2 ]]; then
    # already in the normal terminal mode
    return
  fi
  # restore the terminal state
  printf '%s' "${AC__CURSOR_SHOW}${AC__TEXT_RESET}${AC__DISABLE_ALTERNATE_BUFFER_SCREEN}"

  # restore the key echoing
  interactive::sttyRestore

  # restore the error output and display them if any
  exec 2>&4 4>&-
  if [[ -s "${FSFS_TEMPORARY_ERROR_FILE}" ]]; then
    io::readFile "${FSFS_TEMPORARY_ERROR_FILE}"
    log::error "Error messages during the interactive session:"$'\n'"${RETURNED_VALUE%$'\n'}"
  fi
}

#===============================================================
# >>> Wait spinner / progress bars
#===============================================================

# Returns a string representing a progress bar.
#
# - $1: **percent** _as int_:
#       the percentage of the progress bar (0 to 100)
# - $2: **size** _as int_:
#       the size of the progress bar (max total nb characters)
#
# Returns:
#
# - `RETURNED_VALUE`: the progress bar string
#
# ```bash
# interactiveGetProgressBarString 50 20
# ```
function interactiveGetProgressBarString() {
  local percent="${1}"
  local size="${2}"
  local progressBarFull="█"
  local progressBarChars=" ▏▎▍▌▋▊▉"

  local -i nbFullChars=$((size * percent / 100))
  local -i extraCharIndex=$(((size * percent - nbFullChars * 100) * 8 / 100))

  RETURNED_VALUE=""
  local -i i
  for ((i = 0; i < nbFullChars; i++)); do
    RETURNED_VALUE+="${progressBarFull}"
  done
  if ((extraCharIndex > 0)); then
    RETURNED_VALUE+="${progressBarChars:${extraCharIndex}:1}"
  fi
  for ((i = ${#RETURNED_VALUE}; i < size; i++)); do
    RETURNED_VALUE+=" "
  done
}

# Starts a wait spinner animation that will loop for a set number of frames.
function interactiveStartProgressBar() {
  local progressFilePath="${1}"
  local barTemplate="${2:-${VALET_CONFIG_PROGRESS_BAR_TEMPLATE:-"#spinner #percent ░#bar░ #message"}}"
  local progressBarSize="${3:-${VALET_CONFIG_PROGRESS_BAR_SIZE:-20}}"
  local frameDelay="${4:-${VALET_CONFIG_PROGRESS_ANIMATION_DELAY:-0.1}}"
  local nbFrameForProgressRefresh="${5:-${VALET_CONFIG_PROGRESS_BAR_UPDATE_INTERVAL:-3}}"
  local maxFrames="${6:-9223372036854775807}"
  local spinner="${7:-${VALET_CONFIG_SPINNER_CHARACTERS:-"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"}}"

  # shellcheck source=lib-io
  source io
  # shellcheck source=lib-ansi-codes
  source ansi-codes

  # Hide the cursor
  printf "%s" "${AC__CURSOR_HIDE}"

  local -i loopProgressRefresh=0
  local -i spinnerIndex=0
  local -i loop=0
  local -i percent=0
  local displayedString computeString percentString message
  while [[ ${loop} -lt ${maxFrames} ]]; do
    # each second, we read the progress file path to get the current %
    if ((loopProgressRefresh >= nbFrameForProgressRefresh)); then
      if [[ ! -f "${progressFilePath}" ]]; then
        exit 0
      fi
      io::readFile "${progressFilePath}"
      percentString="${RETURNED_VALUE%% *}"
      message="${RETURNED_VALUE#* }"
      message="${message%%$'\n'*}"
      if [[ ${percentString} =~ ^([0-9]+)$ ]]; then
        percent=${percentString}
      else
        percent=0
      fi
      loopProgressRefresh=0
    else
      loopProgressRefresh+=1
    fi

    displayedString="${barTemplate//"#spinner"/"${spinner:${spinnerIndex}:1}"}"

    printf -v computeString "%4s" "${percent}%"
    displayedString="${displayedString//"#percent"/"${computeString}"}"

    interactiveGetProgressBarString "${percent}" "${progressBarSize}"
    displayedString="${displayedString//"#bar"/"${RETURNED_VALUE}"}"

    displayedString="${displayedString//"#message"/"${message:-}"}"

    printf "%s%.${GLOBAL_COLUMNS}s%s" "${AC__ERASE_LINE}" "${displayedString}" "${AC__CURSOR_MOVE__}1${__AC__COLUMN}"

    spinnerIndex=$((spinnerIndex >= ${#spinner} - 1 ? 0 : spinnerIndex + 1))
    loop+=1
    io::sleep "${frameDelay}"
  done
}

# ## interactive::startProgress
#
# Shows a spinner / progress animation with configurable output including a progress bar.
#
# The animation will be displayed until interactive::stopProgress is called
# or if the max number of frames is reached.
#
# Outputs to stderr.
# This will run in the background and will not block the main thread.
# The main thread can continue to output logs while this animation is running.
#
# - $1: output template _as string_:
#       (optional) the template to display
#       (defaults to VALET_CONFIG_PROGRESS_BAR_TEMPLATE="#spinner #percent ░#bar░ #message")
# - $2: max width _as int_:
#       (optional) the maximum width of the progress bar
#       (defaults to VALET_CONFIG_PROGRESS_BAR_SIZE=20)
# - $3: frame delay _as float_:
#       (optional) the time in seconds between each frame of the spinner
#       (defaults to VALET_CONFIG_PROGRESS_ANIMATION_DELAY=0.1)
# - $4: refresh every x frames _as int_:
#       (optional) the number of frames of the spinner to wait before refreshing the progress bar
#       (defaults to VALET_CONFIG_PROGRESS_BAR_UPDATE_INTERVAL=3)
# - $5: max frames _as int_:
#       (optional) the maximum number of frames to display
#       (defaults to 9223372036854775807)
# - $6: spinner _as string_:
#       (optional) the spinner to display (each character is a frame)
#       (defaults to VALET_CONFIG_SPINNER_CHARACTERS="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏")
#       Examples:
#       - ◐◓◑◒
#       - ▖▘▝▗
#       - ⣾⣽⣻⢿⡿⣟⣯⣷
#       - ⢄⢂⢁⡁⡈⡐⡠
#       - ◡⊙◠
#       - ▌▀▐▄
#       - ⠄⠆⠇⠋⠙⠸⠰⠠⠰⠸⠙⠋⠇⠆
#
# ```bash
# interactive::startProgress "#spinner" "" 0.05 "" "" "⢄⢂⢁⡁⡈⡐⡠"
# wait 4
# interactive::stopProgress
#
# interactive::startProgress "#spinner #percent ░#bar░ #message" 30 0.05 1
# IDX=0
# while [[ ${IDX} -le 50 ]]; do
#   interactive::updateProgress $((IDX * 2)) "Doing something ${IDX}/50..."
#   IDX=$((IDX + 1))
#   sleep 0.1
# done
# ```
function interactive::startProgress() {
  if [[ ! -t 2 ]]; then
    # we are not in an interactive session
    return 0
  fi

  if [[ -n "${_PROGRESS_BAR_PID:-}" ]]; then
    core::fail "A spinner or progress bar is already running."
  fi

  # shellcheck source=lib-io
  source io

  printf '%s' "${AC__CURSOR_HIDE}"

  # disable echoing when we type something
  interactive::sttyInit

  io::createTempFile
  _PROGRESS_BAR_UPDATE_FILE="${RETURNED_VALUE}"
  _PROGRESS_BAR_RUNNING=true

  shopt -u -o monitor
  ( interactiveStartProgressBar "${_PROGRESS_BAR_UPDATE_FILE}" "$@" 1>&2; ) &
  _PROGRESS_BAR_PID="$!"
}

# ## interactive::updateProgress
#
# Update the progress bar with a new percentage and message.
#
# The animation can be started with interactive::startProgress for more options.
# The animation will stop if the updated percentage is 100.
#
# - $1: **percent** _as int_:
#       the percentage of the progress bar (0 to 100)
# - $2: message _as string_:
#       (optional) the message to display
#
# ```bash
# interactive::updateProgress 50 "Doing something..."
# ```
function interactive::updateProgress() {
  local percent="${1}"
  local message="${2:-}"

  if [[ ! -t 2 ]]; then
    # we are not in an interactive session
    return 0
  fi

  if [[ ${percent} -lt 0 ]]; then
    return
  fi

  # stop the progress bar at 100 percent
  if [[ ${percent} -gt 100 ]]; then
    interactive::stopProgress
    return
  fi

  if [[ ${_PROGRESS_BAR_RUNNING:-} != "true" ]]; then
    interactive::startProgress ""
  fi

  # update the progress file
  printf "%s %s\n" "${percent}" "${message}" >"${_PROGRESS_BAR_UPDATE_FILE}"
}

# ## interactive::stopProgress
#
# Stop the progress bar.
#
# ```bash
# interactive::stopProgress
# ```
function interactive::stopProgress() {
  if [[ ! -t 2 ]]; then
    # we are not in an interactive session
    return 0
  fi

  if [[ ${_PROGRESS_BAR_RUNNING:-} == "true" && -n "${_PROGRESS_BAR_PID:-}" ]]; then
    _PROGRESS_BAR_RUNNING=false
    shopt -u -o monitor
    kill "${_PROGRESS_BAR_PID}" &>/dev/null || :
    rm -f "${_PROGRESS_BAR_UPDATE_FILE}" &>/dev/null || :
    shopt -s -o monitor
    unset -v _PROGRESS_BAR_PID _PROGRESS_BAR_UPDATE_FILE _PROGRESS_BAR_RUNNING
  fi

  printf "%s" "${AC__ERASE_LINE}${AC__CURSOR_SHOW}"

  # restore the key echoing
  interactive::sttyRestore
}
