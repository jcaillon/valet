#!/usr/bin/env bash
set -Eeu -o pipefail
# author: github.com/jcaillon
# description: This script can be sourced by commands to provide convenient functions.
# Notes:
# While it could be very handy to define a function for each of these instructions,
# it would also be slower to execute (function overhead + multiple printf calls).
#
# Reference:
# - https://en.wikipedia.org/wiki/ANSI_escape_code
# - https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
# - https://www.aivosto.com/articles/control-characters.html
# - https://github.com/tmux/tmux/blob/master/tools/ansicode.txt
# - https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_
# - https://vt100.net/docs/vt102-ug/chapter5.html
# - https://vt100.net/docs/vt100-ug/chapter3.html#S3.3.1
#
#
# Ascii graphics:
# - https://gist.github.com/dsample/79a97f38bf956f37a0f99ace9df367b9


#===============================================================
# >>> SGR: Text attributes
#===============================================================
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters

textReset=$'\e[0m'

textBold=$'\e[1m'
textNoBold=$'\e[21m'
textFaint=$'\e[2m'
textNoFaint=$'\e[22m'
textItalic=$'\e[3m'
textNoItalic=$'\e[23m'
textUnderline=$'\e[4m'
textNoUnderline=$'\e[24m'
textBlink=$'\e[5m'
textNoBlink=$'\e[25m'
textInverse=$'\e[7m'
textNoInverse=$'\e[27m'
textStrike=$'\e[9m'
textNoStrike=$'\e[29m'


#===============================================================
# >>> SGR: Colors
#===============================================================
# https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit

colorReset=$'\e[49m'$'\e[39m'

# Text colors
fgBlack=$'\e[30m'
fgBrightBlack=$'\e[90m'
fgRed=$'\e[31m'
fgBrightRed=$'\e[91m'
fgGreen=$'\e[32m'
fgBrightGreen=$'\e[92m'
fgYellow=$'\e[33m'
fgBrightYellow=$'\e[93m'
fgBlue=$'\e[34m'
fgBrightBlue=$'\e[94m'
fgMagenta=$'\e[35m'
fgBrightMagenta=$'\e[95m'
fgCyan=$'\e[36m'
fgBrightCyan=$'\e[96m'
fgWhite=$'\e[37m'
fgBrightWhite=$'\e[97m'

fgReset=$'\e[39m'

# https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
fgColor=$'\e[38;5;'
_code=$'m' # "${fgColor}2${_code}"

# background colors
bgBlack=$'\e[40m'
bgBrightBlack=$'\e[100m'
bgRed=$'\e[41m'
bgBrightRed=$'\e[101m'
bgGreen=$'\e[42m'
bgBrightGreen=$'\e[102m'
bgYellow=$'\e[43m'
bgBrightYellow=$'\e[103m'
bgBlue=$'\e[44m'
bgBrightBlue=$'\e[104m'
bgMagenta=$'\e[45m'
bgBrightMagenta=$'\e[105m'
bgCyan=$'\e[46m'
bgBrightCyan=$'\e[106m'
bgWhite=$'\e[47m'
bgBrightWhite=$'\e[107m'

bgReset=$'\e[49m'

# https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
bgColor=$'\e[48;5;' # "${bgColor}2${_code}"


#===============================================================
# >>> CSI: Cursor control
#===============================================================
# https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences
#
# Cursor at 1;1 is the top left corner of the screen.

# cursor movement
cursorMove=$'\e['
_up=$'A'          # "${cursorMove}2${_up}"
_down=$'B'        # "${cursorMove}2${_down}"
_right=$'C'       # "${cursorMove}2${_right}"
_left=$'D'        # "${cursorMove}2${_left}"
# Moves cursor to beginning of the line n lines down/up. If the active position is at the bottom margin, a scroll up is performed
_startOfLineDown=$'E' # "${cursorMove}1${_startOfLine}"
_startOfLineUp=$'F'   # "${cursorMove}1${_startOfLine}"
_column=$'G'      # "${cursorMove}2${_column}"
_to=$'H'          # "${cursorMove}1;1${_to}" (row;col)

_tabBackward=$'Z' # "${cursorMove}2${_tabBackward}"
_tabForward=$'I'  # "${cursorMove}2${_tabForward}"

_scrollUp=$'S'    # "${cursorMove}2${_scrollUp}" Scroll whole page up by n (default 1) lines. New lines are added at the bottom.
_scrollDown=$'T'  # "${cursorMove}2${_scrollDown}" Scroll whole page down by n (default 1) lines. New lines are added at the top.
requestCursorPosition=$'\e[6n' # Reports the cursor position to the application as (as ESC[n;mR), where n is the line and m is the column.

# erase in display or line
eraseLinesBelow=$'\e[0J' # clear from cursor to end of screen
eraseLinesAbove=$'\e[1J' # clear from cursor to beginning of the screen
eraseScreen=$'\e[2J'     # clear entire screen
eraseCharsRight=$'\e[0K' # clear from cursor to the end of the line
eraseCharsLeft=$'\e[1K'  # clear from cursor to the beginning of the line
eraseLine=$'\e[2K'       # clear entire line


#===============================================================
# >>> General ASCII Codes
#===============================================================

ringBell=$'\a'
returnCarriage=$'\r' # Moves the cursor to the first column.
newLine=$'\n' # Moves to next line, scrolls the display up if at bottom of the screen. Usually does not move horizontally, though programs should not rely on this.
tab=$'\t' #  	Moves the cursor right to next multiple of 8.
backspace=$'\b' # Moves the cursor left (but may "backwards wrap" if cursor is at start of line).

#===============================================================
# >>> Other Common Private Modes
#===============================================================

# cursor
cursorRestorePos=$'\e8'
cursorSavePos=$'\e7'
cursorHide=$'\e[?25l'
cursorShow=$'\e[?25h'

# display
enableAlternateBufferScreen=$'\e[?1049h'
disableAlternateBufferScreen=$'\e[?1049l'
saveScreen=$'\e[?47h'
restoreScreen=$'\e[?47l'

limitScrolling=$'\e[1;'
_lines=$'r' # "${limitScrolling}20${_lines}"

# Repeat last displayed character n times
repeat=$'\e['
_lastChar=$'b'  # "${repeat}2${_lastChar}"

redrawPrompt=$'\r\e[K'

# Change cursor style
# 0 blinking block.
# 1 blinking block (default).
# 2 steady block.
# 3 blinking underline.
# 4 steady underline.
changeCursor=$'\e['
_style=$' q' # "${changeCursor}1${_style}"

# change the cursor color (only works in xterm)
# https://gist.github.com/anonymous/8f1e6c22b5213faf8170dcfc2b0f5b93
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/vga-softcursor.rst
changeCursorToPrompt=$'\e[1 q'$'\e[?16;0;80;c'
changeCursorToNormal=$'\e[0 q'$'\e[?0;c'
