#!/usr/bin/env bash
set -Eeu -o pipefail
# Title:          valet.d/main
# Description:    this script contains the main code for our bash programs and
#                 it should be sourced, not called directly
# Author:         github.com/jcaillon

# we check for this variable to know if this script has already been included
_MAIN_INCLUDED=1

# Handle the case where this script was invoked outside of valet
if [ -z "${VALET_HOME:-}" ]; then
  VALET_HOME="${BASH_SOURCE[0]}"
  VALET_HOME="${VALET_HOME%/*}" # strip file name
  if [[ "${VALET_HOME}" != /* ]]; then
    # resolve relative path (we avoid subshell as much as possible for performance reasons)
    VALET_HOME="$(realpath -L "${VALET_HOME}")"
  fi
  VALET_HOME="${VALET_HOME%/*}" # strip valet.d directory
fi
if [ -z "${_CORE_INCLUDED:-}" ]; then
  # shellcheck source=core
  source "${VALET_HOME}/valet.d/core"
fi

# Parsing the options from environment variables
if [ -n "${VALET_LOG_LEVEL:-}" ]; then
  setLogLevelInt "${VALET_LOG_LEVEL}"
fi
if [ "${VALET_VERBOSE=:-}" = "true" ]; then
  setLogLevelInt "debug"
fi

#===============================================================
# >>> Event handling
#===============================================================

function onErrorInternal() {
  if [ "${ERROR_DISPLAY:-0}" = "1" ]; then
    return 0
  fi
  local stack i stackSize func linen src
  stack=""
  stackSize=${#FUNCNAME[@]}
  treeString="├─"
  for ((i = 1; i < stackSize; i++)); do
    func="${FUNCNAME[$i]}"
    [ -z "${func}" ] && func=MAIN
    linen="${BASH_LINENO[$((i - 1))]}"
    src="${BASH_SOURCE[$i]}"
    [ -z "${src}" ] && src=non_file_source
    if [ "${i}" = "$((stackSize - 1))" ]; then
      treeString="└─"
    fi
    stack+=$'\n'"${treeString} In function $func() $src:$linen"
  done
  logLine "ERROR" $'\uf2d3' "ERROR" "Error code ${1} in ${FUNCNAME[1]}(), stack:${stack}"
  ERROR_DISPLAY=1
}

trap 'onErrorInternal $?' ERR

function onExitInternal() {
  local rc=$?
  debug "Exiting with code ${rc} after ${SECONDS}s."
  if command -v onExit 1>/dev/null 2>&1; then
    onExit
  fi
  # always call cleanUp before exiting
  onCleanUpInternal
  if [[ "${ERROR_DISPLAY:-0}" != "1" && "${rc}" != "0" ]]; then
    logLine "ERROR" $'\uf14c' "EXIT" "Exiting with code ${rc}."
    ERROR_DISPLAY=1
  fi
}

trap onExitInternal EXIT

function onInterruptInternal() {
  echo # Set cursor to the next line of '^C'
  logLine "WARNING" $'\uf256' "STOPPED" "Program interrupted by the user."
  # check if the function exists
  if command -v onInterrupt 1>/dev/null 2>&1; then
    if onInterrupt; then
      # if onInterrupt returns 0, then we cancel the interrupt
      return 0
    fi
  fi
  exit 1
}

# Register CTRL+C SIGINT (interrupt) and CTRL+\ QUIT (interrupt with a coredump) event handler
trap onInterruptInternal SIGINT SIGQUIT

function onTerminateInternal() {
  logLine "ERROR" $'\uf05e' "KILLED" "Program killed."
  # check if the function exists
  if command -v onTerminate 1>/dev/null 2>&1; then
    if onTerminate; then
      # if onTerminate returns 0, then we cancel the termination
      return 0
    fi
  fi
  exit 1
}

# Register SIGHUP (hang up, terminal disconnected) and TERM (terminate the program) event handler
trap onTerminateInternal SIGHUP SIGTERM

function onCleanUpInternal() {
  cleanupTempFiles
  if command -v cleanUp 1>/dev/null 2>&1; then
    cleanUp
  fi
}

# Introducing our own function to handle commands not found, so we can display a better message
function command_not_found_handle() {
  if [ "${1:-}" = "fzf" ]; then
    fail "This program requires ⌜https://github.com/junegunn/fzf⌝ to display interactive prompt."$'\n'"Install fzf or pass the correct options and arguments. See --help for more information."
  fi
  if [ "${1:-}" = "yq" ]; then
    fail "This command requires ⌜https://github.com/mikefarah/yq⌝ to parse the command about functions."$'\n'"Please install it in your path and run this command again."
  fi
  fail "Command not found: ⌜${1}⌝."$'\n'"Please check your ⌜PATH⌝ variable."
}

#===============================================================
# >>> Profiler
#===============================================================
# Enables the profiler and start writing to the given file.
# $1: the file to write to
#
# Usage:
#   enableProfiler "${HOME}/profile_valet.txt"
function enableProfiler() { return 0; }

# Disable the profiler.
#
# Usage:
#   disableProfiler
function disableProfiler() { return 0; }

# The following function allows use to build the enable/disable profiler functions.
# The function depends in the presence of the ts command.
# shellcheck disable=SC2016
function createProfilerFunction() {
  PROFILER_FUNCTION='
  enableProfiler() {
    local file
    file="${1}"

    # Nested profiling not supported
    if [[ -n "${PROFILING:-}" ]]; then return 0; fi
    PROFILING=y

    # create the directory for file and reset it
    mkdir -p "${file%/*}"
    : "${file}"

    inform "Starting profiler, writing in ⌜${file}⌝."
  '
  if command -v ts 1>/dev/null 2>&1; then
    PROFILER_FUNCTION+='
    exec 5> >(ts -i "%.s" > "${file}")
    export BASH_XTRACEFD=5
    '
  else
    PROFILER_FUNCTION+='
    PS4='"'"'+ $(date "+%s.%N")\011$BASH_SOURCE\011$BASH_LINENO\011 '"'"'
    exec 3>&2 2>"${file}"
    '
  fi
  PROFILER_FUNCTION+='
    set -x
  }

  disableProfiler() {
    inform "Disabling profiler."
    set +x
  '
  if command -v ts 1>/dev/null 2>&1; then
    PROFILER_FUNCTION+='
    unset BASH_XTRACEFD
    exec 5>&-
    '
  else
    PROFILER_FUNCTION+='
    exec 2>&3 3>&-
    unset PS4
    '
  fi
  PROFILER_FUNCTION+='
    unset PROFILING
  }'
}
createProfilerFunction
eval "${PROFILER_FUNCTION}"
unset PROFILER_FUNCTION
unset createProfilerFunction

if [ "${VALET_STARTUP_PROFILING:-}" = "true" ]; then
  enableProfiler "${VALET_STARTUP_PROFILING_FILE:-${HOME}/profile_valet.txt}"
fi

#===============================================================
# >>> Help
#===============================================================

# show the help text of a function (can be blank to show the root help)
function showFunctionHelp() {
  local functionName noColor maxColumns
  functionName="${1:-this}"
  noColor="${2:-${VALET_NO_COLOR:-false}}"
  maxColumns="${3:-180}"

  # sudo apt-get install colortest
  # colortest-16b
  local cDefault cTitle cHighlight cOption cArgument cCommand
  if [ "${noColor}" = "true" ]; then
    cDefault=""
    cTitle=""
    cHighlight=""
    cOption=""
    cArgument=""
    cCommand=""
  else
    cDefault=${VALET_COLOR_DEFAULT:-$'\033'"[0m"}
    cTitle=${VALET_COLOR_TITLE:-$'\033'"[0;36m"}
    cHighlight=${VALET_COLOR_HIGHLIGHT:-$'\033'"[0;35m"}
    cOption=${VALET_COLOR_OPTION:-$'\033'"[0;33m"}
    cArgument=${VALET_COLOR_ARGUMENT:-$'\033'"[0;31m"}
    cCommand=${VALET_COLOR_COMMAND:-$'\033'"[0;32m"}
  fi

  local -i helpWidth
  helpWidth="${maxColumns}"
  if [[ helpWidth -gt ${_COLUMNS} ]]; then helpWidth=${_COLUMNS}; fi
  if [[ helpWidth -lt 30 ]]; then helpWidth=30; fi

  local -n command="CMD_COMMAND_${functionName}"
  local -n description="CMD_DESCRIPTION_${functionName}"
  wrapText "${description}" "${helpWidth}" 2 "true"
  description="${LAST_RETURNED_VALUE}"

  local -n functionOptions="CMD_OPTIONS_NAME_${functionName}"
  local -n functionArguments="CMD_ARGUMENTS_NAME_${functionName}"
  local -n functionCommands="CMD_COMMANDS_NAME_${functionName}"
  local -n functionExamples="CMD_EXAMPLES_NAME_${functionName}"

  # usage
  local usage
  if [ "${functionName}" = "this" ]; then
    usage="valet"
  else
    usage="valet ${command}"
  fi
  if [ -n "${functionOptions:-}" ]; then
    usage+=" ${cOption}[options]${cDefault}"
  fi
  if [ -n "${functionCommands:-}" ]; then
    usage+=" ${cCommand}[command]${cDefault}"
  else
    if [ -n "${functionArguments:-}" ]; then
      for argument in "${functionArguments[@]}"; do
        if [[ "${argument}" == *\?* ]]; then
          usage+=" ${cArgument}[${argument//\?/}]${cDefault}"
        else
          usage+=" ${cArgument}<${argument}>${cDefault}"
        fi
      done
    fi
  fi
  wrapText "${usage}" "${helpWidth}" 2 "true"
  usage="${LAST_RETURNED_VALUE}"

  # options
  local options
  if [ -n "${functionOptions:-}" ]; then
    options="${cTitle}OPTIONS${cDefault}"$'\n'$'\n'
    writeAsTable "${helpWidth}" "${cOption}" "CMD_OPTIONS" "${functionName}"
    options+="${LAST_RETURNED_VALUE}"$'\n'
  fi

  # arguments
  local arguments
  if [[ -z "${functionCommands:-}" && -n "${functionArguments:-}" ]]; then
    arguments="${cTitle}ARGUMENTS${cDefault}"$'\n'$'\n'
    writeAsTable "${helpWidth}" "${cArgument}" "CMD_ARGUMENTS" "${functionName}"
    arguments+="${LAST_RETURNED_VALUE}"$'\n'
  fi

  # commands
  local commands
  if [ -n "${functionCommands:-}" ]; then
    commands="${cTitle}COMMANDS${cDefault}"$'\n'$'\n'
    writeAsTable "${helpWidth}" "${cCommand}" "CMD_COMMANDS" "${functionName}"
    commands+="${LAST_RETURNED_VALUE}"$'\n'
  fi

  # examples
  local examples
  if [ -n "${functionExamples:-}" ]; then
    examples="${cTitle}EXAMPLES${cDefault}"$'\n'$'\n'
    writeAsTable "${helpWidth}" "" "CMD_EXAMPLES" "${functionName}"
    examples+="${LAST_RETURNED_VALUE}"$'\n'
  fi

  local output="${cTitle}ABOUT${cDefault}

${description}

${cTitle}USAGE${cDefault}

${usage}

${options:-}${arguments:-}${commands:-}${examples:-}"

  # surround "markdown like" _italic_ with italic color
  if [ "${noColor:-false}" = "false" ]; then
    output="${output//⌜/${cHighlight}⌜}"
    output="${output//⌝/⌝${cDefault}}"
  fi

  echo "${output}"
}

# used in show help to write a table of options, commands, arguments...
# transform text1\ttext2 to:
#   text1
#           text2
# text1 can be showed in color and we respect a maximum width
function writeAsTable() {
  local width color prefix functionName
  width="${1}"
  color="${2}"
  prefix="${3}"
  functionName="${4}"

  local -n names="${prefix}_NAME_${functionName}"
  local -n descriptions="${prefix}_DESCRIPTION_${functionName}"

  local cDefault output description index
  if [ -n "${color:-}" ]; then cDefault=$'\033'"[0m"; fi

  output=""
  for index in "${!names[@]}"; do
    wrapText "${names[${index}]}" "${helpWidth}" 2 "true"
    output+="${color}${LAST_RETURNED_VALUE}${cDefault:-}"$'\n'

    wrapText "${descriptions[${index}]}" "${helpWidth}" 6 "true"
    output+="${LAST_RETURNED_VALUE}"$'\n'
  done

  LAST_RETURNED_VALUE="${output}"
}

# shellcheck disable=SC2317
function about_showCommandHelp() {
  echo "
command: help
shortDescription: Show the help this program or of a specific command
description: |-
  Show the help this program or of the help of a specific command.

  You can show the help with or without colors and set the maximum columns for the help text.
arguments:
  - name: commands?...
    description: |-
      The name of the command to show the help for.
      If not provided, show the help for the program.
options:
  - name: -nc, --no-colors
    description: |-
      Do not use any colors in the output
  - name: -c, --columns <number>
    description: |-
      Set the maximum columns for the help text
examples:
  - name: help ⌟cmd⌞
    description: |-
      Shows the help for the command ⌜cmd⌝
  - name: help ⌟cmd⌞ ⌟subCmd⌞
    description: |-
      Shows the help for the sub command ⌜subCmd⌝ of the command ⌜cmd⌝
  - name: help --no-colors --columns 50
    description: |-
      Shows the help for the program without any color and with a maximum of 50 columns
"
}

# show the help of the given command (can be blank to show the root help)
# e.g. showCommandHelp "cmd1 subcmd2"
function showCommandHelp() {
  local -a commands
  local parsingErrors help columns noColors help
  parseFunctionArguments "${FUNCNAME[0]}" "$@" && eval "${LAST_RETURNED_VALUE}"

  checkParseResults "${help:-}" "${parsingErrors:-}"

  # show the program help if no commands are provided
  if [ -z "${commands[0]:-}" ]; then
    showFunctionHelp "this" "${noColors:-}" "${columns:-}"
    return 0
  fi

  local functionName
  fuzzyMatchCommandtoFunctionName "${commands[@]}" && functionName="${LAST_RETURNED_VALUE:-}"
  if [ -z "${functionName}" ]; then
    fail "Could not show the help because the command ⌜${commands[*]}⌝ does not exist."
  fi

  showFunctionHelp "${functionName}" "${noColors:-}" "${columns:-}"
}

#===============================================================
# >>> Main functions
#===============================================================

# parse the user arguments for the main program.
function parseMainArguments() {
  local -a commands subCommandArgs

  local maxNbCommands
  maxNbCommands=$((CMD_MAX_SUB_COMMAND_LEVEL + 1))

  # Parsing the options from environment variables
  if [ "${VALET_PROFILING=:-}" = "true" ]; then
    PROFIL_COMMAND=true
  fi

  # for the main command, we parse the arguments manually
  # this is for performance reasons, we want to stop parsing as soon as possible
  while [[ $# -gt 0 ]]; do
    if [ -n "${commands[0]:-}" ] && [[ "${1}" == "-"* ]]; then
      # we matched the commands and we found an option for the sub command
      break
    fi
    case "${1}" in
    -x | --profiling)
      PROFIL_COMMAND=true
      ;;
    -ll | -log | --log-level)
      shift
      setLogLevelInt "${1}"
      ;;
    -v | --verbose)
      setLogLevelInt "debug"
      ;;
    --version)
      cat "${VALET_HOME}/valet.d/version"
      exit 0
      ;;
    -h | --help)
      showFunctionHelp "this"
      exit 0
      ;;
    -*)
      local fuzzyOption options
      options="${CMD_OPTIONS_NAME_this[*]%<*}"
      options="${options//,/}"
      fuzzyFindOption "${options}" "${1}" && fuzzyOption="${LAST_RETURNED_VALUE:-}"
      fail "Unknown option ⌜${1}⌝${fuzzyOption})."
      ;;
    *)
      commands+=("$1")
      # we don't expect more than maxNbCommands commands so if we matched enough, break
      if [[ "${#commands[@]}" -ge "${maxNbCommands}" ]]; then
        break
      fi
      # if we matched the first command, we can extract the arguments for the sub command
      if [[ "${#commands[@]}" -eq "1" ]]; then
        subCommandArgs=("$@")
      fi
      ;;
    esac
    shift
  done

  debug "Command found ⌜${commands[*]}⌝."

  if [ -z "${commands[0]:-}" ]; then
    # no command provided, we show the commands menu
    showCommandsMenuAndRun "${CMD_COMMANDS_MENU_BODY}"
  fi

  local functionName nbArgs
  fuzzyMatchCommandtoFunctionName "${commands[@]}" && functionName="${LAST_RETURNED_VALUE:-}" && nbArgs="${LAST_RETURNED_VALUE2:-}"
  if [ -z "${functionName}" ]; then
    fail "Could not find a command for ⌜${commands[*]}⌝."
  fi

  debug "Function name found ⌜${functionName}⌝."

  # run the function without the matched commands in the arguments
  runFunction "${functionName}" "${subCommandArgs[@]:${nbArgs}}"
}

function sourceUserCommands() {
  if [ -n "${_CMD_INCLUDED:-}" ]; then
    return 0
  fi

  # source the user commands
  local userDirectory
  getUserDirectory && userDirectory="${LAST_RETURNED_VALUE}"

  local commandsFile
  commandsFile="${userDirectory}/commands"

  # if the commands file does not exist, we use the examples commands or we fail
  if [ ! -e "${commandsFile}" ]; then
    local message
    message="The valet user directory ⌜${userDirectory}⌝ does not contain a built ⌜commands⌝ file."$'\n'
    message+="To get started with valet, you must build your command list using the ⌜valet self build⌝ command."$'\n'
    message+="Please check the help using ⌜valet self build --help⌝ for details."
    commandsFile="${VALET_HOME}/examples.d/commands"
    if [ -e "${commandsFile}" ]; then
      message+=$'\n'"Now using the examples commands from ⌜${commandsFile%/*}⌝."
      warn "${message}"
    else
      fail "${message}"
    fi
  fi

  # source commands
  # shellcheck disable=SC1090
  source "${commandsFile}"
}

# Run a given function
# The first arguments should be the function name,
# the rest of the arguments are the user arguments starting
# from the command name. e.g.:
# sub cmd --opt1 arg1 arg2
#
# $1: the function name
# $2+: the user arguments
function runFunction() {
  local functionName
  functionName="${1}"
  shift

  if [ -z "${functionName}" ]; then
    fail "No function name provided."
  fi

  # get command name of the function
  local -n command="CMD_COMMAND_${functionName}"

  # check for sudo if the function requires it
  local -n requiresSudo="CMD_SUDO_${functionName}"
  if [ "${requiresSudo:-}" = "true" ]; then
    checkSudo
  fi

  # source the file in which the function is located if needed
  sourceForFunction "${functionName}"

  if ! command -v "${functionName}" 1>/dev/null 2>&1; then
    fail "The function ⌜${functionName}⌝ associated with the command ⌜${command}⌝ does not exist."
  fi


  debug "Running the command ⌜${command}⌝ with the function ⌜${functionName}⌝ and the arguments ⌜$*⌝."

  # disable startup profile and enable command profile, if needed
  if [ "${VALET_STARTUP_PROFILING:-}" = "true" ]; then
    disableProfiler
  fi
  if [ "${PROFIL_COMMAND:-}" = "true" ]; then
    enableProfiler "${VALET_CMD_PROFILING_FILE:-${HOME}/profile_valet_cmd.txt}"
  fi

  # execute the function
  "${functionName}" "$@"

  if [ "${PROFIL_COMMAND:-}" = "true" ]; then
    disableProfiler
  fi

  exit 0
}

# Source the file associated with the function if needed.
# $1: the function name
#
# Usage:
#  sourceForFunction "functionName"
function sourceForFunction() {
  local functionName
  functionName="${1}"

  local fileToSource
  if ! command -v "${functionName}" 1>/dev/null 2>&1; then
    local -n fileToSource="CMD_FILETOSOURCE_${functionName}"
    if [ -e "${VALET_HOME:-}/${fileToSource}" ]; then
      # shellcheck disable=SC1090
      source "${VALET_HOME:-}/${fileToSource}"
      debug "Loaded file ⌜${VALET_HOME:-}/${fileToSource}⌝."
    else
      warn "The file ⌜${VALET_HOME:-}/${fileToSource}⌝ referenced by the function ⌜${functionName}⌝ does not exist!"
    fi
  fi
}

# This function checks if the user has sudo privileges.
# If the user has sudo, it will set the SUDO variable to "sudo".
# If the user does not have sudo, it will set the SUDO variable to "".
#
# Usage:
#  checkSudo
function checkSudo() {
  # sudo
  if command -v sudo 1>/dev/null 2>&1; then
    inform "This command requires sudo privileges."
    SUDO="sudo"
    $SUDO echo "alright" 1>/dev/null || fail "Could not sudo but the command requires it."
  else
    SUDO=""
  fi
}

# Show the given commands in an interactive menu and then
# run the selected command if any.
# $1: the menu body
function showCommandsMenuAndRun() {
  local commands
  commands="${1}"

  # display the menu
  local sortedCommandsMenuBody
  sortCommands "commands-menu" "${commands}" && sortedCommandsMenuBody="${LAST_RETURNED_VALUE}"

  local commandChoice
  showInteractiveCommandsMenu "${CMD_COMMANDS_MENU_HEADER}" "${sortedCommandsMenuBody}" && commandChoice="${LAST_RETURNED_VALUE}"
  if [[ -z "${commandChoice}" ]]; then
    # the user pressed escape or ctrl-c
    exit 0
  fi
  addLastChoice "commands-menu" "${commandChoice}"

  # get the function name from the command by replacing spaces and hyphens with _
  local functionName
  getFunctionNameFromCommand "${commandChoice}" && functionName="${LAST_RETURNED_VALUE}"

  runFunction "${functionName}"
}

# This function sorts the commands in the menu
# by reading a file that contains the last used commands (last on top).
# The file is located in the configuration directory of the program.
# $1: the id of the menu (used in the file name)
# $2: the menu body
#
# Usage:
#  sortCommands "id" "${commands}" && sortedCommands="${LAST_RETURNED_VALUE}"
function sortCommands() {
  local menuId commands
  menuId="${1}"
  commands="${2}"

  local lastChoicesFile
  getLocalStateDirectory
  lastChoicesFile="${LAST_RETURNED_VALUE}/${menuId}-last-choice"
  if [ ! -e "${lastChoicesFile}" ]; then
    LAST_RETURNED_VALUE="${commands}"
    return 0
  fi

  local lastChoices
  readarray -d $'\n' -t lastChoices < "${lastChoicesFile}"

  # list all the unplayed commands
  local unplayedCommands line command lastChoice played
  local -a commandsArray
  local IFS=$'\n'
  for line in ${commands}; do
    command="${line%%$'\t'*}"
    command="${command%%  *}"
    # check if the command has not been played yet
    played=false
    for lastChoice in "${lastChoices[@]}"; do
      if [[ "${lastChoice}" == "${command}" ]]; then
        played=true
        break
      fi
    done
    # if not played, add it to the list
    if [ "${played}" = "false" ]; then
      unplayedCommands+="${line}"$'\n'
    fi
    commandsArray+=("${line}")
  done

  # list all the played commands
  local playedCommands
  for lastChoice in "${lastChoices[@]}"; do
    # find the corresponding line in the commands, if any
    for line in "${commandsArray[@]}"; do
      command="${line%%$'\t'*}"
      command="${command%%  *}"
      if [[ "${command}" == "${lastChoice}" ]]; then
        playedCommands+="${line}"$'\n'
        break
      fi
    done
  done

  commands="${playedCommands:-}${unplayedCommands:-}"
  LAST_RETURNED_VALUE="${commands%$'\n'}"
}

# This function adds the user command choice to the last choices file.
# It allows to sort the commands in the menu by the last used commands.
# $1: the id of the menu (used in the file name)
# $2: the command to add
#
# Usage:
#  addLastChoice "id" "command"
function addLastChoice() {
  local menuId command
  menuId="${1}"
  command="${2}"

  local maxNumberOfLastChoice=${VALET_REMEMBER_LAST_CHOICES:-20}

  # load last choices from the file into an array
  local lastChoicesFile
  getLocalStateDirectory
  lastChoicesFile="${LAST_RETURNED_VALUE}/${menuId}-last-choice"
  if [ ! -e "${lastChoicesFile}" ]; then
    touch "${lastChoicesFile}"
  fi

  local lastChoices
  readarray -d $'\n' -t lastChoices < "${lastChoicesFile}"

  # write the command first
  echo "${command}" > "${lastChoicesFile}"

  # loop through the last choices and add them to the file, limit to 20 total
  local -i total index
  total="${#lastChoices[@]}"
  [[ total -gt maxNumberOfLastChoice ]] && total=$((maxNumberOfLastChoice - 1))
  index=0
  for((index=0; index<total; index++)); do
    if [[ "${lastChoices[${index}]}" != "${command}" ]]; then
      echo "${lastChoices[${index}]}" >> "${lastChoicesFile}"
    else
      total+=1
      [[ total -gt ${#lastChoices[@]} ]] && total=${#lastChoices[@]}
    fi
  done
}

# show an interactive menu for commands
# returns the selected command in standard output
# $1: the menu header
# $2: the menu body
# $3+: additional options to pass to fzf (e.g. --height=10)
#
# Usage:
#  showInteractiveCommandsMenu "header" "body" && choice="${LAST_RETURNED_VALUE}"
#  showInteractiveCommandsMenu "header" "body" --height=10 && choice="${LAST_RETURNED_VALUE}"
function showInteractiveCommandsMenu() {
  local menuHeader menuBody
  menuHeader="${1}"
  menuBody="${2}"
  shift 2

  local -i menuHeaderLength
  local line
  while read -r line; do
    menuHeaderLength+=1
  done <<< "${menuHeader}"

  local commandsPrompt previewWidth commandChoice
  commandsPrompt="${menuHeader}"$'\n'"${menuBody}"
  previewWidth=$((_COLUMNS / 2 - 10))
  if [[ previewWidth -le 0 ]]; then
    previewWidth=10
  fi

  local choice
  choice="$(fzf \
      --tiebreak=begin,index --no-multi --cycle \
      --layout=reverse --info=default \
      --margin=0 --padding=0 \
      "--header-lines=${menuHeaderLength}" \
      --preview-window=right:$((previewWidth)):wrap \
      --preview="echo {} | cut -d$'\t' -f1 | sed -e 's/[[:space:]]*$//' | xargs -P1 -I{} '${VALET_HOME}/valet' help --columns $((previewWidth - 2)) {}" \
      "$@" <<< "${commandsPrompt}" || echo "")"
  choice="${choice%%$'\t'*}"
  choice="${choice%%  *}"
  LAST_RETURNED_VALUE="${choice}"
}

#===============================================================
# >>> Find command/function from arguments
#===============================================================

# Get the function name of a command.
#
# Usage:
#  getFunctionNameFromCommand "self build" && echo "${LAST_RETURNED_VALUE}"
function getFunctionNameFromCommand() {
  local command
  command="${1:-}"
  command="${command//-/_}"
  local -n functionName="CMD_FUNCTION_NAME_${command// /_}"

  LAST_RETURNED_VALUE="${functionName:-}"
}

# Find the function name from arguments that represents the commands.
# If we do not find an exact match, we return try to fuzzy find the command
# and then return its function name.
# $@: the commands to find
# returns: the function name in the global variable LAST_RETURNED_VALUE
#
# Usage:
#  fuzzyMatchCommandtoFunctionName "self" "build" && echo "${LAST_RETURNED_VALUE}"
function fuzzyMatchCommandtoFunctionName() {
  local level loopI functionName command exactCommand
  if [ $# -eq 0 ]; then
    return 0
  fi

  getMaxPossibleCommandLevel "$@" && level="${LAST_RETURNED_VALUE}"

  # we put the arguments into an array so we can interpret 'my' 'sub'
  # and 'my sub' as the same command (we split everything by space)
  local -a commandArrray
  # shellcheck disable=SC2206
  commandArrray=($*)

  for ((loopI = level; loopI >= 1; loopI--)); do
    command="${commandArrray[*]:0:$loopI}"

    # case where the command is exact, we can match the function immediately
    getFunctionNameFromCommand "${command}" && functionName="${LAST_RETURNED_VALUE}"
    if [ -n "${functionName:-}" ]; then
      break
    fi

    # case where the command is not exact, we try to fuzzy match it
    fuzzyMatch "${command}" "${CMD_ALL_COMMANDS}" && exactCommand="${LAST_RETURNED_VALUE}"
    if [ -n "${exactCommand}" ]; then
      getFunctionNameFromCommand "${exactCommand}" && functionName="${LAST_RETURNED_VALUE}"
      inform "Fuzzy matching the command ⌜${command}⌝ to ⌜${exactCommand}⌝."
      break
    fi
  done

  LAST_RETURNED_VALUE="${functionName:-}"
  LAST_RETURNED_VALUE2="${loopI}"
}

# Return the maximum level of subcommands
# if in valet with have at max 2 level of commands
# e.g. cmd subcmd
# then there is no need to try to match a command with 5 arguments
# Same thing, if we provide only 1 argument to the cli, we
# can only match a simple command
# $@: the arguments
#
# Usage:
#  getMaxPossibleCommandLevel "cmd1" "subcmd2" "subsubcmd3" && level="${LAST_RETURNED_VALUE}"
function getMaxPossibleCommandLevel() {
  local command commandPart level maxLevel
  # count the number of spaces
  command="${*}"
  level=0
  # shellcheck disable=SC2034
  for commandPart in ${command}; do
    level=$((level + 1))
  done
  maxLevel=$((CMD_MAX_SUB_COMMAND_LEVEL + 1))
  if [ "${level}" -gt "${maxLevel}" ]; then
    level="${maxLevel}"
  fi

  LAST_RETURNED_VALUE="${level}"
}

#===============================================================
# >>> Parsers
#===============================================================

# Parses the arguments and options of a function.
# Usage:
#  parseFunctionArguments "functionName" "$@" && eval "${LAST_RETURNED_VALUE}"
#
# Notes:
# - It will return a string that can be evaluated to set the variables
#   corresponding to the arguments and options; e.g.:
#     "local arg1 option1
#     arg1=\"\"
#     option1=\"\"
#     ..."
# - It will also set the variable parsingErrors if there are any errors.
# - Variable name for an option is taken from the first --long version of the option.
# - It will set the variable as an array if the (last) argument name ends with '...'
function parseFunctionArguments() {
  local functionName
  functionName="${1}"
  shift

  local -n argumentsName="CMD_ARGS_NAME_${functionName}"
  local -n isLastArgumentAnArray="CMD_ARGS_LAST_IS_ARRAY_${functionName}"
  local -n nbOptionalArgsStr="CMD_ARGS_NB_OPTIONAL_${functionName}"
  local -i nbOptionalArgs="${nbOptionalArgsStr:-0}"
  ${isLastArgumentAnArray:=false}
  local -i totalNbArguments
  if [ -n "${argumentsName[0]:-}" ]; then totalNbArguments=${#argumentsName[@]}; else totalNbArguments=0; fi
  local -i argumentPosition
  argumentPosition=0

  local -n options="CMD_OPTS_${functionName}"
  local -n optionsHasValue="CMD_OPTS_HAS_VALUE_${functionName}"
  local -n optionsName="CMD_OPTS_NAME_${functionName}"
  local -n optionsNameSc="CMD_OPTS_NAME_SC_${functionName}"
  local -i totalNbOptions
  if [ -n "${options[0]:-}" ]; then totalNbOptions=${#options[@]}; else totalNbOptions=0; fi

  # shortcut if the function expect no arguments and no options
  if [[ totalNbArguments -eq 0 && totalNbOptions -eq 0 ]]; then
    LAST_RETURNED_VALUE=""
    return 0
  fi

  local -a lastArgumentValues
  local -a outputErrors
  local -a outputSetLine
  local -a matchedOptionsIndex

  # parse each arguments
  local -i optionIndex matchedIndex
  local option startedArguments optionValue optionName argumentName
  startedArguments="false"
  while [[ $# -gt 0 ]]; do

    if [[ "${1}" == "-"* ]]; then
      matchedIndex=-1

      # we are matching an option
      # try to match the argument with one of the option name
      if [[ totalNbOptions -gt 0 ]]; then
        for optionIndex in "${!options[@]}"; do
          for option in ${options[${optionIndex}]}; do
            if [[ "${option}" == "${1}" ]]; then
              matchedIndex="${optionIndex}"
              break 2
            fi
          done
        done
      fi

      if [[ matchedIndex -ne -1 ]]; then
        # it's a match!
        if [ "${startedArguments}" = "true" ]; then
          outputErrors+=("Option ⌜${1}⌝ was given after the first argument, it should come before that.")
        else
          optionValue="${optionsHasValue[${matchedIndex}]:-}"
          optionName="${optionsName[${matchedIndex}]}"
          matchedOptionsIndex+=("${matchedIndex}")

          if [ "${optionValue}" = "true" ]; then
            shift
            if [ $# = 0 ]; then
              outputErrors+=("Missing value for option ⌜${optionName}⌝.")
            else
              outputSetLine+=("${optionName}=\"${1//\"/\\\"}\"")
            fi
          else
            outputSetLine+=("${optionName}=\"true\"")
          fi
        fi

      else
        # if we didn't match any option, flag it as unknown option and add it to the leftOver
        fuzzyFindOption "${options[*]}" "${1}" && fuzzyOption="${LAST_RETURNED_VALUE:-}"
        outputErrors+=("Unknown option ⌜${1}⌝${fuzzyOption:-}.")
      fi

    else

      # we are matching an argument
      startedArguments="true"

      if [[ argumentPosition -ge totalNbArguments ]]; then
        outputErrors+=("Expecting ${totalNbArguments} argument(s), got extra argument ⌜${1}⌝.")
      else
        argumentName="${argumentsName[${argumentPosition}]}"

        if [[ argumentPosition -eq $((totalNbArguments - 1)) && "${isLastArgumentAnArray}" = "true" ]]; then
          # if the arg ends with ... we expect an infinite amount of arguments
          lastArgumentValues+=("${1}")
        else
          argumentPosition=+1
          outputSetLine+=("${argumentName}=\"${1//\"/\\\"}\"")
        fi

      fi
    fi

    shift
  done

  # increase argument position if the last arg is an array because we don't do it in the loop
  if [ -n "${lastArgumentValues[0]:-}" ]; then
    argumentPosition=$((argumentPosition + 1))
  fi

  # check if we have missing arguments
  local -i nbExpectedArgs=$((totalNbArguments - nbOptionalArgs))
  if [[ argumentPosition -lt nbExpectedArgs ]]; then
    outputErrors+=("Expecting ⌜${nbExpectedArgs}⌝ argument(s) but got ⌜$((argumentPosition))⌝.")
  fi

  local outputString

  # define all the possible local variables for options and arguments
  local option argumentIndex nbScalarArguments
  outputString="local parsingErrors"
  for option in "${optionsName[@]}"; do
    outputString+=" ${option}"
  done
  nbScalarArguments="${totalNbArguments}"
  [ "${isLastArgumentAnArray}" = "true" ] && nbScalarArguments=$((nbScalarArguments - 1))
  for ((argumentIndex = 0; argumentIndex < nbScalarArguments; argumentIndex++)); do
    outputString+=" ${argumentsName[${argumentIndex}]}"
  done
  outputString+=$'\n'
  if [ "${isLastArgumentAnArray}" = "true" ]; then
    outputString+="local -a ${argumentsName[${nbScalarArguments}]}"$'\n'
  fi

  # assign all unmatched options to the corresponding global variable
  local optionIndex optionName optionMatched matchedIndex optionNameSc
  for optionIndex in "${!options[@]}"; do
    optionMatched="false"
    for matchedIndex in "${matchedOptionsIndex[@]}"; do
      if [ "${optionIndex}" = "${matchedIndex}" ]; then
        optionMatched="true"
        break
      fi
    done
    if [ "${optionMatched}" = "false" ]; then
      optionName="${optionsName[${optionIndex}]}"
      optionNameSc="${optionsNameSc[${optionIndex}]:-}"
      if [ -n "${optionNameSc}" ]; then
        outputString+="${optionsName[${optionIndex}]}=\"\${${optionNameSc}:-}\""$'\n'
      fi
    fi
  done

  # output the parsing errors
  local -i outputErrorIndex
  outputString+="parsingErrors=\""
  for outputErrorIndex in "${!outputErrors[@]}"; do
    if [[ outputErrorIndex -gt 0 ]]; then
      outputString+=$'\n'
    fi
    outputString+="${outputErrors[${outputErrorIndex}]}"
  done
  outputString+="\""$'\n'

  # output the matched arguments/options values
  local outputSet
  for outputSet in "${outputSetLine[@]}"; do
    outputString+="${outputSet}"$'\n'
  done

  # output the last argument values
  if [ "${isLastArgumentAnArray}" = "true" ]; then
    local lastArgumentValue
    outputString+="${argumentsName[${nbScalarArguments}]}=("$'\n'
    for lastArgumentValue in "${lastArgumentValues[@]}"; do
      outputString+="\"${lastArgumentValue//\"/\\\"}\""$'\n'
    done
    outputString+=")"
  fi

  LAST_RETURNED_VALUE="${outputString}"
}

# Tries to help the user by suggesting a fix for an unknown option
# we receive the function options and the unknown option string
# Usage:
#  fuzzyFindOption "option1 option2 option3" "opt1" && fuzzyOption="${LAST_RETURNED_VALUE}"
function fuzzyFindOption() {
  local options unknownOption suggestedOption
  options="${1}"
  unknownOption="${2}"

  # split to get one possible option per line
  fuzzyMatch "${unknownOption}" "${options// /$'\n'}" && suggestedOption="${LAST_RETURNED_VALUE}"
  suggestedOption="${suggestedOption%%$'\n'*}"
  if [ -n "${suggestedOption}" ]; then
    suggestedOption=" (did you mean ⌜${suggestedOption}⌝?)"
  fi

  LAST_RETURNED_VALUE="${suggestedOption}"
}

# Parse the arguments and options of a function.
# If no arguments are provided but some are expected, it will enter interactive mode.
# See the @parseArguments function for more details on parsing.
#
# Usage:
#   parseFunctionArgumentsOrGoInteractive "functionName" "$@" && eval "${LAST_RETURNED_VALUE}"
function parseFunctionArgumentsOrGoInteractive() {
  local functionName
  functionName="${1}"
  shift

  parseFunctionArguments "${functionName}" "$@"
  local parsedArguments="${LAST_RETURNED_VALUE}"
  debug "Parsed arguments:"$'\n'"${parsedArguments}"

  # check if the function is expecting arguments and/or options
  local expectArguments
  local -n arguments="CMD_ARGUMENTS_NAME_${functionName}"
  if [ -n "${arguments[0]:-}" ]; then
    expectArguments="true"
  fi

  if [[ ("${expectArguments:-false}" == "true" && $# -eq 0) || "${VALET_FORCE_INTERACTIVE_MODE:-false}" == "true" ]]; then
    goInteractive "${functionName}" "${parsedArguments}"
  fi

  LAST_RETURNED_VALUE="${parsedArguments}"
}

function goInteractive() {
  local functionName parsedArguments
  functionName="${1}"
  parsedArguments="${2}"

  # TODO: go interactive
  warn "Entering interactive mode for the function ⌜${functionName}⌝. This is not yet implemented."

  # at the end, echo to the user the complete command that will be run
}

#===============================================================
# >>> Load the commands
#===============================================================
sourceUserCommands
