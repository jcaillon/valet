#!/usr/bin/env bash
# Title:         valet.d/core
# Description:   this script contains the core functions and variables and it should be sourced, not called directly
# Author:        github.com/jcaillon

# we check for this variable to know if this script has already been included
_CORE_INCLUDED=1

if [ -z "${_MAIN_INCLUDED:-}" ]; then
  # shellcheck source=cmd
  VALETD_PATH="${BASH_SOURCE[0]}"
  VALETD_PATH="${VALETD_PATH%/*}" # strip file name
  source "${VALETD_PATH}/main"
fi

#===============================================================
# >>> Core variables
#===============================================================

# the variable EXPORT_VARIABLE_SCRIPT will contain the path to the script that should be modified to
# automatically export variables when running the shell
HOME=~


#===============================================================
# >>> Temporay files and folders
#===============================================================

# little trick here; since we might use createTempFile / createTempDirectory in subshell $()
# they will not have access to the same global variables.
# thus, we declare them with a hardcoded value for TMPDIR so that they create temp files
# under this directory (which we can then clean up)
_TEMPORARY_DIRECTORY="${TMPDIR:-/tmp}/valet-${EPOCHSECONDS}"
while true; do
  if [ ! -d "${_TEMPORARY_DIRECTORY}" ]; then break; fi
  _TEMPORARY_DIRECTORY+="-${BASHPID}"
done

# Creates a temporary file and return its path in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  createTempFile && local file="${LAST_RETURNED_VALUE}"
function createTempFile() { return 0; }
# shellcheck disable=SC2016
CREATE_TEMP_FILE_FUNCTION='
function createTempFile() {
  TMPDIR="'"${_TEMPORARY_DIRECTORY}"'"
  if [ ! -d "${TMPDIR}" ]; then
    mkdir -p "${TMPDIR}" 1>&2 2>/dev/null
  fi
  TEMPORARY_FILE_NUMBER=${TEMPORARY_FILE_NUMBER:-0}
  while true; do
    TEMPORARY_FILE_NUMBER=$((TEMPORARY_FILE_NUMBER + 1))
    LAST_RETURNED_VALUE="${TMPDIR}/f${BASH_SUBSHELL}${TEMPORARY_FILE_NUMBER}"
    if [ ! -f "${LAST_RETURNED_VALUE}" ]; then
      touch "${LAST_RETURNED_VALUE}" 1>&2 2>/dev/null
      return 0
    fi
  done
}
'

# Creates a temporary directory and return its path in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  createTempDirectory && local file="${LAST_RETURNED_VALUE}"
function createTempDirectory() { return 0; }
# shellcheck disable=SC2016
CREATE_TEMP_DIRECTORY_FUNCTION='
function createTempDirectory() {
  TMPDIR="'"${_TEMPORARY_DIRECTORY}"'"
  TEMPORARY_DIRECTORY_NUMBER=${TEMPORARY_DIRECTORY_NUMBER:-0}
  while true; do
    TEMPORARY_DIRECTORY_NUMBER=$((TEMPORARY_DIRECTORY_NUMBER + 1))
    LAST_RETURNED_VALUE="${TMPDIR}/d${BASH_SUBSHELL}${TEMPORARY_DIRECTORY_NUMBER}"
    if [ ! -d "${LAST_RETURNED_VALUE}" ]; then
      mkdir -p "${LAST_RETURNED_VALUE}" 1>&2 2>/dev/null
      return 0
    fi
  done
}
'

# Removes all the tempoary files that were created.
# shellcheck disable=SC2016
CREATE_TEMP_CLEANUP_FUNCTION='
function cleanupTempFiles() {
  local tmpDir
  tmpDir="'"${_TEMPORARY_DIRECTORY}"'"
  if [ ! -d "${tmpDir}" ]; then
    return 0
  fi
  debug "Deleting temporary files."
  rm -Rf "${tmpDir}" 1>&2 2>/dev/null
}
'

eval "${CREATE_TEMP_FILE_FUNCTION}"$'\n'"${CREATE_TEMP_DIRECTORY_FUNCTION}"$'\n'"${CREATE_TEMP_CLEANUP_FUNCTION}"$'\n'
unset CREATE_TEMP_FILE_FUNCTION
unset CREATE_TEMP_DIRECTORY_FUNCTION
unset CREATE_TEMP_CLEANUP_FUNCTION
unset _TEMPORARY_DIRECTORY

#===============================================================
# >>> Logging
#===============================================================

# determine the color mode expect if the user has set VALET_NO_COLOR
case "$TERM" in
    xterm-color|xterm-256color|linux) VALET_NO_COLOR="${VALET_NO_COLOR:-false}";;
    xterm) [ -n "$COLORTERM" ] && VALET_NO_COLOR="${VALET_NO_COLOR:-false}";;
    *) VALET_NO_COLOR="${VALET_NO_COLOR:-true}";;
esac

# the color code used to output colored text
if [[ ${VALET_CI_MODE:-} != true && ${VALET_NO_COLOR:-} != true ]]; then
  COLOR_DEFAULT=$'\033'"[0m"
  COLOR_RED=$'\033'"[0;31m"
  COLOR_GREEN=$'\033'"[32m"
  COLOR_YELLOW=$'\033'"[33m"
  COLOR_CYAN=$'\033'"[0;36m"
  COLOR_GRAY=$'\033'"[1;30m"
  COLOR_PINK=$'\033'"[1;35m"
else
  COLOR_DEFAULT=""
  COLOR_RED=""
  COLOR_GREEN=""
  COLOR_YELLOW=""
  COLOR_CYAN=""
  COLOR_GRAY=""
  COLOR_PINK=""
fi

if [ "${VALET_NO_WRAP:-}" != "true" ]; then
  # this is the only subshell we need; can't be avoided
  _COLUMNS="${_COLUMNS:-$(tput cols 2>/dev/null || echo 120)}"
else
  _COLUMNS="${_COLUMNS:-120}"
fi

# Set the log level.
# The log level can be set to one of the following values:
# - debug
# - info
# - warn
# - fail
# - success
# The log level can be set using the environment variable LOG_LEVEL.
# $1: the log level to set
#
# Usage:
#  setLogLevelInt "debug"
function setLogLevelInt() {
  # log level, defaults to info
  LOG_LEVEL="${1:-${LOG_LEVEL:-info}}"
  case "${LOG_LEVEL}" in
  fail) LOG_LEVEL_INT=4 ;;
  warn) LOG_LEVEL_INT=3 ;;
  success) LOG_LEVEL_INT=2 ;;
  debug) LOG_LEVEL_INT=0 ;;
  *) LOG_LEVEL_INT=1 ;;
  esac

  if [ "${LOG_LEVEL_INT}" != 1 ]; then
    debug "Log level set to ${LOG_LEVEL}"
  fi
}

# The log line function is used to display log messages in the terminal.
# The implementation depends on the environment variables VALET_CI_MODE and VALET_NO_WRAP.
# $1: the color of the log message (red, green, yellow, cyan, gray, pink)
# $2: the icon to display in the log message (utf8 character from nerdicons)
# $3: the severity of the log message
# $*: the content of the log message
#
# Usage:
#  logLine "GREEN" $'\uf14a' "SUCCESS" "This is a success message."
# shellcheck disable=SC2317
function logLine() { return 0; }
# We build the log line function dynamically to adapt to the user options
# This avoid to have to check the options at each log message
# shellcheck disable=SC2016
function createLogLineFunction() {
  # in CI mode, we disable wrapping, colors and icons
  if [ "${VALET_CI_MODE:-}" = "true" ]; then
    VALET_NO_WRAP="${VALET_NO_WRAP:-true}"
    VALET_NO_ICON="${VALET_NO_ICON:-true}"
    VALET_NO_COLOR="${VALET_NO_COLOR:-true}"
  fi

  LOG_LINE_FUNCTION='
  function logLine() {
    local icon severity
    local -n color="COLOR_${1^^}"
    icon="${2}"
    severity="${3}"
    shift 3
    LAST_RETURNED_VALUE="$*"'
  if [ "${VALET_NO_COLOR:-}" != "true" ]; then
    # shellcheck disable=SC2016
    LOG_LINE_FUNCTION+='
    LAST_RETURNED_VALUE="${LAST_RETURNED_VALUE//⌜/${COLOR_PINK}⌜}"
    LAST_RETURNED_VALUE="${LAST_RETURNED_VALUE//⌝/⌝${COLOR_DEFAULT}}"'
  fi

  if [ "${VALET_NO_WRAP:-}" != "true" ]; then
    local wrapTextColumns="${VALET_LOG_COLUMNS:-${_COLUMNS:-120}}"
    local wrapPaddingLength=20

    LOG_LINE_FUNCTION+='
    wrapText "${LAST_RETURNED_VALUE}" '"${wrapTextColumns}"' '"${wrapPaddingLength}"''
  fi

  local printfFormat
  local printfArguments

  # timestamp
  if [ "${VALET_CI_MODE:-}" = "true" ]; then
    printfFormat+="%(%F_%H:%M:%S)T "
    printfArguments+='"${EPOCHSECONDS}" '
  elif [ "${VALET_NO_TIMESTAMP:-}" = "true" ]; then
    printfFormat+=""
  else
    printfFormat+="%s%(%H:%M:%S)T "
    printfArguments+='"${COLOR_GRAY}" "${EPOCHSECONDS}" '
  fi

  # severity
  if [ "${VALET_NO_ICON:-}" = "true" ]; then
    printfFormat+="%s%-8s%s "
    printfArguments+='"${color}" "${severity}" "${COLOR_DEFAULT}" '
  else
    printfFormat+="%s%-8s%-4s%s "
    printfArguments+='"${color}" "${severity}" "${icon:-}" "${COLOR_DEFAULT}" '
  fi

  # message
  printfFormat+="%s\n"
  printfArguments+='"${LAST_RETURNED_VALUE}"'

  LOG_LINE_FUNCTION+='
    printf "'"${printfFormat}"'" '"${printfArguments}"' 1>&2
  }'
}
createLogLineFunction
eval "${LOG_LINE_FUNCTION}"
unset LOG_LINE_FUNCTION
unset createLogLineFunction


# Displays an error message and then exit the program with error.
# $*: the error message to display
#
# Usage:
#  fail "This is an error message."
function fail() {
  logLine "RED" $'\uf2d3' "ERROR" "$*"
  # shellcheck disable=SC2034
  ERROR_DISPLAY=1
  exit 1
}

# Displays a warning and return a warning code.
# $*: the warning message to display
#
# Usage:
#  warn "This is a warning message."
function warn() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 3 ]]; then
    return 0
  fi
  logLine "YELLOW" $'\uf071' "WARNING" "$*"
  return 0
}

# Displays a success message.
# $*: the success message to display
#
# Usage:
#  succeed "This is a success message."
function succeed() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 2 ]]; then
    return 0
  fi
  logLine "GREEN" $'\uf14a' "SUCCESS" "$*"
  return 0
}

# Displays an info message.
# $*: the info message to display
#
# Usage:
#  inform "This is an info message."
function inform() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 1 ]]; then
    return 0
  fi
  logLine "CYAN" $'\uf05a' "INFO" "$*"
  return 0
}

# Displays a debug message if the global variable DEBUG is set to true.
# $*: the debug message to display
#
# Usage:
#  debug "This is a debug message."
function debug() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 0 ]]; then
    return 0
  fi
  logLine "GRAY" $'\uf0ae' "DEBUG" "$*"
  return 0
}

# Returns 0 if debug mode is active, 1 otherwise.
#
# Usage:
#  isDebugMode && echo "Debug mode is active."
function isDebugMode() {
  if [[ ${LOG_LEVEL_INT:-1} -eq 0 ]]; then
    return 0
  fi
  return 1
}

# Check last return code and fail (exit) if it is an error
# $1: the return code
# $2+ : the error message to display in case of error
#
# Usage:
#   command_that_could_fail || checkAndFail "$?" "The command that could fail has failed!"
function checkAndFail() {
  if [ "${1:-1}" != "0" ]; then
    shift
    fail "$*"
  fi
  return 0
}

# Check last return code and return an error code if error
# $1: the last return code
# $2+ : the warning message to display in case of error
#
# Usage:
#   command_that_could_fail || checkAndWarn "$?" "The command that could fail has failed!" || return "0"
function checkAndWarn() {
  if [ "${1:-}" != "0" ]; then
    shift
    warn "$*"
    return 1
  fi
  return 0
}

#===============================================================
# >>> Core utilities
#===============================================================

# Allows to soft wrap the given text at the given width.
# Optionally applies left padding to each new line.
# $1: the text to wrap
# $2: the width to wrap the text at
# $3: the padding to apply to each new line (default to 0)
# $4: true/false if the padding should be applied to the first line (default to false)
# Returns the wrapped text in the global variable LAST_RETURNED_VALUE
#
# Usage:
#  wrapText "This is a long text that should be wrapped at 20 characters." 20 2 false && local wrappedText="${LAST_RETURNED_VALUE}"
#
# Note:
#  This function is written in pure bash and is faster than the fold command.
function wrapText() {
  local text width leftPaddingLength appendPaddingToFirstLine
  text="${1}"
  width="${2}"
  leftPaddingLength="${3:-0}"
  appendPaddingToFirstLine="${4:-false}"

  # compute padding in number of spaces
  local leftPadding
  leftPadding=""
  for ((i = 0; i < leftPaddingLength; i++)); do
    leftPadding+=" "
  done

  local sentenceWidth=$((width - leftPaddingLength))

  local wrappedText

  # we call wrapSentence for each line of the text
  local firstLine="1"
  local line
  local IFS=$'\n'
  for line in ${text}; do
    wrappedText+=$'\n'
    wrapSentence "${line}" "${sentenceWidth}" "${leftPadding}"
    if [ "${firstLine}" = "1" ]; then
      firstLine="0"
    else
      wrappedText+="${leftPadding}"
    fi
    wrappedText+="${LAST_RETURNED_VALUE}"
  done

  # add left padding on the first line (or not)
  if [ "${appendPaddingToFirstLine}" = "true" ]; then
    LAST_RETURNED_VALUE="${leftPadding}${wrappedText#$'\n'}"
  else
    LAST_RETURNED_VALUE="${wrappedText#$'\n'}"
  fi
}

# Allows to soft wrap the given sentence (without new lines) at the given width.
# Optionally applies a prefix on each new line.
# $1: the text to wrap
# $2: the width to wrap the text at
# $3: the prefix to apply to each new line (default to "")
# Returns the wrapped text in the global variable LAST_RETURNED_VALUE
#
# Usage:
#  wrapSentence "This is a long text that should be wrapped at 20 characters." 20 && local wrappedText="${LAST_RETURNED_VALUE}"
#
# Note:
#  This function is written in pure bash and is faster than the fold command.
function wrapSentence() {
  local text width newLinePrefix
  text="${1}"
  width="${2}"
  newLinePrefix="${3:-}"

  # short cut in case the text is already shorter than the width
  if [ "${#text}" -le "${width}" ]; then
    LAST_RETURNED_VALUE="${text}"
    return 0
  fi

  # new line to append
  local newLine
  newLine=$'\n'"${newLinePrefix}"

  local wrappedText word spaceLeft wordLength partialWordLength
  wrappedText=""
  spaceLeft="${width}"
  local firstWord="1"
  for word in ${text}; do

    if [ "${firstWord}" = "1" ]; then
      firstWord="0"
    else
      # we just added a word
      if [ "${spaceLeft}" -gt 0 ]; then
        # if we have space left, we add a space
        wrappedText+=" "
        spaceLeft=$((spaceLeft - 1))
      else
        # otherwise we add a new line
        wrappedText+="${newLine}"
        spaceLeft="${width}"
      fi
    fi

    wordLength="${#word}"

    if [ "${wordLength}" -le "${spaceLeft}" ]; then
      # we have the space to add the word
      wrappedText+="${word}"
      spaceLeft=$((spaceLeft - wordLength))
    else
      # we don't have the space to add the word

      # will the word fit in the width of the next line?
      if [[ "${wordLength}" -le "${width}" ]]; then
        # then we add the word to the next line
        wrappedText+="${newLine}${word}"
        spaceLeft=$((width - wordLength))
      else
        # the word doesn't fit in the width of the next line
        # we can add the partial word to the current line
        # and the rest on the next lines until we have the full word
        while [ "${wordLength}" -gt 0 ]; do
          partialWordLength="${wordLength}"
          if [ "${partialWordLength}" -gt "${spaceLeft}" ]; then
            partialWordLength="${spaceLeft}"
          fi
          wrappedText+="${word:0:${partialWordLength}}"
          word="${word:${partialWordLength}}"
          wordLength=$((wordLength - partialWordLength))
          spaceLeft=$((spaceLeft - partialWordLength))
          if [[ "${spaceLeft}" -eq 0 && "${wordLength}" -gt 0 ]]; then
            wrappedText+="${newLine}"
            spaceLeft="${width}"
          fi
        done
      fi
    fi
  done

  LAST_RETURNED_VALUE="${wrappedText}"
}

# Allows to get the nth element of a string separated by a given separator.
# This is the equivalent of the cut command "cut -d"${separator}" -f"${fieldNumber}""
# but it uses pure bash to go faster.
# $1: the string to cut
# $2: the field number to get (starting at 1)
# $3: the separator (default to tab if not provided)
#
# Usage:
#  cutF "field1 field2 field3" 2 " " && local field2="${LAST_RETURNED_VALUE}"
function cutF() {
  local str fieldNumber separator
  str="${1}"
  fieldNumber="${2}"
  separator="${3:-$'\t'}"

  local index

  # remove the first field n - 1 times
  for((index=0; index < (fieldNumber - 1); index++)); do
    str="${str#*"${separator}"}"
  done

  # remove everything after the first field
  str="${str%%"${separator}"*}"

  LAST_RETURNED_VALUE="${str}"
}

# Allows to fuzzy match a line against a given pattern.
# Returns the best match from all lines.
# Or an empty string if no match is found.
# $1: the pattern to match
# $2: the text (multiple lines) to match against
#
# Usage:
#   fuzzyMatch "pattern" "line1\nline2\nline3" && local bestMatch="${LAST_RETURNED_VALUE}"
#
# Note:
#   This function is written in pure bash and is faster than the fzf command.
#   All characters in the pattern must be found in the same order in the matched line.
#   The function is case sensitive.
#   We prioritize the lines that start with the pattern.
#   Then we prioritize the lines that have the less distance between characters in the pattern.
function fuzzyMatch() {
  local pattern text
  pattern="${1}"
  text="${2}"

  local bestMatch bestIndex bestDistance patternLength lineLength
  patternLength="${#pattern}"
  bestIndex=999999
  bestDistance=999999

  local IFS=$'\n'
  local line patternCharIndex patternChar lineCharIndex lineChar lastLineCharIndex distance patternFirstCharIndex
  for line in ${text}; do
    # shortcut, exact match
    if [[ "${line}" == "${pattern}" ]]; then
      LAST_RETURNED_VALUE="${line}"
      return 0
    fi
    lineLength="${#line}"

    # for each character in the pattern
    patternCharIndex=0
    lineCharIndex=0
    lastLineCharIndex=0
    while [ "${patternCharIndex}" -lt "${patternLength}" ]; do
      patternChar="${pattern:${patternCharIndex}:1}"

      # find the character in the line
      while [ "${lineCharIndex}" -lt "${lineLength}" ]; do
        lineChar="${line:${lineCharIndex}:1}"

        if [[ "${lineChar}" == "${patternChar}" ]]; then
          # if we find the character, mark the distance
          distance=$((lineCharIndex - lastLineCharIndex))
          lastLineCharIndex=${lineCharIndex}

          # if it is the first char of the pattern, remmember the index
          if [ "${patternCharIndex}" -eq 0 ]; then
            patternFirstCharIndex=${lineCharIndex}
          fi

          # loop on the next pattern character
          break;
        fi

        lineCharIndex=$((lineCharIndex + 1))
      done

      # if we don't find the character in the line, the line is not a match
      if [ "${lineCharIndex}" -ge "${lineLength}" ]; then
        break;
      else
        lineCharIndex=$((lineCharIndex + 1))
      fi

      patternCharIndex=$((patternCharIndex + 1))
    done

    # if we found all the characters in the pattern
    if [ "${patternCharIndex}" -ge "${patternLength}" ]; then

      # we found the pattern at a lower index or we found the pattern at the same index but with less distance
      if [[ "${patternFirstCharIndex}" -lt "${bestIndex}" || ("${patternFirstCharIndex}" -eq "${bestIndex}" && "${distance}" -lt "${bestDistance}") ]]; then
        bestIndex="${patternFirstCharIndex}"
        bestDistance="${distance}"
        bestMatch="${line}"
      fi
    fi

  done

  LAST_RETURNED_VALUE="${bestMatch:-}"
}


#===============================================================
# >>> Valet files and directories
#===============================================================

# Returns the path to the valet configuration directory.
#
# Usage:
#  getConfigurationDirectory && local directory="${LAST_RETURNED_VALUE}"
function getConfigurationDirectory() {
  local directory
  directory="${XDG_CONFIG_HOME:-$HOME/.config}/valet"
  if [ ! -d "${directory}" ]; then
    mkdir -p "${directory}"
  fi
  LAST_RETURNED_VALUE="${directory}"
}

# Returns the path to the valet state directory.
#
# Usage:
#  getConfigurationDirectory && local directory="${LAST_RETURNED_VALUE}"
function getLocalStateDirectory() {
  local directory
  directory="${XDG_CONFIG_HOME:-$HOME/.local/state}/valet"
  if [ ! -d "${directory}" ]; then
    mkdir -p "${directory}"
  fi
  LAST_RETURNED_VALUE="${directory}"
}

#===============================================================
# >>> Parser and interactive mode
#===============================================================

# Show the help for the current function.
# This should be called from a command function for which you want to display the help text.
#
# Usage:
#  showHelp
function showHelp() {
  local functionName
  # get the function name of the calling function
  functionName="${FUNCNAME[1]}"

  showFunctionHelp "${functionName}"
}

# Show an interactive menu for a command that has sub menus.
# This should be called from a command function for which you want to display the sub menu.
#
# Usage:
#  showSubMenu
function showSubMenu() {
  local menuFunctionName
  # get the function name of the calling function
  menuFunctionName="${FUNCNAME[1]}"

  local parsedArguments
  parseFunctionArguments "this" "$@" && parsedArguments="${LAST_RETURNED_VALUE}"
  debug "Parsed arguments:"$'\n'"${parsedArguments}"
  eval "${parsedArguments}"
  if [ -n "${help:-}" ]; then
    showFunctionHelp "${menuFunctionName}"
    return 0
  fi

  # filter the commands to only keep the sub commands of the function
  local filteredCommandsMenuBody line
  local -n menuCommandName="CMD_COMMAND_${menuFunctionName}"
  filteredCommandsMenuBody=""
  local IFS=$'\n'
  for line in ${CMD_COMMANDS_MENU_BODY}; do
    if [[ "${line}" =~ ^(${menuCommandName} [^ ]+ ) ]]; then
      filteredCommandsMenuBody+="${line}"$'\n'
    fi
  done
  showCommandsMenuAndRun "${filteredCommandsMenuBody%$'\n'}"
}

# Parse the arguments and options of a function and return a string that can be evaluated to set the variables.
# This should be called from a command function for which you want to parse the arguments.
#
# Usage:
#  parseArguments "$@" && eval "${LAST_RETURNED_VALUE}"
#
# Notes:
# - It will return a string that can be evaluated to set the variables
#   corresponding to the arguments and options; e.g.:
#     local arg1 option1
#     arg1="xxx"
#     option1="xxx"
#     ...
# - It will also set the variable parsingErrors if there are any errors.
# - Variable name for an option is taken from the first --long version of the option.
# - If the function expects arguments or options but none are provided, it will
#   automatically go into interactive mode and ask the user inputs.
# - It will set the variable as an array if the (last) argument name ends with '...'
function parseArguments() {
  local functionName
  # get the function name of the calling function
  functionName="${FUNCNAME[1]}"

  parseFunctionArgumentsOrGoInteractive "${functionName}" "$@"
}

# A convenience function to check the parsing results and display an error message if needed.
# Will also display the help if the help option is true.
# This should be called from a command function for which you want to check the parsing results.
#
# Usage:
#  checkParseResults "${help:-}" "${parsingErrors:-}"
function checkParseResults() {
  local functionName help parsingErrors
  functionName="${FUNCNAME[1]}"

  help="${1:-}"
  parsingErrors="${2:-}"

  if [ -n "${help}" ]; then
    showFunctionHelp "${functionName}"
    exit 0
  fi

  if [ -n "${parsingErrors:-}" ]; then
    local -n commandName="CMD_COMMAND_${functionName}"
    fail "${parsingErrors}"$'\n'"Use valet ${commandName} --help to get help."
  fi
}
