#!/usr/bin/env bash
# Title:          valet.d/core
# Description:    this script contains the core functions and variables and it
#                 should be sourced, not called directly
# Author:         github.com/jcaillon

# we check for this variable to know if this script has already been included
_CORE_INCLUDED=1

if [ -z "${_MAIN_INCLUDED:-}" ]; then
  # shellcheck source=cmd
  VALETD_PATH="${BASH_SOURCE[0]}"
  VALETD_PATH="${VALETD_PATH%/*}" # strip file name
  source "${VALETD_PATH}/main"
fi

#===============================================================
# >>> Temporay files and folders
#===============================================================

# get unique file names for the stdout, stderr and temporary directory
# to be fast, we do not create anything until we really need it
# this could lead to issues, altough it is very unlikely
_TEMPORARY_PREFIX="${TMPDIR:-/tmp}/temp-"
_TEMPORARY_STDOUT_FILE="${_TEMPORARY_PREFIX}${BASHPID}.valet-stdout"
while [ -e "${_TEMPORARY_STDOUT_FILE}" ]; do _TEMPORARY_STDOUT_FILE+="x"; done
_TEMPORARY_STDERR_FILE="${_TEMPORARY_PREFIX}${BASHPID}.valet-stderr"
while [ -e "${_TEMPORARY_STDERR_FILE}" ]; do _TEMPORARY_STDERR_FILE+="x"; done
_TEMPORARY_DIRECTORY="${_TEMPORARY_PREFIX}${BASHPID}.valet.d"
while [[ -e "${_TEMPORARY_DIRECTORY}" ]]; do _TEMPORARY_DIRECTORY+="x"; done

# Creates a temporary file and return its path in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  createTempFile && local file="${LAST_RETURNED_VALUE}"
function createTempFile() {
  if [ ! -d "${_TEMPORARY_DIRECTORY}" ]; then
    mkdir -p "${_TEMPORARY_DIRECTORY}" 1>&2 2>/dev/null
  fi
  TEMPORARY_FILE_NUMBER=${TEMPORARY_FILE_NUMBER:-0}
  while true; do
    TEMPORARY_FILE_NUMBER=$((TEMPORARY_FILE_NUMBER + 1))
    LAST_RETURNED_VALUE="${_TEMPORARY_DIRECTORY}/f${TEMPORARY_FILE_NUMBER}-${BASH_SUBSHELL}"
    if [ ! -e "${LAST_RETURNED_VALUE}" ]; then
      touch "${LAST_RETURNED_VALUE}" 1>&2 2>/dev/null
      return 0
    fi
  done
}

# Creates a temporary directory and return its path in the global variable LAST_RETURNED_VALUE.
#
# Usage:
#  createTempDirectory && local directory="${LAST_RETURNED_VALUE}"
function createTempDirectory() {
  if [ ! -d "${_TEMPORARY_DIRECTORY}" ]; then
    mkdir -p "${_TEMPORARY_DIRECTORY}" 1>&2 2>/dev/null
  fi
  TEMPORARY_DIRECTORY_NUMBER=${TEMPORARY_DIRECTORY_NUMBER:-0}
  while true; do
    TEMPORARY_DIRECTORY_NUMBER=$((TEMPORARY_DIRECTORY_NUMBER + 1))
    LAST_RETURNED_VALUE="${_TEMPORARY_DIRECTORY}/d${TEMPORARY_DIRECTORY_NUMBER}-${BASH_SUBSHELL}"
    if [ ! -d "${LAST_RETURNED_VALUE}" ]; then
      mkdir -p "${LAST_RETURNED_VALUE}" 1>&2 2>/dev/null
      return 0
    fi
  done
}

# Removes all the tempoary files that were created.
# shellcheck disable=SC2016
function cleanupTempFiles() {
  if [ -e "${_TEMPORARY_DIRECTORY}" ]; then
    debug "Deleting temporary directory."
    rm -Rf "${_TEMPORARY_DIRECTORY}" 1>&2 2>/dev/null
  fi
  if [ -e "${_TEMPORARY_STDOUT_FILE}" ]; then
    rm -f "${_TEMPORARY_STDOUT_FILE}" 1>&2 2>/dev/null
  fi
  if [ -e "${_TEMPORARY_STDERR_FILE}" ]; then
    rm -f "${_TEMPORARY_STDERR_FILE}" 1>&2 2>/dev/null
  fi
}

#===============================================================
# >>> Logging
#===============================================================

# determine the color mode expect if the user has set VALET_NO_COLOR
case "$TERM" in
    xterm-color|xterm-256color|linux) VALET_NO_COLOR="${VALET_NO_COLOR:-false}";;
    xterm) [ -n "$COLORTERM" ] && VALET_NO_COLOR="${VALET_NO_COLOR:-false}";;
    *) VALET_NO_COLOR="${VALET_NO_COLOR:-true}";;
esac

# This function sets the colors used in the log messages.
function setLogColors() {
  # the color code used to output colored text
  # shellcheck disable=SC2034
  if [[ ${VALET_CI_MODE:-} != true && ${VALET_NO_COLOR:-} != true ]]; then
    COLOR_DEFAULT=${VALET_COLOR_DEFAULT:-$'\033'"[0m"}
    COLOR_DEBUG=${VALET_COLOR_DEBUG:-$'\033'"[1;30m"}
    COLOR_INFO=${VALET_COLOR_INFO:-$'\033'"[0;36m"}
    COLOR_WARNING=${VALET_COLOR_WARNING:-$'\033'"[0;33m"}
    COLOR_SUCCESS=${VALET_COLOR_SUCCESS:-$'\033'"[0;32m"}
    COLOR_ERROR=${VALET_COLOR_ERROR:-$'\033'"[0;31m"}
    COLOR_TIMESTAMP=${VALET_COLOR_TIMESTAMP:-$'\033'"[1;30m"}
    COLOR_HIGHLIGHT=${VALET_COLOR_HIGHLIGHT:-$'\033'"[1;35m"}
  else
    COLOR_DEFAULT=""
    COLOR_DEBUG=""
    COLOR_INFO=""
    COLOR_WARNING=""
    COLOR_SUCCESS=""
    COLOR_ERROR=""
    COLOR_TIMESTAMP=""
    COLOR_HIGHLIGHT=""
  fi
}
setLogColors

if [ "${VALET_NO_WRAP:-}" != "true" ]; then
  # this is the only subshell we need; can't be avoided
  _COLUMNS="${_COLUMNS:-$(tput cols 2>/dev/null || echo 120)}"
else
  _COLUMNS="${_COLUMNS:-120}"
fi

# Set the log level.
# The log level can be set to one of the following values:
# - debug
# - info
# - warn
# - fail
# - success
# The log level can be set using the environment variable LOG_LEVEL.
# $1: the log level to set
#
# Usage:
#  setLogLevelInt "debug"
function setLogLevelInt() {
  # log level, defaults to info
  LOG_LEVEL="${1:-${LOG_LEVEL:-info}}"
  case "${LOG_LEVEL}" in
  fail) LOG_LEVEL_INT=4 ;;
  warn) LOG_LEVEL_INT=3 ;;
  success) LOG_LEVEL_INT=2 ;;
  debug) LOG_LEVEL_INT=0 ;;
  *) LOG_LEVEL_INT=1 ;;
  esac

  if [ "${LOG_LEVEL_INT}" != 1 ]; then
    debug "Log level set to ${LOG_LEVEL}."
  fi
}

# The log line function is used to display log messages in the terminal.
# The implementation depends on the environment variables VALET_CI_MODE and VALET_NO_WRAP.
# $1: the color of the log message (red, green, yellow, cyan, gray, pink)
# $2: the icon to display in the log message (utf8 character from nerdicons)
# $3: the severity of the log message
# $*: the content of the log message
#
# Usage:
#  logLine "GREEN" $'\uf14a' "SUCCESS" "This is a success message."
# shellcheck disable=SC2317
function logLine() { return 0; }
# We build the log line function dynamically to adapt to the user options
# This avoid to have to check the options at each log message
# shellcheck disable=SC2016
function createLogLineFunction() {
  # in CI mode, we disable wrapping, colors and icons
  if [ "${VALET_CI_MODE:-}" = "true" ]; then
    VALET_NO_WRAP="${VALET_NO_WRAP:-true}"
    VALET_NO_ICON="${VALET_NO_ICON:-true}"
    VALET_NO_COLOR="${VALET_NO_COLOR:-true}"
  fi

  LOG_LINE_FUNCTION='
  function logLine() {
    local icon severity
    local -n color="COLOR_${1^^}"
    icon="${2}"
    severity="${3}"
    shift 3
    LAST_RETURNED_VALUE="$*"'
  if [ "${VALET_NO_COLOR:-}" != "true" ]; then
    # shellcheck disable=SC2016
    LOG_LINE_FUNCTION+='
    LAST_RETURNED_VALUE="${LAST_RETURNED_VALUE//⌜/${COLOR_HIGHLIGHT}⌜}"
    LAST_RETURNED_VALUE="${LAST_RETURNED_VALUE//⌝/⌝${COLOR_DEFAULT}}"'
  fi

  if [ "${VALET_NO_WRAP:-}" != "true" ]; then
    local wrapTextColumns="${VALET_LOG_COLUMNS:-${_COLUMNS:-120}}"
    local wrapPaddingLength=20

    if [ "${VALET_NO_TIMESTAMP:-}" = "true" ]; then
      wrapPaddingLength=$((wrapPaddingLength - 9))
    fi

    if [ "${VALET_NO_ICON:-}" = "true" ]; then
      wrapPaddingLength=$((wrapPaddingLength - 2))
    fi

    LOG_LINE_FUNCTION+='
    wrapText "${LAST_RETURNED_VALUE}" '"${wrapTextColumns}"' '"${wrapPaddingLength}"''
  fi

  local printfFormat
  local printfArguments

  # timestamp
  if [ "${VALET_CI_MODE:-}" = "true" ]; then
    printfFormat+="%(%F_%H:%M:%S)T "
    printfArguments+='"${EPOCHSECONDS}" '
  elif [ "${VALET_NO_TIMESTAMP:-}" = "true" ]; then
    printfFormat+=""
  else
    printfFormat+="%s%(%H:%M:%S)T "
    printfArguments+='"${COLOR_TIMESTAMP}" "${EPOCHSECONDS}" '
  fi

  # severity
  if [ "${VALET_NO_ICON:-}" = "true" ]; then
    printfFormat+="%s%-8s%s "
    printfArguments+='"${color}" "${severity}" "${COLOR_DEFAULT}" '
  else
    printfFormat+="%s%-8s%-4s%s "
    printfArguments+='"${color}" "${severity}" "${icon:-}" "${COLOR_DEFAULT}" '
  fi

  # message
  printfFormat+="%s\n"
  printfArguments+='"${LAST_RETURNED_VALUE}"'

  LOG_LINE_FUNCTION+='
    printf "'"${printfFormat}"'" '"${printfArguments}"' 1>&2
  }'
}
createLogLineFunction
eval "${LOG_LINE_FUNCTION}"


# Displays an error message and then exit the program with error.
# $*: the error message to display
#
# Usage:
#  fail "This is an error message."
function fail() {
  logLine "ERROR" $'\uf2d3' "ERROR" "$*"
  # shellcheck disable=SC2034
  ERROR_DISPLAY=1
  exit 1
}

# Displays a warning and return a warning code.
# $*: the warning message to display
#
# Usage:
#  warn "This is a warning message."
function warn() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 3 ]]; then
    return 0
  fi
  logLine "WARNING" $'\uf071' "WARNING" "$*"
  return 0
}

# Displays a success message.
# $*: the success message to display
#
# Usage:
#  succeed "This is a success message."
function succeed() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 2 ]]; then
    return 0
  fi
  logLine "SUCCESS" $'\uf14a' "SUCCESS" "$*"
  return 0
}

# Displays an info message.
# $*: the info message to display
#
# Usage:
#  inform "This is an info message."
function inform() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 1 ]]; then
    return 0
  fi
  logLine "INFO" $'\uf05a' "INFO" "$*"
  return 0
}

# Displays a debug message if the global variable DEBUG is set to true.
# $*: the debug message to display
#
# Usage:
#  debug "This is a debug message."
function debug() {
  if [[ ${LOG_LEVEL_INT:-1} -gt 0 ]]; then
    return 0
  fi
  logLine "DEBUG" $'\uf0ae' "DEBUG" "$*"
  return 0
}

# Returns 0 if debug mode is active, 1 otherwise.
#
# Usage:
#  isDebugMode && echo "Debug mode is active."
function isDebugMode() {
  if [[ ${LOG_LEVEL_INT:-1} -eq 0 ]]; then
    return 0
  fi
  return 1
}

# Check last return code and fail (exit) if it is an error
# $1: the return code
# $2+ : the error message to display in case of error
#
# Usage:
#   command_that_could_fail || checkAndFail "$?" "The command that could fail has failed!"
function checkAndFail() {
  if [ "${1:-1}" != "0" ]; then
    shift
    fail "$*"
  fi
  return 0
}

# Check last return code and return an error code if error
# $1: the last return code
# $2+ : the warning message to display in case of error
#
# Usage:
#   command_that_could_fail || checkAndWarn "$?" "The command that could fail has failed!" || return "0"
function checkAndWarn() {
  if [ "${1:-}" != "0" ]; then
    shift
    warn "$*"
    return 1
  fi
  return 0
}


#===============================================================
# >>> Core utilities
#===============================================================

# Allows to soft wrap the given text at the given width.
# Optionally applies left padding to each new line.
# $1: the text to wrap
# $2: the width to wrap the text at
# $3: the padding to apply to each new line (default to 0)
# $4: true/false if the padding should be applied to the first line (default to false)
# Returns the wrapped text in the global variable LAST_RETURNED_VALUE
#
# Usage:
#  wrapText "This is a long text that should be wrapped at 20 characters." 20 2 false && local wrappedText="${LAST_RETURNED_VALUE}"
#
# Note:
#  This function is written in pure bash and is faster than the fold command.
function wrapText() {
  local text width leftPaddingLength appendPaddingToFirstLine
  text="${1}"
  width="${2}"
  leftPaddingLength="${3:-0}"
  appendPaddingToFirstLine="${4:-false}"

  # compute padding in number of spaces
  local leftPadding
  leftPadding=""
  for ((i = 0; i < leftPaddingLength; i++)); do
    leftPadding+=" "
  done

  local sentenceWidth=$((width - leftPaddingLength))

  local wrappedText

  # we call wrapSentence for each line of the text
  local firstLine="1"
  local line
  while read -r line; do
    wrappedText+=$'\n'
    wrapSentence "${line}" "${sentenceWidth}" "${leftPadding}"
    if [ "${firstLine}" = "1" ]; then
      firstLine="0"
    else
      wrappedText+="${leftPadding}"
    fi
    wrappedText+="${LAST_RETURNED_VALUE}"
  done <<< "${text}"

  # add left padding on the first line (or not)
  if [ "${appendPaddingToFirstLine}" = "true" ]; then
    LAST_RETURNED_VALUE="${leftPadding}${wrappedText#$'\n'}"
  else
    LAST_RETURNED_VALUE="${wrappedText#$'\n'}"
  fi
}

# Allows to soft wrap the given sentence (without new lines) at the given width.
# Optionally applies a prefix on each new line.
# $1: the text to wrap
# $2: the width to wrap the text at
# $3: the prefix to apply to each new line (default to "")
# Returns the wrapped text in the global variable LAST_RETURNED_VALUE
#
# Usage:
#  wrapSentence "This is a long text that should be wrapped at 20 characters." 20 && local wrappedText="${LAST_RETURNED_VALUE}"
#
# Note:
#  This function is written in pure bash and is faster than the fold command.
function wrapSentence() {
  local text newLinePrefix
  local -i width
  text="${1}"
  width="${2}"
  newLinePrefix="${3:-}"

  # short cut in case the text is already shorter than the width
  if [[ "${#text}" -le width ]]; then
    LAST_RETURNED_VALUE="${text}"
    return 0
  fi

  # new line to append
  local newLine
  newLine=$'\n'"${newLinePrefix}"

  local wrappedText word
  local -i spaceLeft wordLength partialWordLength
  wrappedText=""
  spaceLeft=${width}
  local firstWord="1"
  for word in ${text}; do

    if [ "${firstWord}" = "1" ]; then
      firstWord="0"
    else
      # we just added a word
      if [[ spaceLeft -gt 0 ]]; then
        # if we have space left, we add a space
        wrappedText+=" "
        spaceLeft=$((spaceLeft - 1))
      else
        # otherwise we add a new line
        wrappedText+="${newLine}"
        spaceLeft=${width}
      fi
    fi

    wordLength=${#word}

    if [[ wordLength -le spaceLeft ]]; then
      # we have the space to add the word
      wrappedText+="${word}"
      spaceLeft=$((spaceLeft - wordLength))
    else
      # we don't have the space to add the word

      # will the word fit in the width of the next line?
      if [[ wordLength -le width ]]; then
        # then we add the word to the next line
        wrappedText+="${newLine}${word}"
        spaceLeft=$((width - wordLength))
      else
        # the word doesn't fit in the width of the next line
        # we can add the partial word to the current line
        # and the rest on the next lines until we have the full word
        while [[ wordLength -gt 0 ]]; do
          partialWordLength="${wordLength}"
          if [[ partialWordLength -gt spaceLeft ]]; then
            partialWordLength="${spaceLeft}"
          fi
          wrappedText+="${word:0:${partialWordLength}}"
          word="${word:${partialWordLength}}"
          wordLength=$((wordLength - partialWordLength))
          spaceLeft=$((spaceLeft - partialWordLength))
          if [[ spaceLeft -eq 0 && wordLength -gt 0 ]]; then
            wrappedText+="${newLine}"
            spaceLeft="${width}"
          fi
        done
      fi
    fi
  done

  LAST_RETURNED_VALUE="${wrappedText}"
}

# Allows to get the nth element of a string separated by a given separator.
# This is the equivalent of the cut command "cut -d"${separator}" -f"${fieldNumber}""
# but it uses pure bash to go faster.
# $1: the string to cut
# $2: the field number to get (starting at 1)
# $3: the separator (default to tab if not provided)
#
# Usage:
#  cutF "field1 field2 field3" 2 " " && local field2="${LAST_RETURNED_VALUE}"
#
# Notes:
#  To be fast, it does not check the number of fields in the string.
#  If the field number is higher than the number of fields, it will return the last field, not an empty string.
function cutF() {
  local str fieldNumber separator
  str="${1}"
  fieldNumber="${2}"
  separator="${3:-$'\t'}"

  local index

  # remove the first field n - 1 times
  for((index=0; index < (fieldNumber - 1); index++)); do
    str="${str#*"${separator}"}"
  done

  # remove everything after the first field
  str="${str%%"${separator}"*}"

  LAST_RETURNED_VALUE="${str}"
}

# Allows to fuzzy match a line against a given pattern.
# Returns the best match from all lines.
# Or an empty string if no match is found.
# $1: the pattern to match
# $2: the text (multiple lines) to match against
#
# Usage:
#   fuzzyMatch "pattern" "line1\nline2\nline3" && local bestMatch="${LAST_RETURNED_VALUE}"
#
# Note:
#   This function is written in pure bash and is faster than the fzf command.
#   All characters in the pattern must be found in the same order in the matched line.
#   The function is case sensitive.
#   We prioritize the lines that start with the pattern.
#   Then we prioritize the lines that have the less distance between characters in the pattern.
function fuzzyMatch() {
  local pattern text
  pattern="${1}"
  text="${2}"

  local bestMatch
  local -i patternLength lineLength bestIndex bestDistance
  patternLength="${#pattern}"
  bestIndex=999999
  bestDistance=999999

  local IFS=$'\n'
  local line patternChar lineChar
  local -i lineCharIndex patternCharIndex lastLineCharIndex distance patternFirstCharIndex
  for line in ${text}; do
    # shortcut, exact match
    if [[ "${line}" == "${pattern}" ]]; then
      LAST_RETURNED_VALUE="${line}"
      return 0
    fi
    lineLength="${#line}"

    # for each character in the pattern
    patternCharIndex=0
    lineCharIndex=0
    lastLineCharIndex=0
    while [[ patternCharIndex -lt patternLength ]]; do
      patternChar="${pattern:${patternCharIndex}:1}"

      # find the character in the line
      while [[ lineCharIndex -lt lineLength ]]; do
        lineChar="${line:${lineCharIndex}:1}"

        if [[ "${lineChar}" == "${patternChar}" ]]; then
          # if we find the character, mark the distance
          distance=$((lineCharIndex - lastLineCharIndex))
          lastLineCharIndex=${lineCharIndex}

          # if it is the first char of the pattern, remmember the index
          if [[ patternCharIndex -eq 0 ]]; then
            patternFirstCharIndex=${lineCharIndex}
          fi

          # loop on the next pattern character
          break;
        fi

        lineCharIndex+=1
      done

      # if we don't find the character in the line, the line is not a match
      if [[ lineCharIndex -ge lineLength ]]; then
        break;
      else
        lineCharIndex+=1
      fi

      patternCharIndex+=1
    done

    # if we found all the characters in the pattern
    if [[ patternCharIndex -ge patternLength ]]; then

      # we found the pattern at a lower index or we found the pattern at the same index but with less distance
      if [[ patternFirstCharIndex -lt bestIndex || (patternFirstCharIndex -eq bestIndex && distance -lt bestDistance) ]]; then
        bestIndex="${patternFirstCharIndex}"
        bestDistance="${distance}"
        bestMatch="${line}"
      fi
    fi

  done

  LAST_RETURNED_VALUE="${bestMatch:-}"
}

# This function call an executable and its arguments.
# It redirects the stdout and stderr to temporary files.
#
# $1: true/false to indicate if the function should fail in case the execution fails
# $2: the acceptable error codes, comma separated (if the error code is matched, then set the output error code to 0)
# $3: true/false to indicate if the 4th argument represents a file path or directly the content for stdin
# $4: the stdin (can be empty)
# $5: the executable to invoke
# $6+: the arguments to pass to the executable
#
# Returns:
#  The exit code of the function is the exit code of the executable.
#  The stdout file of the executable in the global variable LAST_RETURNED_VALUE.
#  The stderr file of the executable in the global variable LAST_RETURNED_VALUE2.
#
# Usage:
#  invoke5 "false" "130,2" "false" "This is the stdin" "fzf" "--height=10" || fail "fzf failed."
#  stdoutFilePath="${LAST_RETURNED_VALUE}"
#  stderrFilePath="${LAST_RETURNED_VALUE2}"
function invoke5() {
  local failIfFails acceptableErrorCodes stdInFromFile stdIn executable
  failIfFails="${1}"
  acceptableErrorCodes="${2}"
  stdInFromFile="${3}"
  stdIn="${4}"
  executable="${5}"
  shift 5

  # reset the output files, but only if they already exist
  [[ -s "${_TEMPORARY_STDOUT_FILE}" ]] && : > "${_TEMPORARY_STDOUT_FILE}"
  [[ -s "${_TEMPORARY_STDERR_FILE}" ]] && : > "${_TEMPORARY_STDERR_FILE}"

  # if debug mode is on, print some info
  if isDebugMode; then
    local debugMessage="Executing the command ⌜${executable}⌝."$'\n'
    debugMessage+="Fail if it fails: ⌜${failIfFails}⌝"$'\n'
    debugMessage+="Acceptable error codes: ⌜${acceptableErrorCodes}⌝"$'\n'
    debugMessage+="Standard stream from file: ⌜${stdInFromFile}⌝"$'\n'
    debugMessage+="Standard stream: ⌜${stdIn}⌝"$'\n'
    debugMessage+="Extra parameters: ⌜${*}⌝"$'\n'
    debug "${debugMessage}"
  fi

  # try to find the executable in the valet bin folder,
  # in which case bash will not have to find it on the path and we go faster
  local possibleExecutablePath="${VALET_BIN_PATH:-"${VALET_HOME}/bin"}/${executable}"
  if [[ -x "${possibleExecutablePath}" ]]; then
    debug "The executable ⌜${executable}⌝ was found in ⌜${possibleExecutablePath}⌝."
    executable="${possibleExecutablePath}"
  fi

  # execute the executable
  local -i exitCode=0
  if [[ -n "${stdIn}" ]]; then
    if [[ "${stdInFromFile}" == "true" ]]; then
      "${executable}" "$@" < "${stdIn}" 1> "${_TEMPORARY_STDOUT_FILE}" 2> "${_TEMPORARY_STDERR_FILE}" || exitCode=$?
    else
      "${executable}" "$@" <<< "${stdIn}" 1> "${_TEMPORARY_STDOUT_FILE}" 2> "${_TEMPORARY_STDERR_FILE}" || exitCode=$?
    fi
  else
    "${executable}" "$@" 1> "${_TEMPORARY_STDOUT_FILE}" 2> "${_TEMPORARY_STDERR_FILE}" || exitCode=$?
  fi

  # if debug mode is on, print the command and the exit code
  if isDebugMode; then
    local debugMessage="The command ⌜${executable}⌝ ended with exit code ⌜${exitCode}⌝."
    if [[ -s "${_TEMPORARY_STDOUT_FILE}" ]]; then
      debugMessage+=$'\n'"⌜stdout⌝:"$'\n'"$(<"${_TEMPORARY_STDOUT_FILE}")"
    fi
    if [[ -s "${_TEMPORARY_STDERR_FILE}" ]]; then
      debugMessage+=$'\n'"⌜stderr⌝:"$'\n'"$(<"${_TEMPORARY_STDERR_FILE}")"
    fi
    debug "${debugMessage}"
  fi

  # if the error code is acceptable, then we set it to 0
  if [[ ",${acceptableErrorCodes}," == *",${exitCode},"* ]]; then
    exitCode=0
    debug "The error code ⌜${exitCode}⌝ is acceptable and has been reset to 0."
  fi

  # fail if needed; display all the debug information that could be useful
  if [[ "${failIfFails}" == "true" && exitCode -ne 0 ]]; then
    local message="The command ⌜${executable}⌝ failed with exit code ⌜${exitCode}⌝."
    if [[ -s "${_TEMPORARY_STDOUT_FILE}" ]]; then
      message+=$'\n'"⌜stdout⌝:"$'\n'"$(<"${_TEMPORARY_STDOUT_FILE}")"
    fi
    if [[ -s "${_TEMPORARY_STDERR_FILE}" ]]; then
      message+=$'\n'"⌜stderr⌝:"$'\n'"$(<"${_TEMPORARY_STDERR_FILE}")"
    fi
    fail "${message}"
  fi

  LAST_RETURNED_VALUE="${_TEMPORARY_STDOUT_FILE}"
  LAST_RETURNED_VALUE2="${_TEMPORARY_STDERR_FILE}"
  return ${exitCode}
}

# This function call an executable and its arguments.
# It redirects the stdout and stderr to temporary files.
#
# $1: true/false to indicate if the function should fail in case the execution fails
# $2: the acceptable error codes, comma separated (if the error code is matched, then set the output error code to 0)
# $3: the executable to invoke
# $4+: the arguments to pass to the executable
#
# Returns:
#  The exit code of the function is the exit code of the executable.
#  The stdout file of the executable in the global variable LAST_RETURNED_VALUE.
#  The stderr file of the executable in the global variable LAST_RETURNED_VALUE2.
#
# Usage:
#  invoke3 "false" "false" "fzf" "--height=10" || fail "fzf failed."
#  stdoutFilePath="${LAST_RETURNED_VALUE}"
#  stderrFilePath="${LAST_RETURNED_VALUE2}"
function invoke3() {
  local failIfFails acceptableErrorCodes executable
  failIfFails="${1}"
  acceptableErrorCodes="${2}"
  shift 2

  invoke5 "${failIfFails}" "${acceptableErrorCodes}" "" "" "$@" || return $?
}

# This function call an executable and its arguments.
# It redirects the stdout and stderr to environment variables.
#
# $1: true/false to indicate if the function should fail in case the execution fails
# $2: the acceptable error codes, comma separated (if the error code is matched, then set the output error code to 0)
# $3: true/false to indicate if the 4th argument represents a file path or directly the content for stdin
# $4: the stdin (can be empty)
# $5: the executable to invoke
# $6+: the arguments to pass to the executable
#
# Returns:
#  The exit code of the function is the exit code of the executable.
#  The content of stdout in the global variable LAST_RETURNED_VALUE.
#  The content of stderr in the global variable LAST_RETURNED_VALUE2.
#
# Usage:
#  invoke5var "false" "130,2" "false" "This is the stdin" "fzf" "--height=10" || fail "fzf failed."
#  stdout="${LAST_RETURNED_VALUE}"
#  stderr="${LAST_RETURNED_VALUE2}"
function invoke5var() {
  local -i exitCode=0
  invoke5 "$@" || exitCode=$?

  local content
  IFS= read -rd '' content < "${LAST_RETURNED_VALUE}" || true
  LAST_RETURNED_VALUE="${content}"
  IFS= read -rd '' content < "${LAST_RETURNED_VALUE2}" || true
  LAST_RETURNED_VALUE2="${content}"

  return ${exitCode}
}

# This function call an executable and its arguments.
# It redirects the stdout and stderr to environment variables.
#
# $1: true/false to indicate if the function should fail in case the execution fails
# $2: the acceptable error codes, comma separated (if the error code is matched, then set the output error code to 0)
# $3: the executable to invoke
# $4+: the arguments to pass to the executable
#
# Returns:
#  The exit code of the function is the exit code of the executable.
#  The content of stdout in the global variable LAST_RETURNED_VALUE.
#  The content of stderr in the global variable LAST_RETURNED_VALUE2.
#
# Usage:
#  invoke3var "false" "130,2" "fzf" "--height=10" || fail "fzf failed."
#  stdout="${LAST_RETURNED_VALUE}"
#  stderr="${LAST_RETURNED_VALUE2}"
function invoke3var() {
  local failIfFails acceptableErrorCodes executable
  failIfFails="${1}"
  acceptableErrorCodes="${2}"
  shift 2

  invoke5var "${failIfFails}" "${acceptableErrorCodes}" "" "" "$@" || return $?
}

# TODO: implement kurl


#===============================================================
# >>> Valet files and directories
#===============================================================

# Returns the path to the valet configuration directory.
# Creates it if missing.
#
# Usage:
#  getConfigurationDirectory && local directory="${LAST_RETURNED_VALUE}"
function getConfigurationDirectory() {
  local directory
  directory="${VALET_CONFIG_DIRECTORY:-${XDG_CONFIG_HOME:-$HOME/.config}/valet}"
  if [ ! -d "${directory}" ]; then
    mkdir -p "${directory}"
  fi
  LAST_RETURNED_VALUE="${directory}"
}

# Returns the path to the valet state directory.
# Creates it if missing.
#
# Usage:
#  getLocalStateDirectory && local directory="${LAST_RETURNED_VALUE}"
function getLocalStateDirectory() {
  local directory
  directory="${VALET_LOCAL_STATE_DIRECTORY:-${HOME}/.local/state/valet}"
  if [ ! -d "${directory}" ]; then
    mkdir -p "${directory}"
  fi
  LAST_RETURNED_VALUE="${directory}"
}

# Returns the path to the valet user directory.
# Does not create it if missing.
#
# Usage:
#  getUserDirectory && local directory="${LAST_RETURNED_VALUE}"
function getUserDirectory() {
  LAST_RETURNED_VALUE="${VALET_USER_DIRECTORY:-${HOME}/.valet.d}"
}

#===============================================================
# >>> Parser and interactive mode
#===============================================================

# Show the help for the current function.
# This should be called from a command function for which you want to display the help text.
#
# Usage:
#  showHelp
function showHelp() {
  local functionName
  # get the function name of the calling function
  functionName="${FUNCNAME[1]}"

  showFunctionHelp "${functionName}"
}

# Show an interactive menu for a command that has sub menus.
# This should be called from a command function for which you want to display the sub menu.
#
# Usage:
#  showSubMenu
function showSubMenu() {
  local functionName
  # get the function name of the calling function
  functionName="${FUNCNAME[1]}"

  local parsedArguments
  parseFunctionArguments "this" "$@" && parsedArguments="${LAST_RETURNED_VALUE}"
  debug "Parsed arguments:"$'\n'"${parsedArguments}"
  eval "${parsedArguments}"

  checkParseResults "${help:-}" "${parsingErrors:-}" "${functionName}"

  # filter the commands to only keep the sub commands of the function
  local filteredCommandsMenuBody line
  local -n command="CMD_COMMAND_${functionName}"
  filteredCommandsMenuBody=""
  local IFS=$'\n'
  for line in ${CMD_COMMANDS_MENU_BODY}; do
    if [[ "${line}" =~ ^(${command} [^ ]+ ) ]]; then
      filteredCommandsMenuBody+="${line}"$'\n'
    fi
  done

  if [ -z "${filteredCommandsMenuBody}" ]; then
    fail "No sub commands found for ⌜${command}⌝."
  fi

  showCommandsMenuAndRun "${functionName}" "${filteredCommandsMenuBody%$'\n'}"
}

# Parse the arguments and options of a function and return a string that can be evaluated to set the variables.
# This should be called from a command function for which you want to parse the arguments.
#
# Usage:
#  parseArguments "$@" && eval "${LAST_RETURNED_VALUE}"
#
# Notes:
# - It will return a string that can be evaluated to set the variables
#   corresponding to the arguments and options; e.g.:
#     local arg1 option1
#     arg1="xxx"
#     option1="xxx"
#     ...
# - It will also set the variable parsingErrors if there are any errors.
# - Variable name for an option is taken from the first --long version of the option.
# - If the function expects arguments or options but none are provided, it will
#   automatically go into interactive mode and ask the user inputs.
# - It will set the variable as an array if the (last) argument name ends with '...'
function parseArguments() {
  local functionName
  # get the function name of the calling function
  functionName="${FUNCNAME[1]}"

  parseFunctionArgumentsOrGoInteractive "${functionName}" "$@"
}

# A convenience function to check the parsing results and display an error message if needed.
# Will also display the help if the help option is true.
# This should be called from a command function for which you want to check the parsing results.
#
# Usage:
#  checkParseResults "${help:-}" "${parsingErrors:-}"
#  checkParseResults "${help:-}" "${parsingErrors:-}" "myFunctionName"
function checkParseResults() {
  local functionName help parsingErrors
  functionName="${3:-${FUNCNAME[1]}}"

  help="${1:-}"
  parsingErrors="${2:-}"

  if [ -n "${help}" ]; then
    showFunctionHelp "${functionName}"
    exit 0
  fi

  if [ -n "${parsingErrors:-}" ]; then
    local -n commandName="CMD_COMMAND_${functionName}"
    fail "${parsingErrors}"$'\n'"Use valet ${commandName} --help to get help."
  fi
}
