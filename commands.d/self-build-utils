#!/usr/bin/env bash
# author: github.com/jcaillon
# description: this script is a valet command

# shellcheck source=../libraries.d/lib-bash
source bash

# This function extracts each content between the valet front matter tags.
#
# $1: The file to extract from.
#
# Returns:
#   REPLY_ARRAY: Each extracted content in an array.
#
# Usage:
#   selfBuild_extractCommandYamls "myfile"
function selfBuild_extractCommandYamls() {
  local file="${1}"

  local firstLine=": \"---"
  local lastLine="---\""
  local firstLineAlt="##<<VALET_COMMAND"
  local lastLineAlt="##VALET_COMMAND"

  declare -a contentArray

  local line content
  local -i firstLineMatched=0 lastLineMatched=1 indentation=0
  local IFS
  while IFS=$'\n' read -rd $'\n' line || [[ -n ${line:-} ]]; do
    if [[ firstLineMatched -eq 0 ]]; then
      if [[ ${line} == "${firstLine}" || ${line} == "${firstLineAlt}" ]]; then
        firstLineMatched=1
        lastLineMatched=0
        content=""
        if [[ ${line} == "${firstLineAlt}" ]]; then
          indentation=2
        else
          indentation=0
        fi
        continue
      fi
    elif [[ lastLineMatched -eq 0 ]]; then
      if [[ ${line} == "${lastLine}" || ${line} == "${lastLineAlt}" ]]; then
        lastLineMatched=1
        firstLineMatched=0
        contentArray+=("${content}")
        continue
      fi
      if ((indentation > 0)); then
        content+="${line:indentation}"$'\n'
      else
        content+="${line}"$'\n'
      fi
    fi
  done <"${file}"

  # shellcheck disable=SC2034
  REPLY_ARRAY=("${contentArray[@]}")
}

# This function extracts properties from a command definition and stores them in
# TEMP_CMD_BUILD_* global variables.
# This is basically a parser for yaml-like content that supports only one level of properties
# (including an array with properties at level 1).
#
# $1: The command definition (yaml text) to extract from.
#
# Usage:
#   selfBuild_extractCommandDefinitionToVariables "commandDefinition Yaml content"
function selfBuild_extractCommandDefinitionToVariables() {
  local commandDefinition="${1}"

  # make sure to unset all previous TEMP_CMD_BUILD_* variables
  # shellcheck disable=SC2086
  unset -v ${!TEMP_CMD_BUILD_*}

  # loop through lines
  local multiLineIndentation=""
  local newIndentation=""
  local -i newIndentationLevel=0
  local -a propertyNames=()
  local propertyName
  local propertyValue=""
  local -i arrayLength=-1
  local -i currentArrayLength
  local -i readingMultiLine=0
  local newPropertyName newPropertyValue
  local -i lineNumber=0
  local line
  local IFS
  while IFS=$'\n' read -rd $'\n' line; do
    lineNumber+=1
    if [[ readingMultiLine -eq 0 || (-n ${line} && "${line}" != "${multiLineIndentation}"*) ]]; then
      # we are matching a new property
      newPropertyName="${line%%:*}"
      newPropertyName="${newPropertyName// /}"
      newPropertyValue="${line#*:}"
      newPropertyValue="${newPropertyValue/# /}"
      newIndentation="${line%%[![:space:]]*}"

      # skip if property name is empty
      if [[ -z ${newPropertyName} ]]; then continue; fi

      # if we were on a multi line property, we store it
      if [[ readingMultiLine -eq 1 ]]; then
        IFS=_ propertyName="${propertyNames[*]}"; IFS=' '
        selfBuild_createGlobalVariable "${propertyName}" "${propertyValue%$'\n'}" "${arrayLength}"
        readingMultiLine=0
        unset "propertyNames[-1]"
      fi

      # we are on an item of an array
      if [[ ${newPropertyName} == "-"* ]]; then
        if [[ arrayLength -le -1 ]]; then
          core::fail "Array item (starts with '- ') defined outside of an array [line ${lineNumber}]."
        fi
        arrayLength+=1
        newPropertyName="${newPropertyName:1}"
        newIndentation="${newIndentation}  "
        log::trace "Processing new array item."
      fi

      # check that property name only contains alphanumeric characters
      if [[ ! "${newPropertyName}" =~ ^[[:alnum:]]+$ ]]; then
        core::fail "Property name ⌜${newPropertyName}⌝ contains invalid characters (should be alphanumeric) [line ${lineNumber}]."
      fi

      propertyNames+=("${newPropertyName}")

      if [[ -z ${newPropertyValue// /} ]]; then
        # we are on a new array property
        log::trace "Starting new array property: ⌜${newPropertyName}⌝."
        arrayLength=0
        newIndentation="  "
        propertyNames=("${newPropertyName}")
      elif [[ ${newPropertyValue} == "|-"* ]]; then
        # we are on an a multi line property
        log::trace "Starting new multi line property: ⌜${newPropertyName}⌝."
        readingMultiLine=1
        propertyValue=""
        newIndentation="${newIndentation}  "
        multiLineIndentation="${newIndentation}"
      else
        # we are on a single line value property
        if [[ ${#newIndentation} -eq 0 ]]; then
          propertyName="${newPropertyName}"
        else
          IFS=_ propertyName="${propertyNames[*]}"; IFS=' '
        fi
        selfBuild_createGlobalVariable "${propertyName}" "${newPropertyValue}" "${arrayLength}"
      fi

      newIndentationLevel="${#newIndentation}"

      # if the indentation level has decreased, we un stack the property names
      if [[ newIndentationLevel -eq 0 ]]; then
        propertyNames=()
        arrayLength=-1
      elif [[ newIndentationLevel -eq 2 ]]; then
        while [[ ${#propertyNames[@]} -gt 1 ]]; do
          unset "propertyNames[-1]"
        done
      fi
    else
      # continuation of a multi lines value
      propertyValue+="${line#"${multiLineIndentation}"}"$'\n'
    fi

  done <<<"${commandDefinition}"$'\n'"end:"
}

function selfBuild_createGlobalVariable() {
  local name="${1}"
  local value="${2}"
  local arrayLength="${3}"

  log::trace "Setting variable ⌜TEMP_CMD_BUILD_${name}⌝ (array length=${arrayLength})."
  if [[ arrayLength -le -1 ]]; then
    # simple variable
    declare -g "TEMP_CMD_BUILD_${name}"="${value}"
  else
    value="${value//\"/\\\"}"
    value="${value//\$/\\\$}"
    value="${value//\`/\\\`}"

    # array variable
    local -n array="TEMP_CMD_BUILD_${name}"
    if [[ -v array && "${#array[@]}" -gt 0 ]]; then
      currentArrayLength=${#array[@]}
    else
      currentArrayLength=0
      eval "TEMP_CMD_BUILD_${name}=()"
    fi
    log::trace "currentArrayLength: ${currentArrayLength}."
    arrayLength=$((arrayLength - 1))
    while [[ arrayLength -gt currentArrayLength ]]; do
      log::trace "Adding empty string to array TEMP_CMD_BUILD_${name}."
      eval "TEMP_CMD_BUILD_${name}+=(\"\")"
      currentArrayLength+=1
    done
    eval "TEMP_CMD_BUILD_${name}+=(\"${value}\")"
  fi
}

# This function extract the first long name of an option from an option string formatted as:
# --option -o --other-long-name
#
# $1: The option string.
#
# Returns:
#   REPLY: The first long name of the option.
#
# Usage:
#   selfBuild_extractFirstLongNameFromOptionString "--option -o" && local firstLongName="${REPLY}"
function selfBuild_extractFirstLongNameFromOptionString() {
  local optionString="${1}"
  local word
  # shellcheck disable=SC2034
  for word in ${optionString}; do
    if [[ ${word} == "--"* ]]; then
      REPLY="${word%,}"
      return 0
    fi
  done
  REPLY=""
}


# This function writes the command definition variables to a file.
# It will write a header with the description of each variable.
# It will write the variables in the same format as the declare -p command.
#
# $1: The file to write to.
#
# Usage:
#   selfBuild_writeCommandDefinitionVariablesToFile "myfile"
function selfBuild_writeCommandDefinitionVariablesToFile() {
  local outputFile="${1}"
  local content

  fs::createFileIfNeeded "${outputFile}"

  {
    # write the header
    printf '%s\n' "#!/usr/bin/env bash
# author: github.com/jcaillon
# description: This script declares global variables used in valet to manage commands.
# shellcheck disable=SC2034

GLOBAL_CMD_INCLUDED=true

# /!\ This file is auto-generated by the 'self-build' script. Do not edit it manually

# For the rest of this document:
# - xxx represents a function name
# - yyy represents a command name

# ====================
# Common variables
# ====================
# CMD_LIBRARY_DIRECTORIES = array of all the libraries.d directories found in the user directory
# CMD_ALL_FUNCTIONS_ARRAY = array of all the functions callable with a command
# CMD_ALL_FUNCTIONS = list all the functions callable with a command
# CMD_ALL_COMMANDS_ARRAY = array of all the commands
# CMD_ALL_COMMANDS = list all the commands
# CMD_ALL_COMMAND_SELECTION_ITEMS_ARRAY = the list of commands [4 spaces] command short description that is used to display the command menus
# CMD_MAX_SUB_COMMAND_LEVEL = maximum number of sub command levels; e.g. 'command subcommand subsubcommand' has 2 levels
# CMD_ALL_MENU_COMMANDS_ARRAY = array of all the commands that should open a sub menu to show a list of sub commands
# CMD_MAX_COMMAND_WIDTH = get the maximum width (nb characters) among all commands
# CMD_FUNCTION_NAME_yyy = the function name for the given yyy command
# CMD_COMMAND_xxx = the command of the function
# CMD_FILETOSOURCE_xxx = the file to source for the function
# CMD_HIDEINMENU_xxx = true to hide the command in the menu

# ====================
# Variables used to show the help of each command
# ====================
# CMD_SHORTDESCRIPTION_xxx = the short description of the function
# CMD_DESCRIPTION_xxx = the description of the function
# CMD_SUDO_xxx = true if the function requires sudo
# CMD_EXAMPLES_NAME_xxx = array with each example name
# CMD_EXAMPLES_DESCRIPTION_xxx = array with each example description
# CMD_OPTIONS_NAME_xxx = array with each option name
# CMD_OPTIONS_DESCRIPTION_xxx = array with each option description
# CMD_ARGUMENTS_NAME_xxx = array with each argument name
# CMD_ARGUMENTS_DESCRIPTION_xxx = array with each argument description
#
# CMD_COMMANDS_NAME_xxx = array with each sub command name
# CMD_COMMANDS_SHORTDESCRIPTION_xxx = array with each sub commmand short description

# ====================
# Variables used during the arguments parsing of each command
# ====================
# Get the options of a given function xxx.
# CMD_OPTS_xxx = array with each option separated by a space
# CMD_OPTS_HAS_VALUE_xxx = array which indicates for each option if it has a value or not
# CMD_OPTS_NAME_xxx = array with each option names in camel case
# CMD_OPTS_NAME_SC_xxx = array with each option names in snake case
# CMD_OPTS_DEFAULT_xxx = contains the default value for this option
# CMD_ARGS_NAME_xxx = array with each argument names in camel case
# CMD_ARGS_LAST_IS_ARRAY_xxx = true/false to indicate if the last argument of the function is an array (contains ...)
# CMD_ARGS_NB_OPTIONAL_xxx = integer to indicate the number of optional arguments (contains ?)

"
    # shellcheck disable=SC2086
    bash::getBuiltinOutput declare -p ${!CMD_*}
    local line
    local IFS
    while IFS=$'\n' read -rd $'\n' line; do
      printf '%s\n' "${line#declare -? }"
    done <<< "${REPLY}"
  } >"${outputFile}"
}

# This function verifies the global TEMP_CMD_BUILD_* variables to make sure that the command
# definition is valid.
# It write any error the global variable SELF_BUILD_ERRORS.
#
# Usage:
#   selfBuild_verifyCommandDefinition
function selfBuild_verifyCommandDefinition() {
  local function="${1}"
  local command="${2}"

  local message=""

  if [[ "${function}" != "this" ]]; then
    if [[ -z ${command} ]]; then
      message+="- is missing the command name."$'\n'
    else
      # the command can only contain letters, numbers, hyphens and spaces
      if [[ ! "${command}" =~ ^[[:alnum:]\ -]+$ ]]; then
        message+="- has an invalid command name, it can only contain letters, numbers, hyphens and spaces."$'\n'
      fi
    fi
  fi
  if [[ -z ${function:-} ]]; then
    message+="- has an empty function name."$'\n'
  else
    # the function can only contain letters, numbers, hyphens and spaces
    if [[ ! "${function}" =~ ^[[:alnum:]\ -]+$ ]]; then
      message+="- has an invalid function name, it can only contain letters, numbers, hyphens and spaces."$'\n'
    fi
  fi
  if [[ -z ${TEMP_CMD_BUILD_shortDescription:-} ]]; then
    message+="- does not have a short description."$'\n'
  fi
  if [[ -z ${TEMP_CMD_BUILD_description:-} ]]; then
    message+="- does not have a description."$'\n'
  fi
  if [[ -z ${TEMP_CMD_BUILD_fileToSource:-} ]]; then
    message+="- does not have a file to source to find the function."$'\n'
  fi

  # check for each option
  local -i index
  local option optionNames
  for ((index = 0; index < ${#TEMP_CMD_BUILD_options_name[@]}; index++)); do
    option="${TEMP_CMD_BUILD_options_name[index]}"
    optionNames="${option}"

    # make sure that there is only one short option and that is has only 1 character
    if [[ ${optionNames} == *"<"* ]]; then
      optionNames="${optionNames%%<*}"
    fi
    optionNames="${optionNames//,/ }"
    string::trimAll optionNames
    # remove the first short option
    optionNames="${REPLY/ -? /}"
    # if there still are short options, it means that there are more than one or that one has more than one character
    if [[ ${optionNames} =~ " -"[^-]+ ]]; then
      message+="- has an invalid option ⌜${option}⌝, it can only have one short option (single -) and the short option must have a single character."$'\n'
    fi
  done

  # TODO: validate that each option is different, same for arguments
  # only the last argument can end with ...
  # only the last arguments can be optional
  # check the syntax for options
  # check the alphanumeric characters for options and arguments
  # for short option, only one character is allowed
  #
  #

  if [[ -n ${message} ]]; then
    SELF_BUILD_ERRORS+="The command definition ⌜${command}⌝ for function ⌜${function}⌝:"$'\n'"${message}"
  fi
}